[{"title":"面试题","url":"/blog/2021/12/21/%E9%9D%A2%E8%AF%95%E9%A2%98/","content":"<h2 id=\"判断数据类型的方法🌟🌟🌟🌟🌟\"><a href=\"#判断数据类型的方法🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"判断数据类型的方法🌟🌟🌟🌟🌟\"></a>判断数据类型的方法🌟🌟🌟🌟🌟</h2><ol>\n<li>typeof(缺点typeof ull的值为Object,无法分辨是null还是Object)</li>\n<li>instanceof(只能判断对象是否存在于目标对象的原型链上)</li>\n<li>constructor</li>\n<li>Object.prototype.toString.call()<br>一种最好的基本类型检测方式 Object.prototype.toString.call() ;它可以区分 null 、 string 、<br>boolean 、 number 、 undefined 、 array 、 function 、 object 、 date 、 math 数据类型。<br>缺点：不能细分为谁谁的实例<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// -----------------------------------------typeof</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span> <span class=\"comment\">// &#x27;undefined&#x27; </span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">&#x27;10&#x27;</span> <span class=\"comment\">// &#x27;String&#x27; </span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">10</span> <span class=\"comment\">// &#x27;Number&#x27; </span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">false</span> <span class=\"comment\">// &#x27;Boolean&#x27; </span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"built_in\">Symbol</span>() <span class=\"comment\">// &#x27;Symbol&#x27; </span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"built_in\">Function</span> <span class=\"comment\">// ‘function&#x27; </span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span> <span class=\"comment\">// ‘Object’ </span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> [] <span class=\"comment\">// &#x27;Object&#x27; </span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> &#123;&#125; <span class=\"comment\">// &#x27;Object&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// -----------------------------------------instanceof</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f1 = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f1 <span class=\"keyword\">instanceof</span> Foo);<span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Number</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">123</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Number</span>); <span class=\"comment\">//false   --&gt;不能判断字面量的基本数据类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// -----------------------------------------constructor</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;ming&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[hbc]at/gi</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e.constructor);<span class=\"comment\">//ƒ Number() &#123; [native code] &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e.constructor.name);<span class=\"comment\">//Number</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fn.constructor.name) <span class=\"comment\">// Function </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(date.constructor.name)<span class=\"comment\">// Date </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.constructor.name) <span class=\"comment\">// Array </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.constructor.name) <span class=\"comment\">// RegExp</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-----------------------------------------Object.prototype.toString.call()</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">undefined</span>)); <span class=\"comment\">// &quot;[object Undefined]&quot; </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">null</span>)); <span class=\"comment\">// &quot;[object Null]&quot; </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"number\">123</span>)); <span class=\"comment\">// &quot;[object Number]&quot; </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"string\">&quot;abc&quot;</span>)); <span class=\"comment\">// &quot;[object String]&quot; </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">true</span>)); <span class=\"comment\">// &quot;[object Boolean]&quot; </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;ming&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[hbc]at/gi</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(fn));<span class=\"comment\">// &quot;[object Function]&quot; </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(date));<span class=\"comment\">// &quot;[object Date]&quot; </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(arr)); <span class=\"comment\">// &quot;[object Array]&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(reg));<span class=\"comment\">// &quot;[object RegExp]&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"instanceof原理🌟🌟🌟🌟🌟\"><a href=\"#instanceof原理🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"instanceof原理🌟🌟🌟🌟🌟\"></a>instanceof原理🌟🌟🌟🌟🌟</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myInstance</span>(<span class=\"params\">L, R</span>) </span>&#123;<span class=\"comment\">//L代表instanceof左边，R代表右边</span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> RP = R.prototype</span><br><span class=\"line\">     <span class=\"keyword\">var</span> LP = L.__proto__</span><br><span class=\"line\">     <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(LP == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(LP == RP) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       LP = LP.__proto__</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(myInstance(&#123;&#125;,<span class=\"built_in\">Object</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"为什么typeof-null是Objec🌟🌟🌟🌟\"><a href=\"#为什么typeof-null是Objec🌟🌟🌟🌟\" class=\"headerlink\" title=\"为什么typeof null是Objec🌟🌟🌟🌟\"></a>为什么typeof null是Objec🌟🌟🌟🌟</h2>因为在JavaScript中，<code>不同的对象都是使用二进制存储的</code>，如果二进制前三位都是0的话，系统会判断为是Object类型，而null的二进制全是0，自然也就判断为Object</li>\n</ol>\n<p>这个bug是初版本的JavaScript中留下的，扩展一下其他五种标识位：</p>\n<blockquote>\n<p>000 对象<br>1 整型<br>010 双精度类型<br>100字符串<br>110布尔类型</p>\n<h2 id=\"手写call、apply、bind🌟🌟🌟🌟🌟\"><a href=\"#手写call、apply、bind🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"手写call、apply、bind🌟🌟🌟🌟🌟\"></a>手写call、apply、bind🌟🌟🌟🌟🌟</h2><p>1.call和apply实现思路主要是：<br>  判断是否是函数调用，若非函数调用抛异常<br>  通过新对象（context）来调用函数<br>  给context创建一个fn设置为需要调用的函数<br>  结束调用完之后删除fn<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 手写call</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.myCall = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span> != <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;Not a function&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 不穿参数默认window</span></span><br><span class=\"line\">  context = context || <span class=\"built_in\">window</span></span><br><span class=\"line\">  <span class=\"comment\">// 保存this</span></span><br><span class=\"line\">  context.fn = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 保存参数</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> args = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>).slice(<span class=\"number\">1</span>)<span class=\"comment\">//Array.from把伪数组转出数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 调用函数</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = context.fn(...args);</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.fn </span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 手写apply</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.myApply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span> != <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;Not a function&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result</span><br><span class=\"line\">  <span class=\"comment\">// 不穿参数默认window</span></span><br><span class=\"line\">  context = context || <span class=\"built_in\">window</span></span><br><span class=\"line\">  <span class=\"comment\">// 保存this</span></span><br><span class=\"line\">  context.fn = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 是否传参数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">    result = context.fn(...arguments[<span class=\"number\">1</span>])</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    result = context.fn()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.fn</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>2.bind实现思路<br>判断是否是函数调用，若非函数调用抛异常<br>返回函数<br>判断函数的调用方式，是否是被new出来的<br>new出来的话返回空对象，但是实例的<strong>proto</strong>指向_this的prototype<br>完成函数柯里化<br>Array.prototype.slice.call()<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.myBind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span> != <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;Not a function&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 保存调用bind函数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> _this = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 保存参数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"comment\">//返回一个函数</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是不是new出来的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">this</span> <span class=\"keyword\">instanceof</span> F)&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果是new出来的</span></span><br><span class=\"line\">      <span class=\"comment\">// 返回一个空对象，且使创建出来的实例的__proto__指向_this的prototype，且完成函数柯里化</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> _this(...args,...arguments)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果不是new出来的改变this指向，且完成函数柯里化</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> _this.apply(context,args.concat(...arguments))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"字面量创建对象和new创建对象有什么区别，new内部都实现了什么，手写一个new🌟🌟🌟🌟🌟\"><a href=\"#字面量创建对象和new创建对象有什么区别，new内部都实现了什么，手写一个new🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"字面量创建对象和new创建对象有什么区别，new内部都实现了什么，手写一个new🌟🌟🌟🌟🌟\"></a>字面量创建对象和new创建对象有什么区别，new内部都实现了什么，手写一个new🌟🌟🌟🌟🌟</h2><p>字面量:<br>字面量创建对象更简单，方便阅读<br>不需要作用域解析，速度更快<br>new内部：<br>创建一个新对象<br>使新对象的<strong>proto</strong>指向原函数的prototype<br>改变this指向（指向新的obj）并执行该函数，执行结果保存起来作为result<br>判断执行函数的结果是不是null或Undefined，如果是则返回之前的新对象，如果不是则返回result<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//手写new</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myNew</span>(<span class=\"params\">fn,...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个控对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 使空对象的隐式原型指向原函数的显式原型</span></span><br><span class=\"line\">  obj.__proto__ = fn.prototype</span><br><span class=\"line\">  <span class=\"comment\">// this指向obj</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = fn.apply(obj,args)</span><br><span class=\"line\">  <span class=\"comment\">// 返回</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span> ? result : obj</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"字面量new出来的对象和-Object-create-null-创建出来的对象有什么区别🌟🌟🌟\"><a href=\"#字面量new出来的对象和-Object-create-null-创建出来的对象有什么区别🌟🌟🌟\" class=\"headerlink\" title=\"字面量new出来的对象和 Object.create(null)创建出来的对象有什么区别🌟🌟🌟\"></a>字面量new出来的对象和 Object.create(null)创建出来的对象有什么区别🌟🌟🌟</h2><ul>\n<li>字面量和new出来的对象会继承Object的属性和方法，他们的隐式原型会指向Object的显示原型</li>\n<li>Object.create(null)创建出来的对象原型为null，作为原型链的顶端，没有继承Object的属性和方法。<h2 id=\"什么是作用域什么是作用域链🌟🌟🌟🌟\"><a href=\"#什么是作用域什么是作用域链🌟🌟🌟🌟\" class=\"headerlink\" title=\"什么是作用域什么是作用域链🌟🌟🌟🌟\"></a>什么是作用域什么是作用域链🌟🌟🌟🌟</h2></li>\n<li>规定变量和函数可使用的范围称为作用域</li>\n<li>每个函数都有一个作用域，查找变量或者函数时，需要从局部作用域到全局作用域依次查找，这些作用域到集合称为作用域链<h2 id=\"什么是执行栈，什么是执行上下文🌟🌟🌟🌟\"><a href=\"#什么是执行栈，什么是执行上下文🌟🌟🌟🌟\" class=\"headerlink\" title=\"什么是执行栈，什么是执行上下文🌟🌟🌟🌟\"></a>什么是执行栈，什么是执行上下文🌟🌟🌟🌟</h2><code>执行上下文分为:</code><ul>\n<li>全局执行上下文<br>创建一个全局的window对象，并规定this执行window，执行js的时候就压入栈底，关闭浏览器的时候才能弹出</li>\n</ul>\n</li>\n<li>函数执行上下文<br>每次函数调用时，都会新创建一个函数执行上下文<br>执行上下文分为创建阶段和执行阶段<br>创建阶段：函数环境会创建变量对象：arguments对象（并赋值）、函数声明（并赋值）、变量声明（不赋值），函数表达式声明（不赋值）；会确定this指向；会确定作用域<br>执行阶段：变量赋值、函数表达式赋值，使变量对象编程活跃对象</li>\n<li>eval执行上下文</li>\n</ul>\n</blockquote>\n<pre><code class=\"lang-执行栈:```\">- 栈的特点```先进后出\n</code></pre>\n<ul>\n<li>当进入一个执行环境，就会创建它的执行上下文，然后进行压栈(进栈)，当程序执行完成时，它的执行上下文就会被销毁，进行弹栈(出栈)</li>\n<li>栈底永远是全局环境的执行上下文，栈顶永远是正在执行函数的执行上下文</li>\n<li>只有浏览器关闭的时候全局执行上下文才会弹出<h2 id=\"什么是闭包？闭包的作用？闭包的应用？🌟🌟🌟🌟🌟\"><a href=\"#什么是闭包？闭包的作用？闭包的应用？🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"什么是闭包？闭包的作用？闭包的应用？🌟🌟🌟🌟🌟\"></a>什么是闭包？闭包的作用？闭包的应用？🌟🌟🌟🌟🌟</h2><blockquote>\n<p>函数执行，形成私有的执行上下文，使内部私有变量不受外界干扰，起到保护和保存的作用<br>关于闭包说法不一 <a href=\"https://zhuanlan.zhihu.com/p/22486908\">https://zhuanlan.zhihu.com/p/22486908</a></p>\n</blockquote>\n</li>\n</ul>\n<pre><code class=\"lang-作用```\">- 保护\n避免变量冲突\n- 保存\n解决循环绑定引发的索引问题\n- 变量不会被销毁\n可以使用函数内部的函数，使变量不会被垃圾机制回收\n\n```应用\n</code></pre>\n<ul>\n<li>设计模式中的单例模式</li>\n<li>for循环中保留i的操作</li>\n<li>防抖和节流</li>\n<li>函数柯里化</li>\n</ul>\n<pre><code class=\"lang-缺点```\">会出现内存泄漏\n\n## 原型和原型链、如何理解🌟🌟🌟🌟🌟\n帮助理解 https://www.jianshu.com/p/dee9f8b14771\n\n```原型:\n</code></pre>\n<p>原型分为隐式原型和显式原型，每个对象都有一个隐式原型，它指向自己的构造函数的显式原型</p>\n<pre><code class=\"lang-原型链：```\">多个__proto__组成的集合成为原型链\n- 所有实例的__proto__都指向他们构造函数的prototype\n- 所有的prototype都是对象，自然它的__proto__指向的是Object()的prototype\n- 所有的构造函数的隐式原型指向的都是Function()的显示原型\n- Object的隐式原型是null\n\n## js的继承方式有哪些、及优点🌟🌟🌟🌟🌟\n&gt;原型继承、组合继承、寄生组合继承、es6extend\n\n```原型继承\n</code></pre>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 把父类的实例作为子类的原型</span></span><br><span class=\"line\"><span class=\"comment\">// 缺点：子类的实例共享了父类构造函数的引用属性   不能传参</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">      friends: [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>, <span class=\"string\">&quot;d&quot;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> p1 = <span class=\"built_in\">Object</span>.create(person)</span><br><span class=\"line\"></span><br><span class=\"line\">    p1.friends.push(<span class=\"string\">&quot;aaa&quot;</span>)<span class=\"comment\">//缺点：子类的实例共享了父类构造函数的引用属性</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(p1);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person);<span class=\"comment\">//缺点：子类的实例共享了父类构造函数的引用属性</span></span><br></pre></td></tr></table></figure>\n<pre><code class=\"lang-组合继承```\"><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在子函数中运行父函数，但是要利用call把this改变一下，</span></span><br><span class=\"line\"><span class=\"comment\">// 再在子函数的prototype里面new Father() ,使Father的原型中的方法也得到继承，最后改变Son的原型中的constructor</span></span><br><span class=\"line\"><span class=\"comment\">// 缺点：调用了两次父类的构造函数，造成了不必要的消耗，父类方法可以复用</span></span><br><span class=\"line\"><span class=\"comment\">// 优点可传参，不共享父类引用属性</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">     <span class=\"built_in\">this</span>.hobby = [<span class=\"string\">&quot;篮球&quot;</span>, <span class=\"string\">&quot;足球&quot;</span>, <span class=\"string\">&quot;乒乓球&quot;</span>]</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   Father.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">     Father.call(<span class=\"built_in\">this</span>, name)</span><br><span class=\"line\">     <span class=\"built_in\">this</span>.age = age</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   Son.prototype = <span class=\"keyword\">new</span> Father()</span><br><span class=\"line\">   Son.prototype.constructor = Son</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Son(<span class=\"string\">&quot;ming&quot;</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(s);</span><br></pre></td></tr></table></figure>\n\n```寄生组合继承\n</code></pre>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.hobby = [<span class=\"string\">&quot;篮球&quot;</span>, <span class=\"string\">&quot;足球&quot;</span>, <span class=\"string\">&quot;乒乓球&quot;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Father.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  Father.call(<span class=\"built_in\">this</span>, name)</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Son.prototype = <span class=\"built_in\">Object</span>.create(Father.prototype)</span><br><span class=\"line\">Son.prototype.constructor = Son</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"keyword\">new</span> Son(<span class=\"string\">&quot;ming&quot;</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s2);</span><br></pre></td></tr></table></figure>\n<pre><code class=\"lang-extend继承```\"><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">x, y</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.y = y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">x, y, color</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this.color = color; // ReferenceError</span></span><br><span class=\"line\">    <span class=\"built_in\">super</span>(x, y);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.color = color; <span class=\"comment\">// 正确</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> cp = <span class=\"keyword\">new</span> ColorPoint(<span class=\"number\">25</span>, <span class=\"number\">8</span>, <span class=\"string\">&#x27;green&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cp.x);</span><br></pre></td></tr></table></figure>\n## 内存泄漏、垃圾回收机制🌟🌟🌟🌟🌟\n```什么是内存泄漏：\n</code></pre>\n<p>内存泄漏是指不在用的内存没有释放出来，导致该段内存无法被使用就是内存泄漏</p>\n<pre><code class=\"lang-为什么会导致内存泄漏：```\">内存泄漏指我们无法在通过js访问某个对象，而垃圾回收机制认为该对象还在被引用，因此垃圾回收机制不会释放该对象，导致该块内存无法被释放，积少成多，系统会越来越卡以至于崩溃\n```垃圾回收机制都有哪写策略：\n</code></pre>\n<ul>\n<li>标记清除法<br>垃圾回收机制获取根并标记他们，然后访问并标记所有来自它的引用，然后再访问这些对象并标记他们的引用。。。如此递进结束后若发现有没有标记的(不可达的)进行删除，进入执行环境的不能删除</li>\n<li>引用计数法<br>1.当声明一个变量并给该变量赋值一个引用类型的值时候，该值的计数+1，当该值赋值给另一个变量的时候，该计数+1，当该值被其他值取代的时候，该计数-1，当计数变为0的时候，说明无法访问该值了，垃圾回收机制清除该对象<br>2.缺点： 当两个对象循环引用的时候，引用计数无计可施。如果循环引用多次执行的话，会造成崩溃等问题。所以后来被标记清除法取代。<h2 id=\"深拷贝浅拷贝🌟🌟🌟🌟🌟\"><a href=\"#深拷贝浅拷贝🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"深拷贝浅拷贝🌟🌟🌟🌟🌟\"></a>深拷贝浅拷贝🌟🌟🌟🌟🌟</h2>帮助理解 <a href=\"https://www.cnblogs.com/dengyao-blogs/p/11466598.html\">https://www.cnblogs.com/dengyao-blogs/p/11466598.html</a><pre><code class=\"lang-浅拷贝：```\">子对象复制父对象，父子对象发生关联，两者属性值指向同一内存空间。简单来讲，就是改变其中一个对象，另一个对象也会跟着改变。\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">    b = a</span><br><span class=\"line\">a[<span class=\"number\">0</span>] = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a,b) <span class=\"comment\">//[4, 2, 3]  [4, 2, 3]</span></span><br></pre></td></tr></table></figure>\n```深拷贝：\n</code></pre>\n拷贝对象各个层级的属性。简单的讲，就是复制出来的每个对象都有属于自己的内存空间，不会互相干扰。<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//借用JSON对象的 parse 和 stringify</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> c = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">        d = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(c))</span><br><span class=\"line\">    c[<span class=\"number\">0</span>] = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(c,d); <span class=\"comment\">//[4, 2, 3]   [1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//封装深拷贝函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> objClone = <span class=\"built_in\">Array</span>.isArray(obj) ? [] : &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj &amp;&amp; <span class=\"keyword\">typeof</span> obj === <span class=\"string\">&quot;object&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(obj.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">                 <span class=\"comment\">// 判断 obj 是否是对象,如果是，递归复制</span></span><br><span class=\"line\">                 <span class=\"keyword\">if</span>(obj[key] &amp;&amp; <span class=\"keyword\">typeof</span> obj[key] === <span class=\"string\">&quot;object&quot;</span>) &#123;</span><br><span class=\"line\">                      objClone[key] = deepClone(obj[key]);</span><br><span class=\"line\">                 &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                      <span class=\"comment\">// 如果不是</span></span><br><span class=\"line\">                      objClone[key] = obj[key];</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">    <span class=\"keyword\">return</span> objClone</span><br><span class=\"line\">&#125;         </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>],</span><br><span class=\"line\">     b = deepClone(a);</span><br><span class=\"line\">a[<span class=\"number\">0</span>] = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a,b)</span><br></pre></td></tr></table></figure>\nhasOwnProperty() 方法详解  <a href=\"https://blog.csdn.net/a791226606/article/details/110679991\">https://blog.csdn.net/a791226606/article/details/110679991</a></li>\n</ul>\n<h2 id=\"为什么js是单线程🌟🌟🌟🌟🌟\"><a href=\"#为什么js是单线程🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"为什么js是单线程🌟🌟🌟🌟🌟\"></a>为什么js是单线程🌟🌟🌟🌟🌟</h2><blockquote>\n<p>因为js里面有可视的DOM，如果是多线程的话，这个线程正在删除DOM节点，另一个线程正在编辑DOM节点，导致浏览器不知道该听谁的。</p>\n</blockquote>\n<h2 id=\"如何实现异步编程\"><a href=\"#如何实现异步编程\" class=\"headerlink\" title=\"如何实现异步编程\"></a>如何实现异步编程</h2><p>回调函数</p>\n<h2 id=\"什么是generator\"><a href=\"#什么是generator\" class=\"headerlink\" title=\"什么是generator\"></a>什么是generator</h2><blockquote>\n<p>generators 是可以控制 iterator（迭代器）的函数。并在任何时候都可以暂停和恢复。<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">generatorForLoop</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; num; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> genForLoop = generatorForLoop(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">genForLoop.next(); <span class=\"comment\">// 首先 console.log —— 0</span></span><br><span class=\"line\">genForLoop.next(); <span class=\"comment\">// 1</span></span><br><span class=\"line\">genForLoop.next(); <span class=\"comment\">// 2</span></span><br><span class=\"line\">genForLoop.next(); <span class=\"comment\">// 3</span></span><br><span class=\"line\">genForLoop.next(); <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure><br>帮助理解 <a href=\"https://zhuanlan.zhihu.com/p/45599048\">https://zhuanlan.zhihu.com/p/45599048</a></p>\n<h2 id=\"Generator是怎么样使用的以及各个阶段的变化如何？🌟🌟🌟\"><a href=\"#Generator是怎么样使用的以及各个阶段的变化如何？🌟🌟🌟\" class=\"headerlink\" title=\"Generator是怎么样使用的以及各个阶段的变化如何？🌟🌟🌟\"></a>Generator是怎么样使用的以及各个阶段的变化如何？🌟🌟🌟</h2><ul>\n<li>首先生成器是一个函数，用来返回迭代器</li>\n<li>调用生成器后不会立即执行，而是通过返回的迭代器来控制这个生成器一步一步执行的</li>\n<li>通过调用迭代器的next方法来请求一个一个的值，返回的对象有两个属性，一个是value，也就是值，一个是<code>done</code>，是个布尔值类型，done为true说明生成器函数执行完毕，没有可返回的值</li>\n<li>done为true后，继续调用迭代器的next方法，返回值value为<code>undefined</code><br><code>状态变化</code></li>\n<li>每当执行到yield属性的时候，都会返回一个对象</li>\n<li>这时候生成器处于一个非阻塞的挂起状态</li>\n<li>调用迭代器的next方法的时候，生成器又从挂起状态变成执行状态，继续上一次执行位置开始执行</li>\n<li>直到遇到下一次yield依次循环</li>\n<li>直到代码没有yield了，就会返回一个done为true，value为undefined的对象<h2 id=\"说说-Promise-的原理？你是如何理解-Promise-的？🌟🌟🌟🌟🌟\"><a href=\"#说说-Promise-的原理？你是如何理解-Promise-的？🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"说说 Promise 的原理？你是如何理解 Promise 的？🌟🌟🌟🌟🌟\"></a>说说 Promise 的原理？你是如何理解 Promise 的？🌟🌟🌟🌟🌟</h2><pre><code class=\"lang-实现原理```\">说到底，Promise 也还是使用回调函数，只不过是把回调封装在了内部，使用上一直通过 then 方法的链式调用，使得多层的回调嵌套看起来变成了同一层的，书写上以及理解上会更直观和简洁一些。\n帮助理解 https://blog.csdn.net/qq_37860963/article/details/81539118\n## 宏任务和微任务有哪些🌟🌟🌟🌟🌟\n```宏任务:\n</code></pre>\nscript,setTimeOut,setInterval,setImmediate<br><code>微任务:</code><br>Promise.then,process.nextTick,Object.observe,MutationObserve</li>\n</ul>\n</blockquote>\n<ul>\n<li>Promise是同步任务<h2 id=\"宏任务和微任务是怎么执行的🌟🌟🌟🌟🌟\"><a href=\"#宏任务和微任务是怎么执行的🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"宏任务和微任务是怎么执行的🌟🌟🌟🌟🌟\"></a>宏任务和微任务是怎么执行的🌟🌟🌟🌟🌟</h2></li>\n<li>执行宏任务中的script</li>\n<li>进行script后，所有的同步任务主线程执行</li>\n<li>所有的宏任务放入宏任务执行队列</li>\n<li>所有的微任务放入微任务执行队列</li>\n<li>先清空微任务队列</li>\n<li>再取一个宏任务执行，再清空微任务队列</li>\n<li>依次循环<br><code>例题1</code><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;2&#x27;</span>);</span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;3&#x27;</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;4&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;5&#x27;</span>);</span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;6&#x27;</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;7&#x27;</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;8&#x27;</span>)</span><br><span class=\"line\">    foo()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;10&#x27;</span>)</span><br><span class=\"line\">bar()</span><br><span class=\"line\"><span class=\"comment\">//2 4 5 10 8 9 3 6 1 7</span></span><br></pre></td></tr></table></figure>\n解析</li>\n<li>首先js浏览器执行js代码从上到下顺序，遇到setTimeout,把setTimeout放到宏任务执行队列</li>\n<li>new Promise属于主线程任务直接执行 2</li>\n<li>promise.then下面属于微任务，把then放到微任务的执行队列</li>\n<li>console.log(‘4’);属于主线程任务直接执行 4</li>\n<li>又遇到new Promise属于主线程直接执行 5,下面的then放到微任务执行队列</li>\n<li>又遇到setTimeout,把setTimeout放到宏任务执行队列</li>\n<li>console.log(‘10’)属于主线程任务直接执行 10</li>\n<li>遇到bar()函数调用，执行bar函数打印 8 在bar函数中调用foo()执行打印 9 </li>\n<li>主线程的任务都执行完之后，去执行微任务队列中的任务执行 3， 6</li>\n<li>微任务队列中的任务执行完之后，执行宏任务队列中的任务执行1， 7<br><code>例题2</code><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;2&#x27;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;3&#x27;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">        resolve();</span><br><span class=\"line\">      &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;4&#x27;</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;5&#x27;</span>); </span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;6&#x27;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;7&#x27;</span>);</span><br><span class=\"line\">      <span class=\"comment\">// reject();</span></span><br><span class=\"line\">      resolve();</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;8&#x27;</span>)</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;10&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 5 7 10 8 1 2 4 6 3</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"变量和函数怎么进行提升的？优先级是怎么样的？🌟🌟🌟🌟\"><a href=\"#变量和函数怎么进行提升的？优先级是怎么样的？🌟🌟🌟🌟\" class=\"headerlink\" title=\"变量和函数怎么进行提升的？优先级是怎么样的？🌟🌟🌟🌟\"></a>变量和函数怎么进行提升的？优先级是怎么样的？🌟🌟🌟🌟</h2></li>\n<li>对所有函数声明进行了提升(除函数表达式和箭头函数)，引用类型的赋值<br>开辟堆空间<br>存储内容<br>将地址赋给变量</li>\n<li>对变量声明进行提升，只声明不赋值，值为undefined</li>\n</ul>\n<h2 id=\"var-let-const-有什么区别🌟🌟🌟🌟🌟\"><a href=\"#var-let-const-有什么区别🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"var let const 有什么区别🌟🌟🌟🌟🌟\"></a>var let const 有什么区别🌟🌟🌟🌟🌟</h2><ul>\n<li>var<br>var声明的变量可以进行变量提升,let const没有<br>var可以重复声明<br>var在飞函数作用域中定义是挂载到window上的</li>\n<li>let<br>let声明的变量在才局部起作用<br>let防止变量污染<br>不可再声明</li>\n<li>const<br>具有let的所有特征<br>不可被改变<br>如果const声明的是对象的话，是可以修改对象里面的值的<h2 id=\"箭头函数和普通函数的区别？箭头函数可以当做构造函数-new-吗-🌟🌟🌟🌟🌟\"><a href=\"#箭头函数和普通函数的区别？箭头函数可以当做构造函数-new-吗-🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"箭头函数和普通函数的区别？箭头函数可以当做构造函数 new 吗?🌟🌟🌟🌟🌟\"></a>箭头函数和普通函数的区别？箭头函数可以当做构造函数 new 吗?🌟🌟🌟🌟🌟</h2></li>\n<li>箭头函数是普通函数的简写，但是他不具备很多普通函数的特征</li>\n<li>1.this指向问题，箭头函数的this指向它定义时所在的对象，而不是调用时所在的对象</li>\n<li>2.不会进行函数提升</li>\n<li>3.没有arguments对象，不能使用arguments，如果要获取参数的话要使用rest运算符</li>\n<li>4.没有yield属性，不能作为生成器gengenerator使用</li>\n<li>5.不能new<br>没有自己的this，不能调用call和apply<br>没有prototype，new关键字内部需要把新对象的<strong>proto</strong>指向函数的prototype<h2 id=\"说说你对代理的理解🌟🌟🌟\"><a href=\"#说说你对代理的理解🌟🌟🌟\" class=\"headerlink\" title=\"说说你对代理的理解🌟🌟🌟\"></a>说说你对代理的理解🌟🌟🌟</h2><code>代理有几种定义方式:</code></li>\n<li>字面量定义,对象里面的get和set</li>\n<li>类定义，类里面的get和set</li>\n<li>Proxy对象，里面传两个对象，第一个对象是目标对象target，第二个对象是专门放get和set的handler对象。Proxy和上面两个的区别在于Proxy专门对对象的属性进行get和set<br><code>代理的实际应用有:</code></li>\n<li>Vue的双向绑定vue2用的是Object.definProperty,vue3用的是proxy</li>\n<li>校验值</li>\n<li>计算属性值(get的时候加以修饰)<h2 id=\"为什么要使用模块化🌟🌟🌟\"><a href=\"#为什么要使用模块化🌟🌟🌟\" class=\"headerlink\" title=\"为什么要使用模块化🌟🌟🌟\"></a>为什么要使用模块化🌟🌟🌟</h2></li>\n<li>防止命名冲突</li>\n<li>更好分离按需加载</li>\n<li>更好的复用性</li>\n<li>更高的维护性<h2 id=\"exports和module-exports有什么区别？🌟🌟🌟\"><a href=\"#exports和module-exports有什么区别？🌟🌟🌟\" class=\"headerlink\" title=\"exports和module.exports有什么区别？🌟🌟🌟\"></a>exports和module.exports有什么区别？🌟🌟🌟</h2></li>\n<li>导出方式不一样<br>exports.xxx = ‘xxx’<br>module.export = {}</li>\n<li>exports是module.exports的引用，两个指向的是用一个地址，而require能看到的只有module.exports<h2 id=\"js模块包格式有哪些？🌟🌟🌟\"><a href=\"#js模块包格式有哪些？🌟🌟🌟\" class=\"headerlink\" title=\"js模块包格式有哪些？🌟🌟🌟\"></a>js模块包格式有哪些？🌟🌟🌟</h2>帮助理解 <a href=\"https://www.cnblogs.com/qdwz/p/10718536.html\">https://www.cnblogs.com/qdwz/p/10718536.html</a></li>\n<li>common.js<br>同步运行，不适合前端</li>\n<li>AMD<br>异步运行<br>异步模块定义，主要采用异步的方式加载模块，模块的加载不影响后面代码的执行。所有依赖这个模块的语句都写在一个回调函数中，模块加载完毕，再执行回调函数</li>\n<li>CMD<br>异步运行<br>seajs 规范<h2 id=\"ES6和commonjs的区别🌟🌟\"><a href=\"#ES6和commonjs的区别🌟🌟\" class=\"headerlink\" title=\"ES6和commonjs的区别🌟🌟\"></a>ES6和commonjs的区别🌟🌟</h2></li>\n<li>commonjs模块输出的是值的拷贝，而ES6输出的值是值的引用</li>\n<li>commonjs是在运行时加载，是一个对象，ES6是在编译时加载，是一个代码块</li>\n<li>commonjs的this指向当前模块，ES6的this指向undefined<h2 id=\"跨域的方式都有哪些？他们的特点是什么-🌟🌟🌟🌟🌟\"><a href=\"#跨域的方式都有哪些？他们的特点是什么-🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"跨域的方式都有哪些？他们的特点是什么 🌟🌟🌟🌟🌟\"></a>跨域的方式都有哪些？他们的特点是什么 🌟🌟🌟🌟🌟</h2><a href=\"https://blog.csdn.net/ligang2585116/article/details/73072868?locationNum=13&amp;fps=1\">https://blog.csdn.net/ligang2585116/article/details/73072868?locationNum=13&amp;fps=1</a><h2 id=\"HTTP的结构🌟🌟🌟🌟\"><a href=\"#HTTP的结构🌟🌟🌟🌟\" class=\"headerlink\" title=\"HTTP的结构🌟🌟🌟🌟\"></a>HTTP的结构🌟🌟🌟🌟</h2></li>\n<li>请求行 请求头 空行 请求体<br>请求行包括 http版本号，url，请求方式<br>响应行包括版本号，状态码，原因<h2 id=\"说说你知道的状态码🌟🌟🌟🌟🌟\"><a href=\"#说说你知道的状态码🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"说说你知道的状态码🌟🌟🌟🌟🌟\"></a>说说你知道的状态码🌟🌟🌟🌟🌟</h2></li>\n<li>2开头的表示成功<br>一般见到的就是200</li>\n<li>3开头的表示重定向<br>301永久重定向<br>302临时重定向<br>304表示可以在缓存中取数据（协商缓存）</li>\n<li>4开头表示客户端错误<br>403跨域<br>404请求资源不存在</li>\n<li>5开头表示服务端错误<br>500<h2 id=\"网络OSI七层模型都有哪些？TCP是哪一层的🌟🌟🌟🌟\"><a href=\"#网络OSI七层模型都有哪些？TCP是哪一层的🌟🌟🌟🌟\" class=\"headerlink\" title=\"网络OSI七层模型都有哪些？TCP是哪一层的🌟🌟🌟🌟\"></a>网络OSI七层模型都有哪些？TCP是哪一层的🌟🌟🌟🌟</h2>应用层<br>表示层<br>会话层<br>传输层<br>网络层<br>数据链路层<br>物理层<blockquote>\n<p>TCP属于传输层</p>\n<h2 id=\"http1-0和http1-1，还有http2有什么区别？🌟🌟🌟🌟\"><a href=\"#http1-0和http1-1，还有http2有什么区别？🌟🌟🌟🌟\" class=\"headerlink\" title=\"http1.0和http1.1，还有http2有什么区别？🌟🌟🌟🌟\"></a>http1.0和http1.1，还有http2有什么区别？🌟🌟🌟🌟</h2></blockquote>\n</li>\n<li>http0.9只能进行get请求</li>\n<li>http1.0添加了POST，HEAD，OPTION，PUT，DELETE等</li>\n<li>http1.1增加了长连接keep-alive，增加了host域，而且节约带宽</li>\n<li>http2 <h2 id=\"https和http有什么区别，https的实现原理？🌟🌟🌟🌟🌟\"><a href=\"#https和http有什么区别，https的实现原理？🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"https和http有什么区别，https的实现原理？🌟🌟🌟🌟🌟\"></a>https和http有什么区别，https的实现原理？🌟🌟🌟🌟🌟</h2></li>\n<li>http无状态无连接，而且是明文传输，不安全</li>\n<li>https传输内容加密，身份验证，保证数据完整性</li>\n<li>https实现原理⭐⭐⭐⭐⭐<br>首先客户端向服务端发起一个随机值，以及一个加密算法<br>服务端收到后返回一个协商好的加密算法，以及另一个随机值<br>服务端在发送一个公钥CA<br>客户端收到以后先验证CA是否有效，如果无效则报错弹窗，有过有效则进行下一步操作<br>客户端使用之前的两个随机值和一个预主密钥组成一个会话密钥，在通过服务端传来的公钥加密把会话密钥发送给服务端<br>服务端收到后使用私钥解密，得到两个随机值和预主密钥，然后组装成会话密钥<br>客户端在向服务端发起一条信息，这条信息使用会话秘钥加密，用来验证服务端时候能收到加密的信息<br>服务端收到信息后返回一个会话秘钥加密的信息<br>都收到以后SSL层连接建立成功<h2 id=\"localStorage、SessionStorage、cookie、session-之间有什么区别🌟🌟🌟🌟🌟\"><a href=\"#localStorage、SessionStorage、cookie、session-之间有什么区别🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"localStorage、SessionStorage、cookie、session 之间有什么区别🌟🌟🌟🌟🌟\"></a>localStorage、SessionStorage、cookie、session 之间有什么区别🌟🌟🌟🌟🌟</h2></li>\n<li>localStorage<br>生命周期：关闭浏览器后数据依然保留，除非手动清除，否则一直在<br>作用域：相同浏览器的不同标签在同源情况下可以共享localStorage</li>\n<li>SessionStorage<br>生命周期：关闭浏览器或者标签后即失效<br>作用域：只在当前标签可用，当前标签的iframe中且同源可以共享</li>\n<li>cookie<br>是保存在客户端的，一般由后端设置值，可以设置过期时间<br>储存大小只有4K<br>一般用来保存用户的信息的<br>在http下cookie是明文传输的,较不安全<blockquote>\n<p>cookie属性有：<br>http-only:不能被客户端更改访问，防止XSS攻击（保证cookie安全性的操作）<br>Secure：只允许在https下传输<br>Max-age: cookie生成后失效的秒数<br>expire: cookie的最长有效时间，若不设置则cookie生命期与会话期相同</p>\n</blockquote>\n</li>\n<li>session<br>session是保存在服务端的<br>session的运行依赖sessionId，而sessionId又保存在cookie中，所以如果禁用的cookie，session也是不能用的，不过硬要用也可以，可以把sessionId保存在URL中<br>session一般用来跟踪用户的状态<br>session 的安全性更高，保存在服务端，不过一般为使服务端性能更加，会考虑部分信息保存在cookie中<h2 id=\"怎么使用cookie保存用户信息🌟🌟🌟\"><a href=\"#怎么使用cookie保存用户信息🌟🌟🌟\" class=\"headerlink\" title=\"怎么使用cookie保存用户信息🌟🌟🌟\"></a>怎么使用cookie保存用户信息🌟🌟🌟</h2>document.cookie(“名字 = 数据;expire=时间”)<br><a href=\"https://bbs.csdn.net/topics/250052356\">https://bbs.csdn.net/topics/250052356</a></li>\n</ul>\n","categories":["Js","Vue"],"tags":["Vue","Js"]},{"title":"数组的所有方法","url":"/blog/2021/12/21/%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%80%E6%9C%89%E6%96%B9%E6%B3%95/","content":"<h2 id=\"一、在JavaScript中创建数组的方法\">一、在JavaScript中创建数组的方法</h2>\n<h3 id=\"1-、Array构造函数创建数组\">(1)、Array构造函数创建数组</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Arr1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();<span class=\"comment\">//创建一个空数组</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> Arr2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">6</span>);<span class=\"comment\">//规定了数组长度为6，然后再根据索引向里面添加值</span></span><br><span class=\"line\">   \tArr2[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> Arr3 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>);<span class=\"comment\">//直接实例化创建一个包含三个字符串的数组</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-、Array字面量创建\">(2)、Array字面量创建</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Arr1 = [];<span class=\"comment\">//创建一个空数组</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> Arr2 = [<span class=\"number\">6</span>];<span class=\"comment\">//创建一个包含6项的数组</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> Arr3 = [<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>];<span class=\"comment\">//创建一个包含三个字符串的数组</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二、数组的方法介绍\">二、数组的方法介绍</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n<th>是否改变原数组</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1.push</td>\n<td>在数组的末尾增加一个或多个元素，并返回数组的新长度</td>\n<td>是</td>\n</tr>\n<tr>\n<td>2.pop</td>\n<td>删除数组的最后一个元素，并返回这个元素</td>\n<td>是</td>\n</tr>\n<tr>\n<td>3.unshift</td>\n<td>在数组的开头增加一个或多个元素，并返回数组的新长度</td>\n<td>是</td>\n</tr>\n<tr>\n<td>4.shift</td>\n<td>删除数组的第一个元素，并返回这个元素</td>\n<td>是</td>\n</tr>\n<tr>\n<td>5.sort</td>\n<td>对数组元素进行排序，并返回当前数组</td>\n<td>是</td>\n</tr>\n<tr>\n<td>6.reverse</td>\n<td>颠倒数组中元素的顺序</td>\n<td>是</td>\n</tr>\n<tr>\n<td>7.splice</td>\n<td>添加或删除数组中的元素</td>\n<td>是</td>\n</tr>\n<tr>\n<td>8.copyWithin</td>\n<td>从数组的指定位置拷贝元素到数组的另一个指定位置中</td>\n<td>是</td>\n</tr>\n<tr>\n<td>9.concat</td>\n<td>用于连接两个或多个数组</td>\n<td>否</td>\n</tr>\n<tr>\n<td>10.entries</td>\n<td>返回一个数组的迭代对象，该对象包含数组的键值对 (key/value)</td>\n<td>否</td>\n</tr>\n<tr>\n<td>11.every</td>\n<td>检测数组所有元素是否都符合指定条（通过函数提供）</td>\n<td>否</td>\n</tr>\n<tr>\n<td>12.fill</td>\n<td>将一个固定值替换数组的元素</td>\n<td>是</td>\n</tr>\n<tr>\n<td>13.filter</td>\n<td>创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素</td>\n<td>否</td>\n</tr>\n<tr>\n<td>14.find</td>\n<td>返回通过测试（函数内判断）的数组的第一个元素的值</td>\n<td>否</td>\n</tr>\n<tr>\n<td>15.findIndex</td>\n<td>返回传入一个测试条件（函数）符合条件的数组第一个元素位置</td>\n<td>否</td>\n</tr>\n<tr>\n<td>16.forEach</td>\n<td>用于调用数组的每个元素，并将元素传递给回调函数</td>\n<td>否</td>\n</tr>\n<tr>\n<td>17.from</td>\n<td>通过拥有 length 属性的对象或可迭代的对象来返回一个数组</td>\n<td>否</td>\n</tr>\n<tr>\n<td>18.includes</td>\n<td>判断一个数组是否包含一个指定的值，如果是返回 true，否则false</td>\n<td>否</td>\n</tr>\n<tr>\n<td>19.indexOf</td>\n<td>返回数组中某个指定的元素位置,没有的话返回-1</td>\n<td>否</td>\n</tr>\n<tr>\n<td>20.isArray</td>\n<td>判断一个对象是否为数组,是返回true否则返回false</td>\n<td>否</td>\n</tr>\n<tr>\n<td>21.join</td>\n<td>把数组中的所有元素转换一个字符串。元素是通过指定的分隔符进行分隔的</td>\n<td>否</td>\n</tr>\n<tr>\n<td>22.keys</td>\n<td>从数组创建一个包含数组键的可迭代对象。如果对象是数组返回 true，否则返回 false</td>\n<td>否</td>\n</tr>\n<tr>\n<td>23.lastIndexOf</td>\n<td>返回一个指定的元素在数组中最后出现的位置，从该字符串的后面向前查找</td>\n<td>否</td>\n</tr>\n<tr>\n<td>24.map</td>\n<td>返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值</td>\n<td>否</td>\n</tr>\n<tr>\n<td>25.reduce</td>\n<td>接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值</td>\n<td>否</td>\n</tr>\n<tr>\n<td>26.reduceRight</td>\n<td>功能和 reduce() 功能是一样的，不同的是 reduceRight() 从数组的末尾向前将数组中的数组项做累加</td>\n<td>否</td>\n</tr>\n<tr>\n<td>27.slice</td>\n<td>可从已有的数组中返回选定的元素</td>\n<td>否</td>\n</tr>\n<tr>\n<td>28.some</td>\n<td>用于检测数组中的元素是否满足指定条件（函数提供）</td>\n<td>否</td>\n</tr>\n<tr>\n<td>29.toString</td>\n<td>把数组转换为字符串，并返回结果</td>\n<td>否</td>\n</tr>\n<tr>\n<td>30.valueOf</td>\n<td>返回 Array 对象的原始值</td>\n<td>否</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"三、数组方法实例\">三、数组方法实例</h2>\n<h3 id=\"1-push-方法用于在数组的末尾增加一个或多个元素，并返回数组的新长度\">1.push()方法用于在数组的末尾增加一个或多个元素，并返回数组的新长度</h3>\n<p>语法：array.push(item1, item2, …, itemX)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>];</span><br><span class=\"line\">array.push(<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//[&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;4&#x27;] 改变了数组</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-pop-方法用于删除数组的最后一个元素并返回删除的元素\">2.pop()方法用于删除数组的最后一个元素并返回删除的元素</h3>\n<p>语法：array.pop()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>];</span><br><span class=\"line\">array.pop();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array); <span class=\"comment\">//[&#x27;1&#x27;] 改变了原数组</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-unshift-方法用于向数组的开头添加一个或更多元素，并返回新的长度\">3.unshift()方法用于向数组的开头添加一个或更多元素，并返回新的长度</h3>\n<p>语法：array.unshift(item1, item2, …, itemX)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>];</span><br><span class=\"line\">array.unshift(<span class=\"string\">&#x27;0&#x27;</span>,<span class=\"string\">&#x27;6&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array); <span class=\"comment\">//[&#x27;0&#x27;,&#x27;6&#x27;,&#x27;1&#x27;,&#x27;2&#x27;] 改变了原数组</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-shift-方法用于把数组的第一个元素从其中删除，并返回第一个元素的值\">4.shift()方法用于把数组的第一个元素从其中删除，并返回第一个元素的值</h3>\n<p>语法：array.shift()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>];</span><br><span class=\"line\">array.shift();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array); <span class=\"comment\">//[&#x27;2&#x27;] 改变了原数组</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-sort-方法用于对数组的元素进行排序\">5.sort()方法用于对数组的元素进行排序</h3>\n<p>语法：array.sort(sortfunction)<br>\n参数：sortfunction 可选。规定排序顺序。必须是函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.第一种情况不传参数默认为升序</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\">   array.sort();</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//[&#x27;1&#x27;,&#x27;2&#x27;,&#x27;4&#x27;] 改变了原数组</span></span><br><span class=\"line\">   <span class=\"comment\">//2.数字排序（数字和升序)</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\">   array.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> a - b</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//[&#x27;1&#x27;,&#x27;2&#x27;,&#x27;4&#x27;]</span></span><br><span class=\"line\">   <span class=\"comment\">//3.数字排序（数字和降序)</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\">   array.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> b - a</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//[&#x27;4&#x27;,&#x27;2&#x27;,&#x27;1&#x27;]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-reverse-方法用于颠倒数组中元素的顺序\">6.reverse() 方法用于颠倒数组中元素的顺序</h3>\n<p>语法：array.reverse()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\">   array.reverse()</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//[&#x27;4&#x27;,&#x27;1&#x27;,&#x27;2&#x27;] 改变了原数组</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"7-splice-方法用于添加或删除数组中的元素\">7.splice() 方法用于添加或删除数组中的元素</h3>\n<p>语法：array.splice(index,howmany,item1,…,itemX)<br>\n参数：<strong>index</strong>必需。规定从何处添加/删除元素。该参数是开始插入和（或）删除的数组元素的下标，必须是数字。(如果有第三个参数就是添加元素，如果没有就是删除元素）<br>\n<strong>howmany</strong>:可选。规定应该删除多少元素。必须是数字，但可以是 “0”。如果未规定此参数，则删除从 index 开始到原数组结尾的所有元素。<br>\n<strong>item1, …, itemX</strong>:可选。要添加到数组的新元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.只有一个参数的时候</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>,<span class=\"string\">&#x27;5&#x27;</span>];</span><br><span class=\"line\">   array.splice(<span class=\"number\">2</span>);<span class=\"comment\">//删除从左到右两项</span></span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(array);<span class=\"comment\">// [&#x27;2&#x27;,&#x27;1&#x27;] 改变了原数组 返回的是删除的元素</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">//2.只有两个参数的时候</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>,<span class=\"string\">&#x27;5&#x27;</span>];</span><br><span class=\"line\">   array.splice(<span class=\"number\">0</span>,<span class=\"number\">3</span>);<span class=\"comment\">//如果第一个参数是0则删除不会包括第二个参数的索引</span></span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(array);<span class=\"comment\">// [&#x27;5&#x27;] 改变了原数组</span></span><br><span class=\"line\">   array.splice(<span class=\"number\">1</span>,<span class=\"number\">2</span>);<span class=\"comment\">//如果第二个参数不是0则删除会包括第二个参数的索引[&#x27;2&#x27;,&#x27;5&#x27;] 显然它删掉了索引为2的元素‘4’</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3.当有&gt;=3个参数的时候</span></span><br><span class=\"line\"><span class=\"comment\">//当第二个参数为0的时候,第一个参数就是起始位置，从索引1开始添加第三个参数到array数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\">array.splice(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"string\">&#x27;xiaoming&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//[&#x27;1&#x27;, &#x27;xiaoming&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当第二个参数不为0的时候,从第一个参数索引1起始位置开始删除一个元素并把第三个参数加上</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\">array.splice(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"string\">&#x27;xiaoming&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//[&#x27;1&#x27;, &#x27;xiaoming&#x27;,  &#x27;3&#x27;, &#x27;4&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\">array.splice(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">&#x27;xiaoming&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//[&#x27;1&#x27;, &#x27;xiaoming&#x27;,&#x27;4&#x27;]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"8-copyWithin-方法用于从数组的指定位置拷贝元素到数组的另一个指定位置中\">8.copyWithin() 方法用于从数组的指定位置拷贝元素到数组的另一个指定位置中</h3>\n<p>语法：array.copyWithin(target, start, end)<br>\n参数：<strong>target</strong>\t必需。复制到指定目标索引位置。<br>\n<strong>start</strong>\t可选。元素复制的起始位置。<br>\n<strong>end</strong>\t可选。停止复制的索引位置 (默认为 array.length)。如果为负值，表示倒数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一个参数的时候</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\">array.copyWithin(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//[&#x27;1&#x27;,&#x27;2&#x27;,&#x27;1&#x27;,&#x27;2&#x27;];</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//二个参数的时候</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\">array.copyWithin(<span class=\"number\">2</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//[&#x27;1&#x27;,&#x27;2&#x27;,&#x27;2&#x27;,&#x27;3&#x27;];</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//三个参数的时候</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>,<span class=\"string\">&#x27;5&#x27;</span>];</span><br><span class=\"line\">array.copyWithin(<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>);<span class=\"comment\">//从索引2开始,复制的元素索引从1开始,复制到索引为3(包括3)停止</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//[&#x27;1&#x27;,&#x27;2&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;5&#x27;];</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"9-concat-方法用于连接两个或多个数组\">9.concat() 方法用于连接两个或多个数组</h3>\n<p>语法：array1.concat(array2,array3,…,arrayX)<br>\n注意⚠️：不会改变原数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> array2 = [<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> array3 = [<span class=\"string\">&#x27;5&#x27;</span>,<span class=\"string\">&#x27;6&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrayBox = array1.concat(array2,array3)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrayBox) <span class=\"comment\">//[&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;];</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"10-entries-方法返回一个数组的迭代对象，该对象包含数组的键值对-key-value\">10.entries() 方法返回一个数组的迭代对象，该对象包含数组的键值对 (key/value)</h3>\n<p>语法：array.entries()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;xiaoming&#x27;</span>,<span class=\"string\">&#x27;lisi&#x27;</span>,<span class=\"string\">&#x27;zhangsan&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> x = array.entries();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x.next().value); <span class=\"comment\">//[0, &#x27;xiaoming&#x27;];</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x.next().value); <span class=\"comment\">//[1, &#x27;lisi&#x27;];</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x.next().value); <span class=\"comment\">//[2, &#x27;zhangsan&#x27;];</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"11-every-方法用于检测数组所有元素是否都符合指定条件（通过函数提供）\">11.every() 方法用于检测数组所有元素是否都符合指定条件（通过函数提供）</h3>\n<p>语法：array.every(function(currentValue,index,arr), thisValue)<br>\n参数：function(currentValue,index,arr){}<br>\n<strong>currentValue</strong>:必须。当前元素的值<br>\n<strong>index</strong>:可选。当前元素的索引值<br>\n<strong>arr</strong>可选。当前元素属于的数组对象</p>\n<p>every() 方法使用指定函数检测数组中的所有元素：<br>\n如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测。<br>\n如果所有元素都满足条件，则返回 true。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>,<span class=\"string\">&#x27;5&#x27;</span>,<span class=\"string\">&#x27;6&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentValue,index,arr</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> currentValue &gt; <span class=\"number\">5</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ArrBox);<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"12-fill-方法用于将一个固定值替换数组的元素\">12.fill() 方法用于将一个固定值替换数组的元素</h3>\n<p>语法：array.fill(value, start, end)<br>\n参数：<strong>value</strong>\t必需。填充的值。<br>\n<strong>start</strong>\t可选。开始填充位置。<br>\n<strong>end</strong>\t可选。停止填充位置 (默认为 array.length)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//只有一个参数的时候</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\">array.fill(<span class=\"string\">&#x27;6&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//[&#x27;6&#x27;, &#x27;6&#x27;, &#x27;6&#x27;, &#x27;6&#x27;] 所有的都会被替换掉</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//不止一个参数的时候</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\">array.fill(<span class=\"string\">&#x27;6&#x27;</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//[&#x27;1&#x27;, &#x27;6&#x27;, &#x27;6&#x27;, &#x27;4&#x27;] 索引1到索引3 不包括索引3都会被替换掉</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"13-filter-方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素\">13.filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素</h3>\n<p>语法：array.filter(function(currentValue,index,arr), thisValue) 同11</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentValue</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> currentValue &gt; <span class=\"number\">2</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ArrBox);<span class=\"comment\">// [&#x27;3&#x27;, &#x27;4&#x27;]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"14-find-方法返回通过测试（函数内判断）的数组的第一个元素的\">14.find() 方法返回通过测试（函数内判断）的数组的第一个元素的</h3>\n<p>语法：array.find(function(currentValue, index, arr),thisValue) 同11</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;6&#x27;</span>,<span class=\"string\">&#x27;9&#x27;</span>,<span class=\"string\">&#x27;18&#x27;</span>,<span class=\"string\">&#x27;20&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentValue</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> currentValue &gt;= <span class=\"number\">18</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ArrBox);<span class=\"comment\">//18 第三个元素满足条件,返回第三个元素就不接着往下面走啦</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"15-findIndex-方法返回传入一个测试条件（函数）符合条件的数组第一个元素位置\">15.findIndex() 方法返回传入一个测试条件（函数）符合条件的数组第一个元素位置</h3>\n<p>语法：array.findIndex(function(currentValue, index, arr), thisValue) 同11</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.findIndex(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentValue</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> currentValue &gt; <span class=\"number\">2</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ArrBox);<span class=\"comment\">//2 这个2就是索引2 它满足条件，如果array中都没有大于2的这时就会返回-1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"16-forEach-方法用于调用数组的每个元素，并将元素传递给回调函数\">16.forEach() 方法用于调用数组的每个元素，并将元素传递给回调函数</h3>\n<p>语法：array.forEach(function(currentValue, index, arr), thisValue) 同11</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\">array.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentValue, index, arr</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(currentValue, index, arr);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//1 0 (4) [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;]</span></span><br><span class=\"line\">\t<span class=\"comment\">//2 1 (4) [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;]</span></span><br><span class=\"line\">   <span class=\"comment\">//3 2 (4) [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;]</span></span><br><span class=\"line\">   <span class=\"comment\">//4 3 (4) [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"17-from-方法用于通过拥有-length-属性的对象或可迭代的对象来返回一个数组\">17.from() 方法用于通过拥有 length 属性的对象或可迭代的对象来返回一个数组</h3>\n<p>语法：Array.from(object, mapFunction, thisValue)<br>\n参数：<strong>object</strong>：必需，要转换为数组的对象。<br>\n<strong>mapFunction</strong>：可选，数组中每个元素要调用的函数。<br>\n<strong>thisValue</strong>\t可选，映射函数(mapFunction)中的 this 对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//只有一个参数的情况</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = <span class=\"built_in\">Array</span>.from(<span class=\"string\">&#x27;xiaoming&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//(8) [&#x27;x&#x27;, &#x27;i&#x27;, &#x27;a&#x27;, &#x27;o&#x27;, &#x27;m&#x27;, &#x27;i&#x27;, &#x27;n&#x27;, &#x27;g&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//不止一个参数的情况</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = <span class=\"built_in\">Array</span>.from([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x * <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//[10, 20, 30]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//从类数组对象（arguments）生成数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>)); <span class=\"comment\">// [ 1, 2, 3 ]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"18-includes-方法用来判断一个数组是否包含一个指定的值，如果是返回-true，否则false\">18.includes() 方法用来判断一个数组是否包含一个指定的值，如果是返回 true，否则false</h3>\n<p>语法：arr.includes(searchElement, fromIndex)<br>\n参数：<strong>searchElement</strong>\t必须。需要查找的元素值。<br>\n<strong>fromIndex</strong>\t可选。从该索引处开始查找 searchElement。如果为负值，则按升序从 array.length + fromIndex 的索引开始搜索。默认为 0。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//传一个参数的时候</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.includes(<span class=\"string\">&#x27;2&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//传两个参数的时候</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.includes(<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//false 虽然这时array数组里面有2但是它是从索引为2开始查找的,所以返回false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"19-indexOf-方法可返回数组中某个指定的元素位置，如果在数组中没找到指定元素则返回-1\">19.indexOf() 方法可返回数组中某个指定的元素位置，如果在数组中没找到指定元素则返回 -1</h3>\n<p>语法：array.indexOf(item,start)<br>\n参数：<strong>item</strong>\t必须。查找的元素。<br>\n<strong>start</strong>\t可选的整数参数。规定在数组中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一个参数的时候</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.indexOf(<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ArrBox);<span class=\"comment\">//0 返回的就是‘1’的索引位置</span></span><br><span class=\"line\"><span class=\"comment\">//二个参数的时候</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.indexOf(<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ArrBox);<span class=\"comment\">//false 这是第二个参数的是为1,从索引1开始查找找不到‘1’，所以返回-1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"20-isArray-方法用于判断一个对象是否为数组，如果对象是数组返回-true，否则返回-false\">20.isArray() 方法用于判断一个对象是否为数组，如果对象是数组返回 true，否则返回 false</h3>\n<p>语法：Array.isArray(obj)<br>\n参数：<strong>obj</strong>：\b必须。要判断的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> array2 = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;xiaoming&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.isArray(array1));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.isArray(array2));<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"21-join-方法用于把数组中的所有元素转换一个字符串，元素是通过指定的分隔符进行分隔的-返回值是一个字符串\">21.join() 方法用于把数组中的所有元素转换一个字符串，元素是通过指定的分隔符进行分隔的,返回值是一个字符串</h3>\n<p>语法：array.join(separator)<br>\n参数：separator\t可选。指定要使用的分隔符。如果省略该参数，则使用逗号作为分隔符。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.join(<span class=\"string\">&#x27;--&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ArrBox);<span class=\"comment\">//1--2--3--4</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"22-keys-方法用于从数组创建一个包含数组键的可迭代对象，如果对象是数组返回-true，否则返回-false\">22.keys() 方法用于从数组创建一个包含数组键的可迭代对象，如果对象是数组返回 true，否则返回 false</h3>\n<p>语法：array.keys()<br>\n<strong>iterable</strong>：一个具有可枚举属性并且可以迭代的对象。<br>\n<strong>for…of</strong> 语句创建一个循环来迭代可迭代的对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.keys();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ArrBox);<span class=\"comment\">//Array Iterator &#123;&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(key <span class=\"keyword\">of</span> ArrBox)&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(key);<span class=\"comment\">//0 1 2 3</span></span><br><span class=\"line\"> \t&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"23-lastIndexOf-方法可返回一个指定的元素在数组中最后出现的位置，从该字符串的后面向前查找。如果要检索的元素没有出现，则该方法返回-1\">23.lastIndexOf() 方法可返回一个指定的元素在数组中最后出现的位置，从该字符串的后面向前查找。如果要检索的元素没有出现，则该方法返回 -1</h3>\n<p>语法：array.lastIndexOf(item,start)<br>\n参数：<strong>item</strong>\t必需。规定需检索的字符串值。<br>\n<strong>start</strong>\t可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的最后一个字符处开始检索。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当只有一个参数的时候</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.lastIndexOf(<span class=\"string\">&#x27;2&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ArrBox);<span class=\"comment\">//3 从后往前开始检索</span></span><br><span class=\"line\"><span class=\"comment\">//当有两个参数的时候</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.lastIndexOf(<span class=\"string\">&#x27;2&#x27;</span>,array.length - <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ArrBox);<span class=\"comment\">//1 从后往前开始检索,开始检索的位置是从倒数第二个开始</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"24-map-方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。map-方法按照原始数组元素顺序依次处理元素\">24.map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。map() 方法按照原始数组元素顺序依次处理元素</h3>\n<p>语法：array.map(function(currentValue,index,arr), thisValue) 同11</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentValue</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> currentValue * <span class=\"number\">10</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ArrBox);<span class=\"comment\">//[10, 20, 30, 40]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"25-reduce-方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值\">25.reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值</h3>\n<p>语法：array.reduce(function(total, currentValue, currentIndex, arr), initialValue)<br>\n参数：function(total,currentValue, index,arr)\t必需。用于执行每个数组元素的函数。<br>\n参数\t描述<br>\n<strong>total</strong>\t必需。初始值, 或者计算结束后的返回值。<br>\n<strong>currentValue</strong>\t必需。当前元素<br>\n<strong>currentIndex</strong>\t可选。当前元素的索引<br>\n<strong>arr</strong>\t可选。当前元素所属的数组对象。<br>\n<strong>initialValue</strong>\t可选。传递给函数的初始值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">total,currentValue</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(total,currentValue);</span><br><span class=\"line\">\t<span class=\"comment\">// 0 1 </span></span><br><span class=\"line\">\t<span class=\"comment\">// 1 2</span></span><br><span class=\"line\">\t<span class=\"comment\">// 3 3</span></span><br><span class=\"line\">\t<span class=\"comment\">// 6 4</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> total + currentValue</span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ArrBox);<span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"26-reduceRight-方法的功能和-reduce-功能是一样的，不同的是-reduceRight-从数组的末尾向前将数组中的数组项做累加\">26.reduceRight() 方法的功能和 reduce() 功能是一样的，不同的是 reduceRight() 从数组的末尾向前将数组中的数组项做累加</h3>\n<p>语法：同上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.reduceRight(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">total,currentValue</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(total,currentValue);</span><br><span class=\"line\">\t<span class=\"comment\">// 4 3</span></span><br><span class=\"line\">\t<span class=\"comment\">// 1 2</span></span><br><span class=\"line\">\t<span class=\"comment\">// -1 1</span></span><br><span class=\"line\">\t<span class=\"comment\">// -2</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> total - currentValue</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ArrBox);<span class=\"comment\">//-2</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"27-slice-方法可从已有的数组中返回选定的元素\">27.slice() 方法可从已有的数组中返回选定的元素</h3>\n<p>语法：array.slice(start, end)<br>\n参数：<br>\n<strong>start</strong>\t可选。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。如果该参数为负数，则表示从原数组中的倒数第几个元素开始提取，slice(-2) 表示提取原数组中的倒数第二个元素到最后一个元素（包含最后一个元素）。<br>\n<strong>end</strong>\t可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果该参数为负数， 则它表示在原数组中的倒数第几个元素结束抽取。 slice(-2,-1) 表示抽取了原数组中的倒数第二个元素到最后一个元素（不包含最后一个元素，也就是只有倒数第二个元素）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.slice(<span class=\"number\">1</span>));<span class=\"comment\">//[2, 3, 4] 从索引1截取到最后</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.slice(-<span class=\"number\">2</span>));<span class=\"comment\">//[3, 4] 从原数组中的倒数第几个元素开始提取</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>));<span class=\"comment\">//[2] 选取索引1到索引2的元素（不包含索引2）</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.slice(-<span class=\"number\">2</span>,-<span class=\"number\">1</span>));<span class=\"comment\">//[2] 选取倒数第二个到倒数第一个（不包含倒数第一个）</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"28-some-方法用于检测数组中的元素是否满足指定条件（函数提供）\">28.some() 方法用于检测数组中的元素是否满足指定条件（函数提供）</h3>\n<p>如果有一个元素满足就会返回ture，剩下的不会在进行检测。没有满足的返回false<br>\n语法：array.some(function(currentValue,index,arr),thisValue)   同11</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentValue</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> currentValue &gt; <span class=\"number\">2</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ArrBox);<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"29-toString-方法可把数组转换为字符串，并返回结果-数组的所有值用逗号隔开\">29.toString() 方法可把数组转换为字符串，并返回结果,数组的所有值用逗号隔开</h3>\n<p>语法：array.toString()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.toString();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ArrBox);<span class=\"comment\">//1,2,3,4</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"30-valueOf-方法返回-Array-对象的原始值\">30.valueOf() 方法返回 Array 对象的原始值</h3>\n<p>语法：array.valueOf()<br>\nArray：返回数组对象本身。<br>\nBoolean： 返回布尔值<br>\nDate：存储的时间是从 1970 年 1 月 1 日午夜开始计的毫秒数 UTC。<br>\nFunction： 返回函数本身。<br>\nNumber： 返回数字值。<br>\nObject：返回对象本身。这是默认情况。<br>\nString：返回字符串值。<br>\nMath 和 Error 对象没有 valueOf 方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//返回数组本身</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;xiaoming&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.valueOf() == array);<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回布尔值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> boolean = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(boolean.valueOf() == boolean);<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">// new一个Boolean对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newBool = <span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span>(<span class=\"literal\">true</span>); <span class=\"comment\">// Boolean &#123;true&#125;</span></span><br><span class=\"line\">newBool.valueOf() <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// valueOf()返回的是true，两者的值相等</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newBool.valueOf() == newBool);   <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// 但是不全等，两者类型不相等，前者是boolean类型，后者是object类型</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newBool.valueOf() === newBool);   <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回时间戳</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2021</span>, <span class=\"number\">11</span>, <span class=\"number\">2</span>, <span class=\"number\">13</span>, <span class=\"number\">04</span>, <span class=\"number\">59</span>, <span class=\"number\">230</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(date.valueOf());<span class=\"comment\">//1638421499230 返回时间戳</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回函数本身</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"function\"><span class=\"keyword\">function</span> = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">function</span>.valueOf() == <span class=\"function\"><span class=\"keyword\">function</span>)</span>;<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回数字值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> number = <span class=\"number\">5</span>;</span><br><span class=\"line\"> \t<span class=\"built_in\">console</span>.log(number.valueOf() == number );<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回对象本身</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(object.valueOf() == object);<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回字符串本身</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"string\">&#x27;xiaoming&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(string.valueOf() == string);<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"三、数组去重的方法\">三、数组去重的方法</h2>\n<h3 id=\"1-利用ES6中的-Set-方法去重\">1.利用ES6中的 Set 方法去重</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> set1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set1);<span class=\"comment\">//Set(3) &#123;1, 2, 3&#125; 此时时类数组，不是真正的数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newArr1 = <span class=\"built_in\">Array</span>.from(set1); <span class=\"comment\">//第一种方法可以使用Array.from()将类数组转换成真正的数组</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr1);<span class=\"comment\">//[1, 2, 3, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newArr2 = [...set1];<span class=\"comment\">//第二种方法直接结构赋值，也可以得到一个真正的数组</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr2);<span class=\"comment\">//[1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-双层for循环去重\">2.双层for循环去重</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>];</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = i+<span class=\"number\">1</span>;j&lt;arr.length;j++)&#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(arr[i],arr[j]);</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(arr[i] == arr[j]) &#123;</span><br><span class=\"line\">         <span class=\"comment\">//如果数据相同则通过splice删除一条相同的数据</span></span><br><span class=\"line\">         arr.splice(i,<span class=\"number\">1</span>);</span><br><span class=\"line\">          <span class=\"comment\">//i是第一层遍历的下标，因为上一步删除了一条数据，所以下标也需要减一，否则实际下标，要比数组中的数据更多</span></span><br><span class=\"line\">         i--;</span><br><span class=\"line\">         <span class=\"comment\">//j 也同样需要和i一样减一，保持遍历依旧同步判断</span></span><br><span class=\"line\">         j--;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(arr);<span class=\"comment\">// [3, 4, 1, 2]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-利用数组的indexOf方法去重\">3.利用数组的indexOf方法去重</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\">   <span class=\"keyword\">let</span> newArr = []</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++) &#123; <span class=\"comment\">//循环arr数组</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span>(newArr.indexOf(arr[i]) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">       newArr.push(arr[i]);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(newArr);<span class=\"comment\">//[4, 5, 6, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-利用数组的includes方法去重\">4.利用数组的includes方法去重</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> newArr = []</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!newArr.includes(arr[i]))&#123; </span><br><span class=\"line\">    newArr.push(arr[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr);<span class=\"comment\">//[4, 5, 6, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-利用数组的filter方法去重\">5.利用数组的filter方法去重</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\">   <span class=\"keyword\">let</span> newArr = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(arr.indexOf(item,<span class=\"number\">0</span>),index);</span><br><span class=\"line\">   <span class=\"comment\">//arr.indexOf(item,0)循环返回元素所在的位置,有两个相同的元素只会返回第一个元素的索引</span></span><br><span class=\"line\">   <span class=\"comment\">//0 0</span></span><br><span class=\"line\">  <span class=\"comment\">//1 1</span></span><br><span class=\"line\">  <span class=\"comment\">//2 2</span></span><br><span class=\"line\">  <span class=\"comment\">//3 3 </span></span><br><span class=\"line\">  <span class=\"comment\">//4 4</span></span><br><span class=\"line\">  <span class=\"comment\">//3 5</span></span><br><span class=\"line\">  <span class=\"comment\">//0 6</span></span><br><span class=\"line\">  <span class=\"comment\">//1 7</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> arr.indexOf(item,<span class=\"number\">0</span>) === index</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(newArr);/[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n","categories":["Js"],"tags":["Js"]},{"title":"链接","url":"/blog/2022/01/17/%E9%93%BE%E6%8E%A5/","content":"<h2 id=\"主题链接\">主题链接</h2>\n<p><a href=\"https://gitee.com/V_Vincen/hexo-theme-livemylife\">https://gitee.com/V_Vincen/hexo-theme-livemylife</a></p>\n<h2 id=\"vue运行机制全局概览\">vue运行机制全局概览</h2>\n<p><a href=\"https://www.kancloud.cn/sllyli/vuejs/1244017\">https://www.kancloud.cn/sllyli/vuejs/1244017</a></p>\n<h2 id=\"视频转GIF\">视频转GIF</h2>\n<p><a href=\"https://www.xunjieshipin.com/video-setgif\">https://www.xunjieshipin.com/video-setgif</a></p>\n<h2 id=\"色谱\">色谱</h2>\n<p><a href=\"http://zhongguose.com/#lusuihui\">http://zhongguose.com/#lusuihui</a></p>\n<h2 id=\"html5模版\">html5模版</h2>\n<p><a href=\"http://www.html5code.net/moban/qiye/\">http://www.html5code.net/moban/qiye/</a></p>\n"}]