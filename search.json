[{"title":"watch和computed的区别","url":"/blog/2022/02/11/watch%E5%92%8Ccomputed%E7%9A%84%E5%8C%BA%E5%88%AB/","content":"<ul>\n<li>computed和watch的区别<br>\n1.computed能完成的功能,watch都可以完成。<br>\n2.watch能完成的功能,computed不一定能完成,例如:watch可以进行异步操作(setTimeout).<br>\n两个重要的小原则<br>\n1.所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm或组件实例对象。<br>\n2.所有不被vue所管理的函数(定时器的回调函数、ajax的回调函数等、promise的回调函数)最好写成箭头函数，这样this的指向才是vm或组件实例对象。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//watch异步小案例</span></span><br><span class=\"line\">&lt;div id=<span class=\"string\">&quot;root&quot;</span>&gt;</span><br><span class=\"line\">    姓&lt;input type=<span class=\"string\">&quot;text&quot;</span> v-model=<span class=\"string\">&quot;firstName&quot;</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\">    名&lt;input type=<span class=\"string\">&quot;text&quot;</span> v-model=<span class=\"string\">&quot;lastName&quot;</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span><br><span class=\"line\">    全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">    Vue.config.productionTip = <span class=\"literal\">false</span> <span class=\"comment\">//设置为 false 以阻止 vue 在启动时生成生产提示。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建vue实例</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// el:&#x27;#root&#x27;,//el用于指定当前vue实例为哪个1容器服务</span></span><br><span class=\"line\">      data: &#123;<span class=\"comment\">//data用于存储数据，用于el指定的容器使用</span></span><br><span class=\"line\">        firstName: <span class=\"string\">&#x27;liu&#x27;</span>,</span><br><span class=\"line\">        lastName: <span class=\"string\">&#x27;muye&#x27;</span>,</span><br><span class=\"line\">        fullName:<span class=\"string\">&#x27;liu-muye&#x27;</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      methods: &#123;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      computed: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    vm.$mount(<span class=\"string\">&#x27;#root&#x27;</span>); <span class=\"comment\">//代替el，第二种写法</span></span><br><span class=\"line\">    <span class=\"comment\">// watch可以使用setTimeout延迟使用，computed不能开启异步任务🌟</span></span><br><span class=\"line\">    <span class=\"comment\">// watch里面setTimeout写的箭头函数,</span></span><br><span class=\"line\">    vm.$watch(<span class=\"string\">&#x27;firstName&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newValue,oldValue</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;123&#x27;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.fullName = newValue + <span class=\"string\">&#x27;-&#x27;</span> + <span class=\"built_in\">this</span>.firstName</span><br><span class=\"line\">      &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    vm.$watch(<span class=\"string\">&#x27;lastName&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newValue,oldValue</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;123&#x27;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.fullName = <span class=\"built_in\">this</span>.firstName + <span class=\"string\">&#x27;-&#x27;</span> + newValue</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>","categories":["Vue"],"tags":["Vue"]},{"title":"链接","url":"/blog/2022/01/17/%E9%93%BE%E6%8E%A5/","content":"<h2 id=\"主题链接\">主题链接</h2>\n<p><a href=\"https://gitee.com/V_Vincen/hexo-theme-livemylife\">https://gitee.com/V_Vincen/hexo-theme-livemylife</a></p>\n<h2 id=\"vue运行机制全局概览\">vue运行机制全局概览</h2>\n<p><a href=\"https://www.kancloud.cn/sllyli/vuejs/1244017\">https://www.kancloud.cn/sllyli/vuejs/1244017</a></p>\n<h2 id=\"视频转GIF\">视频转GIF</h2>\n<p><a href=\"https://www.xunjieshipin.com/video-setgif\">https://www.xunjieshipin.com/video-setgif</a></p>\n<h2 id=\"色谱\">色谱</h2>\n<p><a href=\"http://zhongguose.com/#lusuihui\">http://zhongguose.com/#lusuihui</a></p>\n<h2 id=\"html5模版\">html5模版</h2>\n<p><a href=\"http://www.html5code.net/moban/qiye/\">http://www.html5code.net/moban/qiye/</a></p>\n"},{"title":"数组的所有方法","url":"/blog/2021/12/21/%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%80%E6%9C%89%E6%96%B9%E6%B3%95/","content":"<h2 id=\"一、在JavaScript中创建数组的方法\">一、在JavaScript中创建数组的方法</h2>\n<h3 id=\"1-、Array构造函数创建数组\">(1)、Array构造函数创建数组</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Arr1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();<span class=\"comment\">//创建一个空数组</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> Arr2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">6</span>);<span class=\"comment\">//规定了数组长度为6，然后再根据索引向里面添加值</span></span><br><span class=\"line\">   \tArr2[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> Arr3 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>);<span class=\"comment\">//直接实例化创建一个包含三个字符串的数组</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-、Array字面量创建\">(2)、Array字面量创建</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Arr1 = [];<span class=\"comment\">//创建一个空数组</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> Arr2 = [<span class=\"number\">6</span>];<span class=\"comment\">//创建一个包含6项的数组</span></span><br><span class=\"line\"> <span class=\"keyword\">var</span> Arr3 = [<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>];<span class=\"comment\">//创建一个包含三个字符串的数组</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二、数组的方法介绍\">二、数组的方法介绍</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n<th>是否改变原数组</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1.push</td>\n<td>在数组的末尾增加一个或多个元素，并返回数组的新长度</td>\n<td>是</td>\n</tr>\n<tr>\n<td>2.pop</td>\n<td>删除数组的最后一个元素，并返回这个元素</td>\n<td>是</td>\n</tr>\n<tr>\n<td>3.unshift</td>\n<td>在数组的开头增加一个或多个元素，并返回数组的新长度</td>\n<td>是</td>\n</tr>\n<tr>\n<td>4.shift</td>\n<td>删除数组的第一个元素，并返回这个元素</td>\n<td>是</td>\n</tr>\n<tr>\n<td>5.sort</td>\n<td>对数组元素进行排序，并返回当前数组</td>\n<td>是</td>\n</tr>\n<tr>\n<td>6.reverse</td>\n<td>颠倒数组中元素的顺序</td>\n<td>是</td>\n</tr>\n<tr>\n<td>7.splice</td>\n<td>添加或删除数组中的元素</td>\n<td>是</td>\n</tr>\n<tr>\n<td>8.copyWithin</td>\n<td>从数组的指定位置拷贝元素到数组的另一个指定位置中</td>\n<td>是</td>\n</tr>\n<tr>\n<td>9.concat</td>\n<td>用于连接两个或多个数组</td>\n<td>否</td>\n</tr>\n<tr>\n<td>10.entries</td>\n<td>返回一个数组的迭代对象，该对象包含数组的键值对 (key/value)</td>\n<td>否</td>\n</tr>\n<tr>\n<td>11.every</td>\n<td>检测数组所有元素是否都符合指定条（通过函数提供）</td>\n<td>否</td>\n</tr>\n<tr>\n<td>12.fill</td>\n<td>将一个固定值替换数组的元素</td>\n<td>是</td>\n</tr>\n<tr>\n<td>13.filter</td>\n<td>创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素</td>\n<td>否</td>\n</tr>\n<tr>\n<td>14.find</td>\n<td>返回通过测试（函数内判断）的数组的第一个元素的值</td>\n<td>否</td>\n</tr>\n<tr>\n<td>15.findIndex</td>\n<td>返回传入一个测试条件（函数）符合条件的数组第一个元素位置</td>\n<td>否</td>\n</tr>\n<tr>\n<td>16.forEach</td>\n<td>用于调用数组的每个元素，并将元素传递给回调函数</td>\n<td>否</td>\n</tr>\n<tr>\n<td>17.from</td>\n<td>通过拥有 length 属性的对象或可迭代的对象来返回一个数组</td>\n<td>否</td>\n</tr>\n<tr>\n<td>18.includes</td>\n<td>判断一个数组是否包含一个指定的值，如果是返回 true，否则false</td>\n<td>否</td>\n</tr>\n<tr>\n<td>19.indexOf</td>\n<td>返回数组中某个指定的元素位置,没有的话返回-1</td>\n<td>否</td>\n</tr>\n<tr>\n<td>20.isArray</td>\n<td>判断一个对象是否为数组,是返回true否则返回false</td>\n<td>否</td>\n</tr>\n<tr>\n<td>21.join</td>\n<td>把数组中的所有元素转换一个字符串。元素是通过指定的分隔符进行分隔的</td>\n<td>否</td>\n</tr>\n<tr>\n<td>22.keys</td>\n<td>从数组创建一个包含数组键的可迭代对象。如果对象是数组返回 true，否则返回 false</td>\n<td>否</td>\n</tr>\n<tr>\n<td>23.lastIndexOf</td>\n<td>返回一个指定的元素在数组中最后出现的位置，从该字符串的后面向前查找</td>\n<td>否</td>\n</tr>\n<tr>\n<td>24.map</td>\n<td>返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值</td>\n<td>否</td>\n</tr>\n<tr>\n<td>25.reduce</td>\n<td>接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值</td>\n<td>否</td>\n</tr>\n<tr>\n<td>26.reduceRight</td>\n<td>功能和 reduce() 功能是一样的，不同的是 reduceRight() 从数组的末尾向前将数组中的数组项做累加</td>\n<td>否</td>\n</tr>\n<tr>\n<td>27.slice</td>\n<td>可从已有的数组中返回选定的元素</td>\n<td>否</td>\n</tr>\n<tr>\n<td>28.some</td>\n<td>用于检测数组中的元素是否满足指定条件（函数提供）</td>\n<td>否</td>\n</tr>\n<tr>\n<td>29.toString</td>\n<td>把数组转换为字符串，并返回结果</td>\n<td>否</td>\n</tr>\n<tr>\n<td>30.valueOf</td>\n<td>返回 Array 对象的原始值</td>\n<td>否</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"三、数组方法实例\">三、数组方法实例</h2>\n<h3 id=\"1-push-方法用于在数组的末尾增加一个或多个元素，并返回数组的新长度\">1.push()方法用于在数组的末尾增加一个或多个元素，并返回数组的新长度</h3>\n<p>语法：array.push(item1, item2, …, itemX)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>];</span><br><span class=\"line\">array.push(<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//[&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;4&#x27;] 改变了数组</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-pop-方法用于删除数组的最后一个元素并返回删除的元素\">2.pop()方法用于删除数组的最后一个元素并返回删除的元素</h3>\n<p>语法：array.pop()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>];</span><br><span class=\"line\">array.pop();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array); <span class=\"comment\">//[&#x27;1&#x27;] 改变了原数组</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-unshift-方法用于向数组的开头添加一个或更多元素，并返回新的长度\">3.unshift()方法用于向数组的开头添加一个或更多元素，并返回新的长度</h3>\n<p>语法：array.unshift(item1, item2, …, itemX)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>];</span><br><span class=\"line\">array.unshift(<span class=\"string\">&#x27;0&#x27;</span>,<span class=\"string\">&#x27;6&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array); <span class=\"comment\">//[&#x27;0&#x27;,&#x27;6&#x27;,&#x27;1&#x27;,&#x27;2&#x27;] 改变了原数组</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-shift-方法用于把数组的第一个元素从其中删除，并返回第一个元素的值\">4.shift()方法用于把数组的第一个元素从其中删除，并返回第一个元素的值</h3>\n<p>语法：array.shift()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>];</span><br><span class=\"line\">array.shift();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array); <span class=\"comment\">//[&#x27;2&#x27;] 改变了原数组</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-sort-方法用于对数组的元素进行排序\">5.sort()方法用于对数组的元素进行排序</h3>\n<p>语法：array.sort(sortfunction)<br>\n参数：sortfunction 可选。规定排序顺序。必须是函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.第一种情况不传参数默认为升序</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\">   array.sort();</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//[&#x27;1&#x27;,&#x27;2&#x27;,&#x27;4&#x27;] 改变了原数组</span></span><br><span class=\"line\">   <span class=\"comment\">//2.数字排序（数字和升序)</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\">   array.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> a - b</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//[&#x27;1&#x27;,&#x27;2&#x27;,&#x27;4&#x27;]</span></span><br><span class=\"line\">   <span class=\"comment\">//3.数字排序（数字和降序)</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\">   array.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> b - a</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//[&#x27;4&#x27;,&#x27;2&#x27;,&#x27;1&#x27;]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-reverse-方法用于颠倒数组中元素的顺序\">6.reverse() 方法用于颠倒数组中元素的顺序</h3>\n<p>语法：array.reverse()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\">   array.reverse()</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//[&#x27;4&#x27;,&#x27;1&#x27;,&#x27;2&#x27;] 改变了原数组</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"7-splice-方法用于添加或删除数组中的元素\">7.splice() 方法用于添加或删除数组中的元素</h3>\n<p>语法：array.splice(index,howmany,item1,…,itemX)<br>\n参数：<strong>index</strong>必需。规定从何处添加/删除元素。该参数是开始插入和（或）删除的数组元素的下标，必须是数字。(如果有第三个参数就是添加元素，如果没有就是删除元素）<br>\n<strong>howmany</strong>:可选。规定应该删除多少元素。必须是数字，但可以是 “0”。如果未规定此参数，则删除从 index 开始到原数组结尾的所有元素。<br>\n<strong>item1, …, itemX</strong>:可选。要添加到数组的新元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.只有一个参数的时候</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>,<span class=\"string\">&#x27;5&#x27;</span>];</span><br><span class=\"line\">   array.splice(<span class=\"number\">2</span>);<span class=\"comment\">//删除从左到右两项</span></span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(array);<span class=\"comment\">// [&#x27;2&#x27;,&#x27;1&#x27;] 改变了原数组 返回的是删除的元素</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">//2.只有两个参数的时候</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>,<span class=\"string\">&#x27;5&#x27;</span>];</span><br><span class=\"line\">   array.splice(<span class=\"number\">0</span>,<span class=\"number\">3</span>);<span class=\"comment\">//如果第一个参数是0则删除不会包括第二个参数的索引</span></span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(array);<span class=\"comment\">// [&#x27;5&#x27;] 改变了原数组</span></span><br><span class=\"line\">   array.splice(<span class=\"number\">1</span>,<span class=\"number\">2</span>);<span class=\"comment\">//如果第二个参数不是0则删除会包括第二个参数的索引[&#x27;2&#x27;,&#x27;5&#x27;] 显然它删掉了索引为2的元素‘4’</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3.当有&gt;=3个参数的时候</span></span><br><span class=\"line\"><span class=\"comment\">//当第二个参数为0的时候,第一个参数就是起始位置，从索引1开始添加第三个参数到array数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\">array.splice(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"string\">&#x27;xiaoming&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//[&#x27;1&#x27;, &#x27;xiaoming&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//当第二个参数不为0的时候,从第一个参数索引1起始位置开始删除一个元素并把第三个参数加上</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\">array.splice(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"string\">&#x27;xiaoming&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//[&#x27;1&#x27;, &#x27;xiaoming&#x27;,  &#x27;3&#x27;, &#x27;4&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\">array.splice(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">&#x27;xiaoming&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//[&#x27;1&#x27;, &#x27;xiaoming&#x27;,&#x27;4&#x27;]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"8-copyWithin-方法用于从数组的指定位置拷贝元素到数组的另一个指定位置中\">8.copyWithin() 方法用于从数组的指定位置拷贝元素到数组的另一个指定位置中</h3>\n<p>语法：array.copyWithin(target, start, end)<br>\n参数：<strong>target</strong>\t必需。复制到指定目标索引位置。<br>\n<strong>start</strong>\t可选。元素复制的起始位置。<br>\n<strong>end</strong>\t可选。停止复制的索引位置 (默认为 array.length)。如果为负值，表示倒数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一个参数的时候</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\">array.copyWithin(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//[&#x27;1&#x27;,&#x27;2&#x27;,&#x27;1&#x27;,&#x27;2&#x27;];</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//二个参数的时候</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\">array.copyWithin(<span class=\"number\">2</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//[&#x27;1&#x27;,&#x27;2&#x27;,&#x27;2&#x27;,&#x27;3&#x27;];</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//三个参数的时候</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>,<span class=\"string\">&#x27;5&#x27;</span>];</span><br><span class=\"line\">array.copyWithin(<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>);<span class=\"comment\">//从索引2开始,复制的元素索引从1开始,复制到索引为3(包括3)停止</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//[&#x27;1&#x27;,&#x27;2&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;5&#x27;];</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"9-concat-方法用于连接两个或多个数组\">9.concat() 方法用于连接两个或多个数组</h3>\n<p>语法：array1.concat(array2,array3,…,arrayX)<br>\n注意⚠️：不会改变原数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> array2 = [<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> array3 = [<span class=\"string\">&#x27;5&#x27;</span>,<span class=\"string\">&#x27;6&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arrayBox = array1.concat(array2,array3)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrayBox) <span class=\"comment\">//[&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;];</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"10-entries-方法返回一个数组的迭代对象，该对象包含数组的键值对-key-value\">10.entries() 方法返回一个数组的迭代对象，该对象包含数组的键值对 (key/value)</h3>\n<p>语法：array.entries()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;xiaoming&#x27;</span>,<span class=\"string\">&#x27;lisi&#x27;</span>,<span class=\"string\">&#x27;zhangsan&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> x = array.entries();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x.next().value); <span class=\"comment\">//[0, &#x27;xiaoming&#x27;];</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x.next().value); <span class=\"comment\">//[1, &#x27;lisi&#x27;];</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x.next().value); <span class=\"comment\">//[2, &#x27;zhangsan&#x27;];</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"11-every-方法用于检测数组所有元素是否都符合指定条件（通过函数提供）\">11.every() 方法用于检测数组所有元素是否都符合指定条件（通过函数提供）</h3>\n<p>语法：array.every(function(currentValue,index,arr), thisValue)<br>\n参数：function(currentValue,index,arr){}<br>\n<strong>currentValue</strong>:必须。当前元素的值<br>\n<strong>index</strong>:可选。当前元素的索引值<br>\n<strong>arr</strong>可选。当前元素属于的数组对象</p>\n<p>every() 方法使用指定函数检测数组中的所有元素：<br>\n如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测。<br>\n如果所有元素都满足条件，则返回 true。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>,<span class=\"string\">&#x27;5&#x27;</span>,<span class=\"string\">&#x27;6&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.every(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentValue,index,arr</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> currentValue &gt; <span class=\"number\">5</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ArrBox);<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"12-fill-方法用于将一个固定值替换数组的元素\">12.fill() 方法用于将一个固定值替换数组的元素</h3>\n<p>语法：array.fill(value, start, end)<br>\n参数：<strong>value</strong>\t必需。填充的值。<br>\n<strong>start</strong>\t可选。开始填充位置。<br>\n<strong>end</strong>\t可选。停止填充位置 (默认为 array.length)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//只有一个参数的时候</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\">array.fill(<span class=\"string\">&#x27;6&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//[&#x27;6&#x27;, &#x27;6&#x27;, &#x27;6&#x27;, &#x27;6&#x27;] 所有的都会被替换掉</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//不止一个参数的时候</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\">array.fill(<span class=\"string\">&#x27;6&#x27;</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//[&#x27;1&#x27;, &#x27;6&#x27;, &#x27;6&#x27;, &#x27;4&#x27;] 索引1到索引3 不包括索引3都会被替换掉</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"13-filter-方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素\">13.filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素</h3>\n<p>语法：array.filter(function(currentValue,index,arr), thisValue) 同11</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentValue</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> currentValue &gt; <span class=\"number\">2</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ArrBox);<span class=\"comment\">// [&#x27;3&#x27;, &#x27;4&#x27;]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"14-find-方法返回通过测试（函数内判断）的数组的第一个元素的\">14.find() 方法返回通过测试（函数内判断）的数组的第一个元素的</h3>\n<p>语法：array.find(function(currentValue, index, arr),thisValue) 同11</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;6&#x27;</span>,<span class=\"string\">&#x27;9&#x27;</span>,<span class=\"string\">&#x27;18&#x27;</span>,<span class=\"string\">&#x27;20&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentValue</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> currentValue &gt;= <span class=\"number\">18</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ArrBox);<span class=\"comment\">//18 第三个元素满足条件,返回第三个元素就不接着往下面走啦</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"15-findIndex-方法返回传入一个测试条件（函数）符合条件的数组第一个元素位置\">15.findIndex() 方法返回传入一个测试条件（函数）符合条件的数组第一个元素位置</h3>\n<p>语法：array.findIndex(function(currentValue, index, arr), thisValue) 同11</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.findIndex(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentValue</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> currentValue &gt; <span class=\"number\">2</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ArrBox);<span class=\"comment\">//2 这个2就是索引2 它满足条件，如果array中都没有大于2的这时就会返回-1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"16-forEach-方法用于调用数组的每个元素，并将元素传递给回调函数\">16.forEach() 方法用于调用数组的每个元素，并将元素传递给回调函数</h3>\n<p>语法：array.forEach(function(currentValue, index, arr), thisValue) 同11</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\">array.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentValue, index, arr</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(currentValue, index, arr);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//1 0 (4) [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;]</span></span><br><span class=\"line\">\t<span class=\"comment\">//2 1 (4) [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;]</span></span><br><span class=\"line\">   <span class=\"comment\">//3 2 (4) [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;]</span></span><br><span class=\"line\">   <span class=\"comment\">//4 3 (4) [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"17-from-方法用于通过拥有-length-属性的对象或可迭代的对象来返回一个数组\">17.from() 方法用于通过拥有 length 属性的对象或可迭代的对象来返回一个数组</h3>\n<p>语法：Array.from(object, mapFunction, thisValue)<br>\n参数：<strong>object</strong>：必需，要转换为数组的对象。<br>\n<strong>mapFunction</strong>：可选，数组中每个元素要调用的函数。<br>\n<strong>thisValue</strong>\t可选，映射函数(mapFunction)中的 this 对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//只有一个参数的情况</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = <span class=\"built_in\">Array</span>.from(<span class=\"string\">&#x27;xiaoming&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//(8) [&#x27;x&#x27;, &#x27;i&#x27;, &#x27;a&#x27;, &#x27;o&#x27;, &#x27;m&#x27;, &#x27;i&#x27;, &#x27;n&#x27;, &#x27;g&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//不止一个参数的情况</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = <span class=\"built_in\">Array</span>.from([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x * <span class=\"number\">10</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//[10, 20, 30]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//从类数组对象（arguments）生成数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>)); <span class=\"comment\">// [ 1, 2, 3 ]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"18-includes-方法用来判断一个数组是否包含一个指定的值，如果是返回-true，否则false\">18.includes() 方法用来判断一个数组是否包含一个指定的值，如果是返回 true，否则false</h3>\n<p>语法：arr.includes(searchElement, fromIndex)<br>\n参数：<strong>searchElement</strong>\t必须。需要查找的元素值。<br>\n<strong>fromIndex</strong>\t可选。从该索引处开始查找 searchElement。如果为负值，则按升序从 array.length + fromIndex 的索引开始搜索。默认为 0。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//传一个参数的时候</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.includes(<span class=\"string\">&#x27;2&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//传两个参数的时候</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.includes(<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//false 虽然这时array数组里面有2但是它是从索引为2开始查找的,所以返回false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"19-indexOf-方法可返回数组中某个指定的元素位置，如果在数组中没找到指定元素则返回-1\">19.indexOf() 方法可返回数组中某个指定的元素位置，如果在数组中没找到指定元素则返回 -1</h3>\n<p>语法：array.indexOf(item,start)<br>\n参数：<strong>item</strong>\t必须。查找的元素。<br>\n<strong>start</strong>\t可选的整数参数。规定在数组中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一个参数的时候</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.indexOf(<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ArrBox);<span class=\"comment\">//0 返回的就是‘1’的索引位置</span></span><br><span class=\"line\"><span class=\"comment\">//二个参数的时候</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.indexOf(<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ArrBox);<span class=\"comment\">//false 这是第二个参数的是为1,从索引1开始查找找不到‘1’，所以返回-1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"20-isArray-方法用于判断一个对象是否为数组，如果对象是数组返回-true，否则返回-false\">20.isArray() 方法用于判断一个对象是否为数组，如果对象是数组返回 true，否则返回 false</h3>\n<p>语法：Array.isArray(obj)<br>\n参数：<strong>obj</strong>：\b必须。要判断的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> array2 = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;xiaoming&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.isArray(array1));<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.isArray(array2));<span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"21-join-方法用于把数组中的所有元素转换一个字符串，元素是通过指定的分隔符进行分隔的-返回值是一个字符串\">21.join() 方法用于把数组中的所有元素转换一个字符串，元素是通过指定的分隔符进行分隔的,返回值是一个字符串</h3>\n<p>语法：array.join(separator)<br>\n参数：separator\t可选。指定要使用的分隔符。如果省略该参数，则使用逗号作为分隔符。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.join(<span class=\"string\">&#x27;--&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ArrBox);<span class=\"comment\">//1--2--3--4</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"22-keys-方法用于从数组创建一个包含数组键的可迭代对象，如果对象是数组返回-true，否则返回-false\">22.keys() 方法用于从数组创建一个包含数组键的可迭代对象，如果对象是数组返回 true，否则返回 false</h3>\n<p>语法：array.keys()<br>\n<strong>iterable</strong>：一个具有可枚举属性并且可以迭代的对象。<br>\n<strong>for…of</strong> 语句创建一个循环来迭代可迭代的对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.keys();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ArrBox);<span class=\"comment\">//Array Iterator &#123;&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(key <span class=\"keyword\">of</span> ArrBox)&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(key);<span class=\"comment\">//0 1 2 3</span></span><br><span class=\"line\"> \t&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"23-lastIndexOf-方法可返回一个指定的元素在数组中最后出现的位置，从该字符串的后面向前查找。如果要检索的元素没有出现，则该方法返回-1\">23.lastIndexOf() 方法可返回一个指定的元素在数组中最后出现的位置，从该字符串的后面向前查找。如果要检索的元素没有出现，则该方法返回 -1</h3>\n<p>语法：array.lastIndexOf(item,start)<br>\n参数：<strong>item</strong>\t必需。规定需检索的字符串值。<br>\n<strong>start</strong>\t可选的整数参数。规定在字符串中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的最后一个字符处开始检索。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当只有一个参数的时候</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.lastIndexOf(<span class=\"string\">&#x27;2&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ArrBox);<span class=\"comment\">//3 从后往前开始检索</span></span><br><span class=\"line\"><span class=\"comment\">//当有两个参数的时候</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.lastIndexOf(<span class=\"string\">&#x27;2&#x27;</span>,array.length - <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ArrBox);<span class=\"comment\">//1 从后往前开始检索,开始检索的位置是从倒数第二个开始</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"24-map-方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。map-方法按照原始数组元素顺序依次处理元素\">24.map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。map() 方法按照原始数组元素顺序依次处理元素</h3>\n<p>语法：array.map(function(currentValue,index,arr), thisValue) 同11</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentValue</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> currentValue * <span class=\"number\">10</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ArrBox);<span class=\"comment\">//[10, 20, 30, 40]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"25-reduce-方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值\">25.reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值</h3>\n<p>语法：array.reduce(function(total, currentValue, currentIndex, arr), initialValue)<br>\n参数：function(total,currentValue, index,arr)\t必需。用于执行每个数组元素的函数。<br>\n参数\t描述<br>\n<strong>total</strong>\t必需。初始值, 或者计算结束后的返回值。<br>\n<strong>currentValue</strong>\t必需。当前元素<br>\n<strong>currentIndex</strong>\t可选。当前元素的索引<br>\n<strong>arr</strong>\t可选。当前元素所属的数组对象。<br>\n<strong>initialValue</strong>\t可选。传递给函数的初始值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">total,currentValue</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(total,currentValue);</span><br><span class=\"line\">\t<span class=\"comment\">// 0 1 </span></span><br><span class=\"line\">\t<span class=\"comment\">// 1 2</span></span><br><span class=\"line\">\t<span class=\"comment\">// 3 3</span></span><br><span class=\"line\">\t<span class=\"comment\">// 6 4</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> total + currentValue</span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ArrBox);<span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"26-reduceRight-方法的功能和-reduce-功能是一样的，不同的是-reduceRight-从数组的末尾向前将数组中的数组项做累加\">26.reduceRight() 方法的功能和 reduce() 功能是一样的，不同的是 reduceRight() 从数组的末尾向前将数组中的数组项做累加</h3>\n<p>语法：同上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.reduceRight(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">total,currentValue</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(total,currentValue);</span><br><span class=\"line\">\t<span class=\"comment\">// 4 3</span></span><br><span class=\"line\">\t<span class=\"comment\">// 1 2</span></span><br><span class=\"line\">\t<span class=\"comment\">// -1 1</span></span><br><span class=\"line\">\t<span class=\"comment\">// -2</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> total - currentValue</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ArrBox);<span class=\"comment\">//-2</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"27-slice-方法可从已有的数组中返回选定的元素\">27.slice() 方法可从已有的数组中返回选定的元素</h3>\n<p>语法：array.slice(start, end)<br>\n参数：<br>\n<strong>start</strong>\t可选。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。如果该参数为负数，则表示从原数组中的倒数第几个元素开始提取，slice(-2) 表示提取原数组中的倒数第二个元素到最后一个元素（包含最后一个元素）。<br>\n<strong>end</strong>\t可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果该参数为负数， 则它表示在原数组中的倒数第几个元素结束抽取。 slice(-2,-1) 表示抽取了原数组中的倒数第二个元素到最后一个元素（不包含最后一个元素，也就是只有倒数第二个元素）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.slice(<span class=\"number\">1</span>));<span class=\"comment\">//[2, 3, 4] 从索引1截取到最后</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.slice(-<span class=\"number\">2</span>));<span class=\"comment\">//[3, 4] 从原数组中的倒数第几个元素开始提取</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.slice(<span class=\"number\">1</span>,<span class=\"number\">2</span>));<span class=\"comment\">//[2] 选取索引1到索引2的元素（不包含索引2）</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.slice(-<span class=\"number\">2</span>,-<span class=\"number\">1</span>));<span class=\"comment\">//[2] 选取倒数第二个到倒数第一个（不包含倒数第一个）</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"28-some-方法用于检测数组中的元素是否满足指定条件（函数提供）\">28.some() 方法用于检测数组中的元素是否满足指定条件（函数提供）</h3>\n<p>如果有一个元素满足就会返回ture，剩下的不会在进行检测。没有满足的返回false<br>\n语法：array.some(function(currentValue,index,arr),thisValue)   同11</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.some(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentValue</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> currentValue &gt; <span class=\"number\">2</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ArrBox);<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"29-toString-方法可把数组转换为字符串，并返回结果-数组的所有值用逗号隔开\">29.toString() 方法可把数组转换为字符串，并返回结果,数组的所有值用逗号隔开</h3>\n<p>语法：array.toString()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> ArrBox = array.toString();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ArrBox);<span class=\"comment\">//1,2,3,4</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"30-valueOf-方法返回-Array-对象的原始值\">30.valueOf() 方法返回 Array 对象的原始值</h3>\n<p>语法：array.valueOf()<br>\nArray：返回数组对象本身。<br>\nBoolean： 返回布尔值<br>\nDate：存储的时间是从 1970 年 1 月 1 日午夜开始计的毫秒数 UTC。<br>\nFunction： 返回函数本身。<br>\nNumber： 返回数字值。<br>\nObject：返回对象本身。这是默认情况。<br>\nString：返回字符串值。<br>\nMath 和 Error 对象没有 valueOf 方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//返回数组本身</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [<span class=\"string\">&#x27;xiaoming&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array.valueOf() == array);<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回布尔值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> boolean = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(boolean.valueOf() == boolean);<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">// new一个Boolean对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newBool = <span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span>(<span class=\"literal\">true</span>); <span class=\"comment\">// Boolean &#123;true&#125;</span></span><br><span class=\"line\">newBool.valueOf() <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// valueOf()返回的是true，两者的值相等</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newBool.valueOf() == newBool);   <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// 但是不全等，两者类型不相等，前者是boolean类型，后者是object类型</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newBool.valueOf() === newBool);   <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回时间戳</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">2021</span>, <span class=\"number\">11</span>, <span class=\"number\">2</span>, <span class=\"number\">13</span>, <span class=\"number\">04</span>, <span class=\"number\">59</span>, <span class=\"number\">230</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(date.valueOf());<span class=\"comment\">//1638421499230 返回时间戳</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回函数本身</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"function\"><span class=\"keyword\">function</span> = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">function</span>.valueOf() == <span class=\"function\"><span class=\"keyword\">function</span>)</span>;<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回数字值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> number = <span class=\"number\">5</span>;</span><br><span class=\"line\"> \t<span class=\"built_in\">console</span>.log(number.valueOf() == number );<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回对象本身</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> object = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(object.valueOf() == object);<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回字符串本身</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> string = <span class=\"string\">&#x27;xiaoming&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(string.valueOf() == string);<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"三、数组去重的方法\">三、数组去重的方法</h2>\n<h3 id=\"1-利用ES6中的-Set-方法去重\">1.利用ES6中的 Set 方法去重</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> set1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set1);<span class=\"comment\">//Set(3) &#123;1, 2, 3&#125; 此时时类数组，不是真正的数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newArr1 = <span class=\"built_in\">Array</span>.from(set1); <span class=\"comment\">//第一种方法可以使用Array.from()将类数组转换成真正的数组</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr1);<span class=\"comment\">//[1, 2, 3, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> newArr2 = [...set1];<span class=\"comment\">//第二种方法直接结构赋值，也可以得到一个真正的数组</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr2);<span class=\"comment\">//[1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-双层for循环去重\">2.双层for循环去重</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>];</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = i+<span class=\"number\">1</span>;j&lt;arr.length;j++)&#123;</span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(arr[i],arr[j]);</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(arr[i] == arr[j]) &#123;</span><br><span class=\"line\">         <span class=\"comment\">//如果数据相同则通过splice删除一条相同的数据</span></span><br><span class=\"line\">         arr.splice(i,<span class=\"number\">1</span>);</span><br><span class=\"line\">          <span class=\"comment\">//i是第一层遍历的下标，因为上一步删除了一条数据，所以下标也需要减一，否则实际下标，要比数组中的数据更多</span></span><br><span class=\"line\">         i--;</span><br><span class=\"line\">         <span class=\"comment\">//j 也同样需要和i一样减一，保持遍历依旧同步判断</span></span><br><span class=\"line\">         j--;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(arr);<span class=\"comment\">// [3, 4, 1, 2]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-利用数组的indexOf方法去重\">3.利用数组的indexOf方法去重</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\">   <span class=\"keyword\">let</span> newArr = []</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++) &#123; <span class=\"comment\">//循环arr数组</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span>(newArr.indexOf(arr[i]) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">       newArr.push(arr[i]);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(newArr);<span class=\"comment\">//[4, 5, 6, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-利用数组的includes方法去重\">4.利用数组的includes方法去重</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> newArr = []</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!newArr.includes(arr[i]))&#123; </span><br><span class=\"line\">    newArr.push(arr[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr);<span class=\"comment\">//[4, 5, 6, 2, 3]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-利用数组的filter方法去重\">5.利用数组的filter方法去重</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\">   <span class=\"keyword\">let</span> newArr = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(arr.indexOf(item,<span class=\"number\">0</span>),index);</span><br><span class=\"line\">   <span class=\"comment\">//arr.indexOf(item,0)循环返回元素所在的位置,有两个相同的元素只会返回第一个元素的索引</span></span><br><span class=\"line\">   <span class=\"comment\">//0 0</span></span><br><span class=\"line\">  <span class=\"comment\">//1 1</span></span><br><span class=\"line\">  <span class=\"comment\">//2 2</span></span><br><span class=\"line\">  <span class=\"comment\">//3 3 </span></span><br><span class=\"line\">  <span class=\"comment\">//4 4</span></span><br><span class=\"line\">  <span class=\"comment\">//3 5</span></span><br><span class=\"line\">  <span class=\"comment\">//0 6</span></span><br><span class=\"line\">  <span class=\"comment\">//1 7</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> arr.indexOf(item,<span class=\"number\">0</span>) === index</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(newArr);/[<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n","categories":["Js"],"tags":["Js"]},{"title":"面试题","url":"/blog/2021/12/21/%E9%9D%A2%E8%AF%95%E9%A2%98/","content":"<h2 id=\"判断数据类型的方法🌟🌟🌟🌟🌟\"><a href=\"#判断数据类型的方法🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"判断数据类型的方法🌟🌟🌟🌟🌟\"></a>判断数据类型的方法🌟🌟🌟🌟🌟</h2><ol>\n<li>typeof(缺点typeof ull的值为Object,无法分辨是null还是Object)</li>\n<li>instanceof(只能判断对象是否存在于目标对象的原型链上)</li>\n<li>constructor</li>\n<li>Object.prototype.toString.call()<br>一种最好的基本类型检测方式 Object.prototype.toString.call() ;它可以区分 null 、 string 、<br>boolean 、 number 、 undefined 、 array 、 function 、 object 、 date 、 math 数据类型。<br>缺点：不能细分为谁谁的实例<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// -----------------------------------------typeof</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span> <span class=\"comment\">// &#x27;undefined&#x27; </span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">&#x27;10&#x27;</span> <span class=\"comment\">// &#x27;String&#x27; </span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">10</span> <span class=\"comment\">// &#x27;Number&#x27; </span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">false</span> <span class=\"comment\">// &#x27;Boolean&#x27; </span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"built_in\">Symbol</span>() <span class=\"comment\">// &#x27;Symbol&#x27; </span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"built_in\">Function</span> <span class=\"comment\">// ‘function&#x27; </span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span> <span class=\"comment\">// ‘Object’ </span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> [] <span class=\"comment\">// &#x27;Object&#x27; </span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> &#123;&#125; <span class=\"comment\">// &#x27;Object&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// -----------------------------------------instanceof</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span>(<span class=\"params\"></span>) </span>&#123; &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f1 = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f1 <span class=\"keyword\">instanceof</span> Foo);<span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Number</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">123</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Number</span>); <span class=\"comment\">//false   --&gt;不能判断字面量的基本数据类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// -----------------------------------------constructor</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;ming&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[hbc]at/gi</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e.constructor);<span class=\"comment\">//ƒ Number() &#123; [native code] &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e.constructor.name);<span class=\"comment\">//Number</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fn.constructor.name) <span class=\"comment\">// Function </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(date.constructor.name)<span class=\"comment\">// Date </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.constructor.name) <span class=\"comment\">// Array </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(reg.constructor.name) <span class=\"comment\">// RegExp</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-----------------------------------------Object.prototype.toString.call()</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">undefined</span>)); <span class=\"comment\">// &quot;[object Undefined]&quot; </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">null</span>)); <span class=\"comment\">// &quot;[object Null]&quot; </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"number\">123</span>)); <span class=\"comment\">// &quot;[object Number]&quot; </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"string\">&quot;abc&quot;</span>)); <span class=\"comment\">// &quot;[object String]&quot; </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(<span class=\"literal\">true</span>)); <span class=\"comment\">// &quot;[object Boolean]&quot; </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;ming&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[hbc]at/gi</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(fn));<span class=\"comment\">// &quot;[object Function]&quot; </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(date));<span class=\"comment\">// &quot;[object Date]&quot; </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(arr)); <span class=\"comment\">// &quot;[object Array]&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(reg));<span class=\"comment\">// &quot;[object RegExp]&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"instanceof原理🌟🌟🌟🌟🌟\"><a href=\"#instanceof原理🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"instanceof原理🌟🌟🌟🌟🌟\"></a>instanceof原理🌟🌟🌟🌟🌟</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myInstance</span>(<span class=\"params\">L, R</span>) </span>&#123;<span class=\"comment\">//L代表instanceof左边，R代表右边</span></span><br><span class=\"line\">     <span class=\"keyword\">var</span> RP = R.prototype</span><br><span class=\"line\">     <span class=\"keyword\">var</span> LP = L.__proto__</span><br><span class=\"line\">     <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(LP == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(LP == RP) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       LP = LP.__proto__</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(myInstance(&#123;&#125;,<span class=\"built_in\">Object</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"为什么typeof-null是Objec🌟🌟🌟🌟\"><a href=\"#为什么typeof-null是Objec🌟🌟🌟🌟\" class=\"headerlink\" title=\"为什么typeof null是Objec🌟🌟🌟🌟\"></a>为什么typeof null是Objec🌟🌟🌟🌟</h2>因为在JavaScript中，<code>不同的对象都是使用二进制存储的</code>，如果二进制前三位都是0的话，系统会判断为是Object类型，而null的二进制全是0，自然也就判断为Object</li>\n</ol>\n<p>这个bug是初版本的JavaScript中留下的，扩展一下其他五种标识位：</p>\n<blockquote>\n<p>000 对象<br>1 整型<br>010 双精度类型<br>100字符串<br>110布尔类型</p>\n</blockquote>\n<h2 id=\"手写call、apply、bind🌟🌟🌟🌟🌟\"><a href=\"#手写call、apply、bind🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"手写call、apply、bind🌟🌟🌟🌟🌟\"></a>手写call、apply、bind🌟🌟🌟🌟🌟</h2><p>1.call和apply实现思路主要是：<br>  判断是否是函数调用，若非函数调用抛异常<br>  通过新对象（context）来调用函数<br>  给context创建一个fn设置为需要调用的函数<br>  结束调用完之后删除fn<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 手写call</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.myCall = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span> != <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;Not a function&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 不穿参数默认window</span></span><br><span class=\"line\">  context = context || <span class=\"built_in\">window</span></span><br><span class=\"line\">  <span class=\"comment\">// 保存this</span></span><br><span class=\"line\">  context.fn = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 保存参数</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> args = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>).slice(<span class=\"number\">1</span>)<span class=\"comment\">//Array.from把伪数组转出数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 调用函数</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = context.fn(...args);</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.fn </span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 手写apply</span></span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.myApply = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span> != <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;Not a function&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result</span><br><span class=\"line\">  <span class=\"comment\">// 不穿参数默认window</span></span><br><span class=\"line\">  context = context || <span class=\"built_in\">window</span></span><br><span class=\"line\">  <span class=\"comment\">// 保存this</span></span><br><span class=\"line\">  context.fn = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 是否传参数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"built_in\">arguments</span>[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">    result = context.fn(...arguments[<span class=\"number\">1</span>])</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    result = context.fn()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">delete</span> context.fn</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>2.bind实现思路<br>判断是否是函数调用，若非函数调用抛异常<br>返回函数<br>判断函数的调用方式，是否是被new出来的<br>new出来的话返回空对象，但是实例的<strong>proto</strong>指向_this的prototype<br>完成函数柯里化<br>Array.prototype.slice.call()<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.myBind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">context</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"built_in\">this</span> != <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;Not a function&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 保存调用bind函数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> _this = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 保存参数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"comment\">//返回一个函数</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是不是new出来的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">this</span> <span class=\"keyword\">instanceof</span> F)&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果是new出来的</span></span><br><span class=\"line\">      <span class=\"comment\">// 返回一个空对象，且使创建出来的实例的__proto__指向_this的prototype，且完成函数柯里化</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> _this(...args,...arguments)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果不是new出来的改变this指向，且完成函数柯里化</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> _this.apply(context,args.concat(...arguments))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"字面量创建对象和new创建对象有什么区别，new内部都实现了什么，手写一个new🌟🌟🌟🌟🌟\"><a href=\"#字面量创建对象和new创建对象有什么区别，new内部都实现了什么，手写一个new🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"字面量创建对象和new创建对象有什么区别，new内部都实现了什么，手写一个new🌟🌟🌟🌟🌟\"></a>字面量创建对象和new创建对象有什么区别，new内部都实现了什么，手写一个new🌟🌟🌟🌟🌟</h2><p>字面量:<br>字面量创建对象更简单，方便阅读<br>不需要作用域解析，速度更快<br>new内部：<br>创建一个新对象<br>使新对象的<strong>proto</strong>指向原函数的prototype<br>改变this指向（指向新的obj）并执行该函数，执行结果保存起来作为result<br>判断执行函数的结果是不是null或Undefined，如果是则返回之前的新对象，如果不是则返回result<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//手写new</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myNew</span>(<span class=\"params\">fn,...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 创建一个控对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// 使空对象的隐式原型指向原函数的显式原型</span></span><br><span class=\"line\">  obj.__proto__ = fn.prototype</span><br><span class=\"line\">  <span class=\"comment\">// this指向obj</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = fn.apply(obj,args)</span><br><span class=\"line\">  <span class=\"comment\">// 返回</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span> ? result : obj</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"字面量new出来的对象和-Object-create-null-创建出来的对象有什么区别🌟🌟🌟\"><a href=\"#字面量new出来的对象和-Object-create-null-创建出来的对象有什么区别🌟🌟🌟\" class=\"headerlink\" title=\"字面量new出来的对象和 Object.create(null)创建出来的对象有什么区别🌟🌟🌟\"></a>字面量new出来的对象和 Object.create(null)创建出来的对象有什么区别🌟🌟🌟</h2><ul>\n<li>字面量和new出来的对象会继承Object的属性和方法，他们的隐式原型会指向Object的显示原型</li>\n<li>Object.create(null)创建出来的对象原型为null，作为原型链的顶端，没有继承Object的属性和方法。<h2 id=\"什么是作用域什么是作用域链🌟🌟🌟🌟\"><a href=\"#什么是作用域什么是作用域链🌟🌟🌟🌟\" class=\"headerlink\" title=\"什么是作用域什么是作用域链🌟🌟🌟🌟\"></a>什么是作用域什么是作用域链🌟🌟🌟🌟</h2></li>\n<li>规定变量和函数可使用的范围称为作用域</li>\n<li>每个函数都有一个作用域，查找变量或者函数时，需要从局部作用域到全局作用域依次查找，这些作用域到集合称为作用域链<h2 id=\"什么是执行栈，什么是执行上下文🌟🌟🌟🌟\"><a href=\"#什么是执行栈，什么是执行上下文🌟🌟🌟🌟\" class=\"headerlink\" title=\"什么是执行栈，什么是执行上下文🌟🌟🌟🌟\"></a>什么是执行栈，什么是执行上下文🌟🌟🌟🌟</h2><code>执行上下文分为:</code><ul>\n<li>全局执行上下文<br>创建一个全局的window对象，并规定this执行window，执行js的时候就压入栈底，关闭浏览器的时候才能弹出</li>\n</ul>\n</li>\n<li>函数执行上下文<br>每次函数调用时，都会新创建一个函数执行上下文<br>执行上下文分为创建阶段和执行阶段<br>创建阶段：函数环境会创建变量对象：arguments对象（并赋值）、函数声明（并赋值）、变量声明（不赋值），函数表达式声明（不赋值）；会确定this指向；会确定作用域<br>执行阶段：变量赋值、函数表达式赋值，使变量对象编程活跃对象</li>\n<li>eval执行上下文</li>\n</ul>\n<pre><code class=\"lang-执行栈:```\">- 栈的特点```先进后出\n</code></pre>\n<ul>\n<li>当进入一个执行环境，就会创建它的执行上下文，然后进行压栈(进栈)，当程序执行完成时，它的执行上下文就会被销毁，进行弹栈(出栈)</li>\n<li>栈底永远是全局环境的执行上下文，栈顶永远是正在执行函数的执行上下文</li>\n<li>只有浏览器关闭的时候全局执行上下文才会弹出<h2 id=\"什么是闭包？闭包的作用？闭包的应用？🌟🌟🌟🌟🌟\"><a href=\"#什么是闭包？闭包的作用？闭包的应用？🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"什么是闭包？闭包的作用？闭包的应用？🌟🌟🌟🌟🌟\"></a>什么是闭包？闭包的作用？闭包的应用？🌟🌟🌟🌟🌟</h2><blockquote>\n<p>函数执行，形成私有的执行上下文，使内部私有变量不受外界干扰，起到保护和保存的作用<br>关于闭包说法不一 <a href=\"https://zhuanlan.zhihu.com/p/22486908\">https://zhuanlan.zhihu.com/p/22486908</a></p>\n</blockquote>\n</li>\n</ul>\n<pre><code class=\"lang-作用```\">- 保护\n避免变量冲突\n- 保存\n解决循环绑定引发的索引问题\n- 变量不会被销毁\n可以使用函数内部的函数，使变量不会被垃圾机制回收\n\n```应用\n</code></pre>\n<ul>\n<li>设计模式中的单例模式</li>\n<li>for循环中保留i的操作</li>\n<li>防抖和节流</li>\n<li>函数柯里化</li>\n</ul>\n<pre><code class=\"lang-缺点```\">会出现内存泄漏\n\n## 原型和原型链、如何理解🌟🌟🌟🌟🌟\n帮助理解 https://www.jianshu.com/p/dee9f8b14771\n\n```原型:\n</code></pre>\n<p>原型分为隐式原型和显式原型，每个对象都有一个隐式原型，它指向自己的构造函数的显式原型</p>\n<pre><code class=\"lang-原型链：```\">多个__proto__组成的集合成为原型链\n- 所有实例的__proto__都指向他们构造函数的prototype\n- 所有的prototype都是对象，自然它的__proto__指向的是Object()的prototype\n- 所有的构造函数的隐式原型指向的都是Function()的显示原型\n- Object的隐式原型是null\n\n## js的继承方式有哪些、及优点🌟🌟🌟🌟🌟\n&gt;原型继承、组合继承、寄生组合继承、es6extend\n\n```原型继承\n</code></pre>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 把父类的实例作为子类的原型</span></span><br><span class=\"line\"><span class=\"comment\">// 缺点：子类的实例共享了父类构造函数的引用属性   不能传参</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">      friends: [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>, <span class=\"string\">&quot;d&quot;</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> p1 = <span class=\"built_in\">Object</span>.create(person)</span><br><span class=\"line\"></span><br><span class=\"line\">    p1.friends.push(<span class=\"string\">&quot;aaa&quot;</span>)<span class=\"comment\">//缺点：子类的实例共享了父类构造函数的引用属性</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(p1);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(person);<span class=\"comment\">//缺点：子类的实例共享了父类构造函数的引用属性</span></span><br></pre></td></tr></table></figure>\n<pre><code class=\"lang-组合继承```\"><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在子函数中运行父函数，但是要利用call把this改变一下，</span></span><br><span class=\"line\"><span class=\"comment\">// 再在子函数的prototype里面new Father() ,使Father的原型中的方法也得到继承，最后改变Son的原型中的constructor</span></span><br><span class=\"line\"><span class=\"comment\">// 缺点：调用了两次父类的构造函数，造成了不必要的消耗，父类方法可以复用</span></span><br><span class=\"line\"><span class=\"comment\">// 优点可传参，不共享父类引用属性</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">     <span class=\"built_in\">this</span>.hobby = [<span class=\"string\">&quot;篮球&quot;</span>, <span class=\"string\">&quot;足球&quot;</span>, <span class=\"string\">&quot;乒乓球&quot;</span>]</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   Father.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">     Father.call(<span class=\"built_in\">this</span>, name)</span><br><span class=\"line\">     <span class=\"built_in\">this</span>.age = age</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   Son.prototype = <span class=\"keyword\">new</span> Father()</span><br><span class=\"line\">   Son.prototype.constructor = Son</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Son(<span class=\"string\">&quot;ming&quot;</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(s);</span><br></pre></td></tr></table></figure>\n\n```寄生组合继承\n</code></pre>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Father</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.hobby = [<span class=\"string\">&quot;篮球&quot;</span>, <span class=\"string\">&quot;足球&quot;</span>, <span class=\"string\">&quot;乒乓球&quot;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Father.prototype.getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Son</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  Father.call(<span class=\"built_in\">this</span>, name)</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Son.prototype = <span class=\"built_in\">Object</span>.create(Father.prototype)</span><br><span class=\"line\">Son.prototype.constructor = Son</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = <span class=\"keyword\">new</span> Son(<span class=\"string\">&quot;ming&quot;</span>, <span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s2);</span><br></pre></td></tr></table></figure>\n<pre><code class=\"lang-extend继承```\"><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">x, y</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.y = y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">x, y, color</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// this.color = color; // ReferenceError</span></span><br><span class=\"line\">    <span class=\"built_in\">super</span>(x, y);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.color = color; <span class=\"comment\">// 正确</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> cp = <span class=\"keyword\">new</span> ColorPoint(<span class=\"number\">25</span>, <span class=\"number\">8</span>, <span class=\"string\">&#x27;green&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cp.x);</span><br></pre></td></tr></table></figure>\n## 内存泄漏、垃圾回收机制🌟🌟🌟🌟🌟\n```什么是内存泄漏：\n</code></pre>\n<p>内存泄漏是指不在用的内存没有释放出来，导致该段内存无法被使用就是内存泄漏</p>\n<pre><code class=\"lang-为什么会导致内存泄漏：```\">内存泄漏指我们无法在通过js访问某个对象，而垃圾回收机制认为该对象还在被引用，因此垃圾回收机制不会释放该对象，导致该块内存无法被释放，积少成多，系统会越来越卡以至于崩溃\n```垃圾回收机制都有哪写策略：\n</code></pre>\n<ul>\n<li>标记清除法<br>垃圾回收机制获取根并标记他们，然后访问并标记所有来自它的引用，然后再访问这些对象并标记他们的引用。。。如此递进结束后若发现有没有标记的(不可达的)进行删除，进入执行环境的不能删除</li>\n<li>引用计数法<br>1.当声明一个变量并给该变量赋值一个引用类型的值时候，该值的计数+1，当该值赋值给另一个变量的时候，该计数+1，当该值被其他值取代的时候，该计数-1，当计数变为0的时候，说明无法访问该值了，垃圾回收机制清除该对象<br>2.缺点： 当两个对象循环引用的时候，引用计数无计可施。如果循环引用多次执行的话，会造成崩溃等问题。所以后来被标记清除法取代。<h2 id=\"深拷贝浅拷贝🌟🌟🌟🌟🌟\"><a href=\"#深拷贝浅拷贝🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"深拷贝浅拷贝🌟🌟🌟🌟🌟\"></a>深拷贝浅拷贝🌟🌟🌟🌟🌟</h2>帮助理解 <a href=\"https://www.cnblogs.com/dengyao-blogs/p/11466598.html\">https://www.cnblogs.com/dengyao-blogs/p/11466598.html</a><pre><code class=\"lang-浅拷贝：```\">子对象复制父对象，父子对象发生关联，两者属性值指向同一内存空间。简单来讲，就是改变其中一个对象，另一个对象也会跟着改变。\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">    b = a</span><br><span class=\"line\">a[<span class=\"number\">0</span>] = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a,b) <span class=\"comment\">//[4, 2, 3]  [4, 2, 3]</span></span><br></pre></td></tr></table></figure>\n```深拷贝：\n</code></pre>\n拷贝对象各个层级的属性。简单的讲，就是复制出来的每个对象都有属于自己的内存空间，不会互相干扰。<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//借用JSON对象的 parse 和 stringify ！！</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> c = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">        d = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(c))</span><br><span class=\"line\">    c[<span class=\"number\">0</span>] = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(c,d); <span class=\"comment\">//[4, 2, 3]   [1, 2, 3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//封装深拷贝函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> objClone = <span class=\"built_in\">Array</span>.isArray(obj) ? [] : &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj &amp;&amp; <span class=\"keyword\">typeof</span> obj === <span class=\"string\">&quot;object&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(obj.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">                 <span class=\"comment\">// 判断 obj 是否是对象,如果是，递归复制</span></span><br><span class=\"line\">                 <span class=\"keyword\">if</span>(obj[key] &amp;&amp; <span class=\"keyword\">typeof</span> obj[key] === <span class=\"string\">&quot;object&quot;</span>) &#123;</span><br><span class=\"line\">                      objClone[key] = deepClone(obj[key]);</span><br><span class=\"line\">                 &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                      <span class=\"comment\">// 如果不是</span></span><br><span class=\"line\">                      objClone[key] = obj[key];</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;      </span><br><span class=\"line\">    <span class=\"keyword\">return</span> objClone</span><br><span class=\"line\">&#125;         </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>],</span><br><span class=\"line\">     b = deepClone(a);</span><br><span class=\"line\">a[<span class=\"number\">0</span>] = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a,b)</span><br></pre></td></tr></table></figure>\nhasOwnProperty() 方法详解  <a href=\"https://blog.csdn.net/a791226606/article/details/110679991\">https://blog.csdn.net/a791226606/article/details/110679991</a></li>\n</ul>\n<h2 id=\"为什么js是单线程🌟🌟🌟🌟🌟\"><a href=\"#为什么js是单线程🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"为什么js是单线程🌟🌟🌟🌟🌟\"></a>为什么js是单线程🌟🌟🌟🌟🌟</h2><blockquote>\n<p>因为js里面有可视的DOM，如果是多线程的话，这个线程正在删除DOM节点，另一个线程正在编辑DOM节点，导致浏览器不知道该听谁的。</p>\n</blockquote>\n<h2 id=\"如何实现异步编程\"><a href=\"#如何实现异步编程\" class=\"headerlink\" title=\"如何实现异步编程\"></a>如何实现异步编程</h2><p>回调函数</p>\n<h2 id=\"什么是generator\"><a href=\"#什么是generator\" class=\"headerlink\" title=\"什么是generator\"></a>什么是generator</h2><blockquote>\n<p>generators 是可以控制 iterator（迭代器）的函数。并在任何时候都可以暂停和恢复。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">generatorForLoop</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; num; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> genForLoop = generatorForLoop(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">genForLoop.next(); <span class=\"comment\">// 首先 console.log —— 0</span></span><br><span class=\"line\">genForLoop.next(); <span class=\"comment\">// 1</span></span><br><span class=\"line\">genForLoop.next(); <span class=\"comment\">// 2</span></span><br><span class=\"line\">genForLoop.next(); <span class=\"comment\">// 3</span></span><br><span class=\"line\">genForLoop.next(); <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n<p>帮助理解 <a href=\"https://zhuanlan.zhihu.com/p/45599048\">https://zhuanlan.zhihu.com/p/45599048</a></p>\n<h2 id=\"Generator是怎么样使用的以及各个阶段的变化如何？🌟🌟🌟\"><a href=\"#Generator是怎么样使用的以及各个阶段的变化如何？🌟🌟🌟\" class=\"headerlink\" title=\"Generator是怎么样使用的以及各个阶段的变化如何？🌟🌟🌟\"></a>Generator是怎么样使用的以及各个阶段的变化如何？🌟🌟🌟</h2><ul>\n<li>首先生成器是一个函数，用来返回迭代器</li>\n<li>调用生成器后不会立即执行，而是通过返回的迭代器来控制这个生成器一步一步执行的</li>\n<li>通过调用迭代器的next方法来请求一个一个的值，返回的对象有两个属性，一个是value，也就是值，一个是<code>done</code>，是个布尔值类型，done为true说明生成器函数执行完毕，没有可返回的值</li>\n<li>done为true后，继续调用迭代器的next方法，返回值value为<code>undefined</code><br><code>状态变化</code></li>\n<li>每当执行到yield属性的时候，都会返回一个对象</li>\n<li>这时候生成器处于一个非阻塞的挂起状态</li>\n<li>调用迭代器的next方法的时候，生成器又从挂起状态变成执行状态，继续上一次执行位置开始执行</li>\n<li>直到遇到下一次yield依次循环</li>\n<li><p>直到代码没有yield了，就会返回一个done为true，value为undefined的对象</p>\n<h2 id=\"说说-Promise-的原理？你是如何理解-Promise-的？🌟🌟🌟🌟🌟\"><a href=\"#说说-Promise-的原理？你是如何理解-Promise-的？🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"说说 Promise 的原理？你是如何理解 Promise 的？🌟🌟🌟🌟🌟\"></a>说说 Promise 的原理？你是如何理解 Promise 的？🌟🌟🌟🌟🌟</h2><pre><code class=\"lang-实现原理```\">&gt;说到底，Promise 也还是使用回调函数，只不过是把回调封装在了内部，使用上一直通过 then 方法的链式调用，使得多层的回调嵌套看起来变成了同一层的，书写上以及理解上会更直观和简洁一些。\n帮助理解 https://blog.csdn.net/qq_37860963/article/details/81539118\n## 宏任务和微任务有哪些🌟🌟🌟🌟🌟\n```宏任务:\n</code></pre>\n<p>script,setTimeOut,setInterval,setImmediate<br><code>微任务:</code><br>Promise.then,process.nextTick,Object.observe,MutationObserve</p>\n</li>\n<li><p>Promise是同步任务</p>\n<h2 id=\"宏任务和微任务是怎么执行的🌟🌟🌟🌟🌟\"><a href=\"#宏任务和微任务是怎么执行的🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"宏任务和微任务是怎么执行的🌟🌟🌟🌟🌟\"></a>宏任务和微任务是怎么执行的🌟🌟🌟🌟🌟</h2></li>\n<li>执行宏任务中的script</li>\n<li>进行script后，所有的同步任务主线程执行</li>\n<li>所有的宏任务放入宏任务执行队列</li>\n<li>所有的微任务放入微任务执行队列</li>\n<li>先清空微任务队列</li>\n<li>再取一个宏任务执行，再清空微任务队列</li>\n<li>依次循环<br><code>例题1</code><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;2&#x27;</span>);</span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;3&#x27;</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;4&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;5&#x27;</span>);</span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;6&#x27;</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;7&#x27;</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;8&#x27;</span>)</span><br><span class=\"line\">    foo()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;10&#x27;</span>)</span><br><span class=\"line\">bar()</span><br><span class=\"line\"><span class=\"comment\">//2 4 5 10 8 9 3 6 1 7</span></span><br></pre></td></tr></table></figure>\n解析</li>\n<li>首先js浏览器执行js代码从上到下顺序，遇到setTimeout,把setTimeout放到宏任务执行队列</li>\n<li>new Promise属于主线程任务直接执行 2</li>\n<li>promise.then下面属于微任务，把then放到微任务的执行队列</li>\n<li>console.log(‘4’);属于主线程任务直接执行 4</li>\n<li>又遇到new Promise属于主线程直接执行 5,下面的then放到微任务执行队列</li>\n<li>又遇到setTimeout,把setTimeout放到宏任务执行队列</li>\n<li>console.log(‘10’)属于主线程任务直接执行 10</li>\n<li>遇到bar()函数调用，执行bar函数打印 8 在bar函数中调用foo()执行打印 9 </li>\n<li>主线程的任务都执行完之后，去执行微任务队列中的任务执行 3， 6</li>\n<li>微任务队列中的任务执行完之后，执行宏任务队列中的任务执行1， 7<br><code>例题2</code><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;2&#x27;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;3&#x27;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">        resolve();</span><br><span class=\"line\">      &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;4&#x27;</span>)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;5&#x27;</span>); </span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;6&#x27;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;7&#x27;</span>);</span><br><span class=\"line\">      <span class=\"comment\">// reject();</span></span><br><span class=\"line\">      resolve();</span><br><span class=\"line\">    &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;8&#x27;</span>)</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;10&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 5 7 10 8 1 2 4 6 3</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"变量和函数怎么进行提升的？优先级是怎么样的？🌟🌟🌟🌟\"><a href=\"#变量和函数怎么进行提升的？优先级是怎么样的？🌟🌟🌟🌟\" class=\"headerlink\" title=\"变量和函数怎么进行提升的？优先级是怎么样的？🌟🌟🌟🌟\"></a>变量和函数怎么进行提升的？优先级是怎么样的？🌟🌟🌟🌟</h2></li>\n<li>对所有函数声明进行了提升(除函数表达式和箭头函数)，引用类型的赋值<br>开辟堆空间<br>存储内容<br>将地址赋给变量</li>\n<li>对变量声明进行提升，只声明不赋值，值为undefined</li>\n</ul>\n<h2 id=\"var-let-const-有什么区别🌟🌟🌟🌟🌟\"><a href=\"#var-let-const-有什么区别🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"var let const 有什么区别🌟🌟🌟🌟🌟\"></a>var let const 有什么区别🌟🌟🌟🌟🌟</h2><ul>\n<li>var<br>var声明的变量可以进行变量提升,let const没有<br>var可以重复声明<br>var在飞函数作用域中定义是挂载到window上的</li>\n<li>let<br>let声明的变量在才局部起作用<br>let防止变量污染<br>不可再声明</li>\n<li>const<br>具有let的所有特征<br>不可被改变<br>如果const声明的是对象的话，是可以修改对象里面的值的<h2 id=\"箭头函数和普通函数的区别？箭头函数可以当做构造函数-new-吗-🌟🌟🌟🌟🌟\"><a href=\"#箭头函数和普通函数的区别？箭头函数可以当做构造函数-new-吗-🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"箭头函数和普通函数的区别？箭头函数可以当做构造函数 new 吗?🌟🌟🌟🌟🌟\"></a>箭头函数和普通函数的区别？箭头函数可以当做构造函数 new 吗?🌟🌟🌟🌟🌟</h2></li>\n<li>箭头函数是普通函数的简写，但是他不具备很多普通函数的特征</li>\n<li>1.this指向问题，箭头函数的this指向它定义时所在的对象，而不是调用时所在的对象</li>\n<li>2.不会进行函数提升</li>\n<li>3.没有arguments对象，不能使用arguments，如果要获取参数的话要使用rest运算符</li>\n<li>4.没有yield属性，不能作为生成器gengenerator使用</li>\n<li>5.不能new<br>没有自己的this，不能调用call和apply<br>没有prototype，new关键字内部需要把新对象的<strong>proto</strong>指向函数的prototype<h2 id=\"说说你对代理的理解🌟🌟🌟\"><a href=\"#说说你对代理的理解🌟🌟🌟\" class=\"headerlink\" title=\"说说你对代理的理解🌟🌟🌟\"></a>说说你对代理的理解🌟🌟🌟</h2><code>代理有几种定义方式:</code></li>\n<li>字面量定义,对象里面的get和set</li>\n<li>类定义，类里面的get和set</li>\n<li>Proxy对象，里面传两个对象，第一个对象是目标对象target，第二个对象是专门放get和set的handler对象。Proxy和上面两个的区别在于Proxy专门对对象的属性进行get和set<br><code>代理的实际应用有:</code></li>\n<li>Vue的双向绑定vue2用的是Object.definProperty,vue3用的是proxy</li>\n<li>校验值</li>\n<li>计算属性值(get的时候加以修饰)<br>Object.definProperty 帮助理解<a href=\"https://blog.csdn.net/weixin_46726346/article/details/115913752\">https://blog.csdn.net/weixin_46726346/article/details/115913752</a><h2 id=\"为什么要使用模块化🌟🌟🌟\"><a href=\"#为什么要使用模块化🌟🌟🌟\" class=\"headerlink\" title=\"为什么要使用模块化🌟🌟🌟\"></a>为什么要使用模块化🌟🌟🌟</h2></li>\n<li>防止命名冲突</li>\n<li>更好分离按需加载</li>\n<li>更好的复用性</li>\n<li>更高的维护性<h2 id=\"exports和module-exports有什么区别？🌟🌟🌟\"><a href=\"#exports和module-exports有什么区别？🌟🌟🌟\" class=\"headerlink\" title=\"exports和module.exports有什么区别？🌟🌟🌟\"></a>exports和module.exports有什么区别？🌟🌟🌟</h2></li>\n<li>导出方式不一样<br>exports.xxx = ‘xxx’<br>module.export = {}</li>\n<li>exports是module.exports的引用，两个指向的是用一个地址，而require能看到的只有module.exports<h2 id=\"js模块包格式有哪些？🌟🌟🌟\"><a href=\"#js模块包格式有哪些？🌟🌟🌟\" class=\"headerlink\" title=\"js模块包格式有哪些？🌟🌟🌟\"></a>js模块包格式有哪些？🌟🌟🌟</h2>帮助理解 <a href=\"https://www.cnblogs.com/qdwz/p/10718536.html\">https://www.cnblogs.com/qdwz/p/10718536.html</a></li>\n<li>common.js<br>同步运行，不适合前端</li>\n<li>AMD<br>异步运行<br>异步模块定义，主要采用异步的方式加载模块，模块的加载不影响后面代码的执行。所有依赖这个模块的语句都写在一个回调函数中，模块加载完毕，再执行回调函数</li>\n<li>CMD<br>异步运行<br>seajs 规范<h2 id=\"ES6和commonjs的区别🌟🌟\"><a href=\"#ES6和commonjs的区别🌟🌟\" class=\"headerlink\" title=\"ES6和commonjs的区别🌟🌟\"></a>ES6和commonjs的区别🌟🌟</h2></li>\n<li>commonjs模块输出的是值的拷贝，而ES6输出的值是值的引用</li>\n<li>commonjs是在运行时加载，是一个对象，ES6是在编译时加载，是一个代码块</li>\n<li>commonjs的this指向当前模块，ES6的this指向undefined<h2 id=\"跨域的方式都有哪些？他们的特点是什么-🌟🌟🌟🌟🌟\"><a href=\"#跨域的方式都有哪些？他们的特点是什么-🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"跨域的方式都有哪些？他们的特点是什么 🌟🌟🌟🌟🌟\"></a>跨域的方式都有哪些？他们的特点是什么 🌟🌟🌟🌟🌟</h2><a href=\"https://blog.csdn.net/ligang2585116/article/details/73072868?locationNum=13&amp;fps=1\">https://blog.csdn.net/ligang2585116/article/details/73072868?locationNum=13&amp;fps=1</a><h2 id=\"HTTP的结构🌟🌟🌟🌟\"><a href=\"#HTTP的结构🌟🌟🌟🌟\" class=\"headerlink\" title=\"HTTP的结构🌟🌟🌟🌟\"></a>HTTP的结构🌟🌟🌟🌟</h2></li>\n<li>请求行 请求头 空行 请求体<br>请求行包括 http版本号，url，请求方式<br>响应行包括版本号，状态码，原因<h2 id=\"说说你知道的状态码🌟🌟🌟🌟🌟\"><a href=\"#说说你知道的状态码🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"说说你知道的状态码🌟🌟🌟🌟🌟\"></a>说说你知道的状态码🌟🌟🌟🌟🌟</h2></li>\n<li>2开头的表示成功<br>一般见到的就是200</li>\n<li>3开头的表示重定向<br>301永久重定向<br>302临时重定向<br>304表示可以在缓存中取数据（协商缓存）</li>\n<li>4开头表示客户端错误<br>403跨域<br>404请求资源不存在</li>\n<li>5开头表示服务端错误<br>500<h2 id=\"网络OSI七层模型都有哪些？TCP是哪一层的🌟🌟🌟🌟\"><a href=\"#网络OSI七层模型都有哪些？TCP是哪一层的🌟🌟🌟🌟\" class=\"headerlink\" title=\"网络OSI七层模型都有哪些？TCP是哪一层的🌟🌟🌟🌟\"></a>网络OSI七层模型都有哪些？TCP是哪一层的🌟🌟🌟🌟</h2>应用层<br>表示层<br>会话层<br>传输层<br>网络层<br>数据链路层<br>物理层<blockquote>\n<p>TCP属于传输层</p>\n<h2 id=\"http1-0和http1-1，还有http2有什么区别？🌟🌟🌟🌟\"><a href=\"#http1-0和http1-1，还有http2有什么区别？🌟🌟🌟🌟\" class=\"headerlink\" title=\"http1.0和http1.1，还有http2有什么区别？🌟🌟🌟🌟\"></a>http1.0和http1.1，还有http2有什么区别？🌟🌟🌟🌟</h2></blockquote>\n</li>\n<li>http0.9只能进行get请求</li>\n<li>http1.0添加了POST，HEAD，OPTION，PUT，DELETE等</li>\n<li>http1.1增加了长连接keep-alive，增加了host域，而且节约带宽</li>\n<li>http2 <h2 id=\"https和http有什么区别，https的实现原理？🌟🌟🌟🌟🌟\"><a href=\"#https和http有什么区别，https的实现原理？🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"https和http有什么区别，https的实现原理？🌟🌟🌟🌟🌟\"></a>https和http有什么区别，https的实现原理？🌟🌟🌟🌟🌟</h2></li>\n<li>http无状态无连接，而且是明文传输，不安全</li>\n<li>https传输内容加密，身份验证，保证数据完整性</li>\n<li>https实现原理⭐⭐⭐⭐⭐<br>首先客户端向服务端发起一个随机值，以及一个加密算法<br>服务端收到后返回一个协商好的加密算法，以及另一个随机值<br>服务端在发送一个公钥CA<br>客户端收到以后先验证CA是否有效，如果无效则报错弹窗，有过有效则进行下一步操作<br>客户端使用之前的两个随机值和一个预主密钥组成一个会话密钥，在通过服务端传来的公钥加密把会话密钥发送给服务端<br>服务端收到后使用私钥解密，得到两个随机值和预主密钥，然后组装成会话密钥<br>客户端在向服务端发起一条信息，这条信息使用会话秘钥加密，用来验证服务端时候能收到加密的信息<br>服务端收到信息后返回一个会话秘钥加密的信息<br>都收到以后SSL层连接建立成功<h2 id=\"localStorage、SessionStorage、cookie、session-之间有什么区别🌟🌟🌟🌟🌟\"><a href=\"#localStorage、SessionStorage、cookie、session-之间有什么区别🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"localStorage、SessionStorage、cookie、session 之间有什么区别🌟🌟🌟🌟🌟\"></a>localStorage、SessionStorage、cookie、session 之间有什么区别🌟🌟🌟🌟🌟</h2></li>\n<li>localStorage<br>生命周期：关闭浏览器后数据依然保留，除非手动清除，否则一直在<br>作用域：相同浏览器的不同标签在同源情况下可以共享localStorage</li>\n<li>SessionStorage<br>生命周期：关闭浏览器或者标签后即失效<br>作用域：只在当前标签可用，当前标签的iframe中且同源可以共享</li>\n<li>cookie<br>是保存在客户端的，一般由后端设置值，可以设置过期时间<br>储存大小只有4K<br>一般用来保存用户的信息的<br>在http下cookie是明文传输的,较不安全<blockquote>\n<p>cookie属性有：<br>http-only:不能被客户端更改访问，防止XSS攻击（保证cookie安全性的操作）<br>Secure：只允许在https下传输<br>Max-age: cookie生成后失效的秒数<br>expire: cookie的最长有效时间，若不设置则cookie生命期与会话期相同</p>\n</blockquote>\n</li>\n<li>session<br>session是保存在服务端的<br>session的运行依赖sessionId，而sessionId又保存在cookie中，所以如果禁用的cookie，session也是不能用的，不过硬要用也可以，可以把sessionId保存在URL中<br>session一般用来跟踪用户的状态<br>session 的安全性更高，保存在服务端，不过一般为使服务端性能更加，会考虑部分信息保存在cookie中<h2 id=\"怎么使用cookie保存用户信息🌟🌟🌟\"><a href=\"#怎么使用cookie保存用户信息🌟🌟🌟\" class=\"headerlink\" title=\"怎么使用cookie保存用户信息🌟🌟🌟\"></a>怎么使用cookie保存用户信息🌟🌟🌟</h2>document.cookie(“名字 = 数据;expire=时间”)<br><a href=\"https://bbs.csdn.net/topics/250052356\">https://bbs.csdn.net/topics/250052356</a><h2 id=\"怎么删除cookie🌟🌟🌟\"><a href=\"#怎么删除cookie🌟🌟🌟\" class=\"headerlink\" title=\"怎么删除cookie🌟🌟🌟\"></a>怎么删除cookie🌟🌟🌟</h2>目前没有提供删除的操作，但是可以把它的Max-age设置为0，也就是立马失效，也就是删除了<h2 id=\"get和post的区别🌟🌟🌟🌟🌟\"><a href=\"#get和post的区别🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"get和post的区别🌟🌟🌟🌟🌟\"></a>get和post的区别🌟🌟🌟🌟🌟</h2></li>\n<li>冪等/不冪等（可缓存/不可缓存）<br>get请求是冪等的，所以get请求的数据是可以缓存的<br>而post请求是不冪等的，查询查询对数据是有副作用的，是不可缓存的</li>\n<li>传参<br>get传参，参数是在url中的<br>准确的说get传参也可以放到body中，只不过不推荐使用<br>post传参，参数是在请求体中<br>准确的说post传参也可以放到url中，只不过不推荐使用</li>\n<li>安全性<br>get较不安全<br>post较为安全<br>准确的说两者都不安全，都是明文传输的，在路过公网的时候都会被访问到，不管是url还是header还是body，都会被访问到，要想做到安全，就需要使用https</li>\n<li>参数长度<br>get参数长度有限，是较小的<br>准确来说，get在url传参的时候是很小的<br>post传参长度不受限制</li>\n<li>发送数据<br>post传参发送两个请求包，一个是请求头，一个是请求体，请求头发送后服务器进行验证，要是验证通过的话就会给客户端发送一个100-continue的状态码，然后就会发送请求体</li>\n<li>字符编码<br>get在url上传输的时候只允许ASCII编码<h2 id=\"在浏览器输入url后发生了什么🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟\"><a href=\"#在浏览器输入url后发生了什么🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"在浏览器输入url后发生了什么🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟\"></a>在浏览器输入url后发生了什么🌟🌟🌟🌟🌟🌟🌟🌟🌟🌟</h2><a href=\"https://www.jianshu.com/p/7eea6fbc5fcd\">https://www.jianshu.com/p/7eea6fbc5fcd</a><br>1.浏览器的地址栏输入URL并按下回车。<br>2.浏览器查找当前URL是否存在缓存，并比较缓存是否过期。<br>3.DNS解析URL对应的IP。<br>4.根据IP建立TCP连接（三次握手）。<br>5.HTTP发起请求。<br>6.服务器处理请求，浏览器接收HTTP响应。<br>7.渲染页面，构建DOM树。<br>8.关闭TCP连接（四次挥手）。<h2 id=\"什么是xss？什么是csrf？🌟🌟🌟🌟🌟\"><a href=\"#什么是xss？什么是csrf？🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"什么是xss？什么是csrf？🌟🌟🌟🌟🌟\"></a>什么是xss？什么是csrf？🌟🌟🌟🌟🌟</h2></li>\n<li>xss脚本注入<br>不需要你做任何的登录认证，它会通过合法的操作（比如在url中输入、在评论框中输入），向你的页面注入脚本（可能是js、hmtl代码块等）。<br>防御<br>编码：对用户输入的数据进行HTML Entity 编码。把字符转换成 转义字符。Encode的作用是将$var等一些字符进行转化，使得浏览器在最终输出结果上是一样的。<br>过滤：移除用户输入的和事件相关的属性。</li>\n<li>csrf跨域请求伪造<br>在未退出A网站的前提下访问B，B使用A的cookie去访问服务器<br>防御：token，每次用户提交表单时需要带上token（伪造者访问不到），如果token不合法，则服务器拒绝请求<h2 id=\"什么是回流-什么是重绘？🌟🌟🌟🌟🌟\"><a href=\"#什么是回流-什么是重绘？🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"什么是回流 什么是重绘？🌟🌟🌟🌟🌟\"></a>什么是回流 什么是重绘？🌟🌟🌟🌟🌟</h2><blockquote>\n<p>渲染树（render树）是什么 <a href=\"https://zhuanlan.zhihu.com/p/121807893\">https://zhuanlan.zhihu.com/p/121807893</a><br>什么是回流 什么是重绘和区别<a href=\"https://www.jianshu.com/p/e081f9aa03fb\">https://www.jianshu.com/p/e081f9aa03fb</a></p>\n</blockquote>\n</li>\n<li>回流<br>render树中一部分或全部元素需要改变尺寸、布局、或着需要隐藏而需要重新构建，这个过程叫做回流<br>回流必将引起重绘</li>\n<li>重绘<br>render树中一部分元素改变，而不影响布局的，只影响外观的，比如颜色。该过程叫做重绘</li>\n<li>区别<br>回流必将引起重绘，而重绘不一定会引起回流。比如：只有颜色改变的时候就只会发生重绘而不会引起回流<br>当页面布局和几何属性改变时就需要回流<br>比如：添加或者删除可见的DOM元素，元素位置改变，元素尺寸改变——边距、填充、边框、宽度和高度，内容改变<h2 id=\"事件冒泡和事件捕捉有什么区别🌟🌟🌟🌟🌟\"><a href=\"#事件冒泡和事件捕捉有什么区别🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"事件冒泡和事件捕捉有什么区别🌟🌟🌟🌟🌟\"></a>事件冒泡和事件捕捉有什么区别🌟🌟🌟🌟🌟</h2></li>\n<li>事件冒泡<br>在addEventListener中的第三属性设置为false（默认）<br>从下至上（儿子至祖宗）执行</li>\n<li>事件捕获<br>在addEventListener中的第三属性设置为true<br>从上至下（祖宗到儿子）执行<h2 id=\"什么是防抖？什么是节流？手写一个🌟🌟🌟🌟🌟\"><a href=\"#什么是防抖？什么是节流？手写一个🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"什么是防抖？什么是节流？手写一个🌟🌟🌟🌟🌟\"></a>什么是防抖？什么是节流？手写一个🌟🌟🌟🌟🌟</h2><blockquote>\n<p>帮助理解防抖 <a href=\"https://blog.csdn.net/woshidamimi0/article/details/99705915\">https://blog.csdn.net/woshidamimi0/article/details/99705915</a></p>\n</blockquote>\n</li>\n<li>防抖<br>n秒后在执行该事件，若在n秒内被重复触发，则重新计时</li>\n<li>节流<br>n秒内只运行一次，若在n秒内重复触发，只有一次生效<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//防抖函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">func,delay</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arg = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(timeout) <span class=\"built_in\">clearTimeout</span>(timeout)</span><br><span class=\"line\">    timeout = <span class=\"built_in\">setTimeout</span> (<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      func(arg)</span><br><span class=\"line\">    &#125;,delay)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//立即执行防抖函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce2</span>(<span class=\"params\">func,delay</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(timer) <span class=\"built_in\">clearTimeout</span>(timer)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> callNow = !timer</span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;,delay)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(allNow) &#123; fn(args)&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//节流 时间戳</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">fn, wait</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> previous = <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> now = <span class=\"built_in\">Date</span>.now()</span><br><span class=\"line\">        <span class=\"keyword\">let</span> _this = <span class=\"built_in\">this</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (now - previous &gt; wait) &#123;</span><br><span class=\"line\">          fn.apply(_this, <span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">          previous = now</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//节流 定时器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle2</span>(<span class=\"params\">fn, wait</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> timer</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> _this = <span class=\"built_in\">this</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> args = <span class=\"built_in\">arguments</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timer) &#123;</span><br><span class=\"line\">          timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            timer = <span class=\"literal\">null</span></span><br><span class=\"line\">            fn.apply(_this, <span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">          &#125;, wait);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数柯里化原理🌟🌟🌟🌟🌟\"><a href=\"#函数柯里化原理🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"函数柯里化原理🌟🌟🌟🌟🌟\"></a>函数柯里化原理🌟🌟🌟🌟🌟</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> adder = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    args.push(...arguments)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> adder</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  adder.toString = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> args.reduce(<span class=\"function\">(<span class=\"params\">prev, curr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> prev + curr</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> adder</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = add(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = add(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(add(<span class=\"number\">1</span>, <span class=\"number\">2</span>)(<span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Function</span>.toString)</span><br></pre></td></tr></table></figure>\n<h2 id=\"什么是requestAnimationFrame？🌟🌟🌟🌟\"><a href=\"#什么是requestAnimationFrame？🌟🌟🌟🌟\" class=\"headerlink\" title=\"什么是requestAnimationFrame？🌟🌟🌟🌟\"></a>什么是requestAnimationFrame？🌟🌟🌟🌟</h2><blockquote>\n<p>帮助理解 <a href=\"https://www.jianshu.com/p/fa5512dfb4f5\">https://www.jianshu.com/p/fa5512dfb4f5</a><br>requestAnimationFrame请求数据帧可以用做动画执行<br>可以自己决定什么时机调用该回调函数<br>能保证每次频幕刷新的时候只被执行一次<br>页面被隐藏或者最小化的时候暂停执行，返回窗口继续执行，有效节省CPU</p>\n<h2 id=\"js常见的设计模式🌟🌟🌟🌟🌟\"><a href=\"#js常见的设计模式🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"js常见的设计模式🌟🌟🌟🌟🌟\"></a>js常见的设计模式🌟🌟🌟🌟🌟</h2><p>单例模式、工厂模式、构造函数模式、发布订阅者模式、迭代器模式、代理模式、观察者模式<br>工厂模式和构造函数模式的异同 <a href=\"https://blog.csdn.net/liumuye88888/article/details/115561044\">https://blog.csdn.net/liumuye88888/article/details/115561044</a><br>观察者模式和订阅者模式理解 <a href=\"https://zhuanlan.zhihu.com/p/351750593\">https://zhuanlan.zhihu.com/p/351750593</a></p>\n</blockquote>\n</li>\n<li>单例模式<br>保证一个类仅有一个实例，并提供一个访问它的全局访问点。<blockquote>\n<p>帮助理解单例模式 <a href=\"https://zhuanlan.zhihu.com/p/34754447\">https://zhuanlan.zhihu.com/p/34754447</a> 知乎</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//惰性单例</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeTool = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> _instance = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//私有变量</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> now = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    <span class=\"comment\">//公用属性和方法</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;处理时间工具库&#x27;</span>,</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getISODate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> now.toISOString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getUTCDate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> now.toUTCString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!_instance) &#123;</span><br><span class=\"line\">      _instance = <span class=\"keyword\">new</span> init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _instance;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"><span class=\"keyword\">let</span> instance1 = timeTool();</span><br><span class=\"line\"><span class=\"keyword\">let</span> instance2 = timeTool();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(instance1 === instance2); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>上面的timeTool实际是一个函数,——instance作为实例对象最开始赋值为null,init函数是其构造函数，用于实例化对象，立即执行函数返回的是匿名函数用于判断实例是否创建，只有当调用timeTool()时进行实例化，这就是惰性单例的应用,不在js加载时就进行实例化创建，而是在需要的时候再进行单例的创建。如果再次调用，那么返回的永远是第一次实例化后的实例对象</p>\n</blockquote>\n</li>\n<li>工厂模式<br>代替new创建一个对象，且这个对象像工厂制作一样，批量制作属性相同的实例对象（指向不同）<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFactory</span>(<span class=\"params\">name,age,gender</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>()</span><br><span class=\"line\">            obj.name = name</span><br><span class=\"line\">            obj.age = age</span><br><span class=\"line\">            obj.gender = gender</span><br><span class=\"line\">            obj.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                alert(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> obj</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> obj2 = createFactory(<span class=\"string\">&quot;小明&quot;</span>,<span class=\"number\">18</span>,<span class=\"string\">&quot;男&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> obj3 = createFactory(<span class=\"string\">&quot;小红&quot;</span>,<span class=\"number\">12</span>,<span class=\"string\">&quot;女&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> obj4 = createFactory(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">16</span>,<span class=\"string\">&quot;男&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(obj2);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(obj3);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(obj4);</span><br></pre></td></tr></table></figure>\n<h2 id=\"JS性能优化的方式🌟🌟🌟🌟🌟\"><a href=\"#JS性能优化的方式🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"JS性能优化的方式🌟🌟🌟🌟🌟\"></a>JS性能优化的方式🌟🌟🌟🌟🌟</h2>避免使用全局变量<br>图片优化(雪碧图)<br>懒加载<br>垃圾回收<br>闭包中的对象清除<br>防抖节流<br>分批加载（setInterval,加载10000个节点）<br>事件委托<br>少用with<br>requestAnimationFrame的使用<br>script标签中的defer和async<br>CDN<h2 id=\"vue数据劫持\"><a href=\"#vue数据劫持\" class=\"headerlink\" title=\"vue数据劫持\"></a>vue数据劫持</h2><blockquote>\n<p>帮助理解 <a href=\"https://yuchengkai.cn/docs/frontend/framework.html#mvvm\">https://yuchengkai.cn/docs/frontend/framework.html#mvvm</a><br>vue.js是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter,getter,在数据变动时发布消息给订阅者，触发相应的监听回调</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"阐述一下你所理解的MVVM响应式原理🌟🌟🌟🌟🌟\"><a href=\"#阐述一下你所理解的MVVM响应式原理🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"阐述一下你所理解的MVVM响应式原理🌟🌟🌟🌟🌟\"></a>阐述一下你所理解的MVVM响应式原理🌟🌟🌟🌟🌟</h2><p>Vue 采用数据劫持结合发布者-订阅者模式的方式通过 Object.defineProperty() 劫持并监听各个属性的 setter 和 getter，在数据变动时，发布消息给依赖收集器，通知观察者，调用相应的回调函数，进而更新视图<br>MVVM 作为入口函数，整合 Observer、Compile、Watcher 三者，通过 Observer 监听数据变化，通过 Compile 解析编译模版指令，通过 Watcher 连接 Observer 和 Compile ，达到数据更新时视图更新，视图交互更新时数据更新的双向绑定效果<br><img src=\"https://s2.loli.net/2022/02/22/WDg96E4QKujohtq.png\" alt><br>订阅器(dep)：通知订阅者更新视图，存放多个订阅器<br>订阅者(watcher)：更新视图<br>observer：劫持属性<br>compile：解析指令<br>原文链接：<a href=\"https://www.cnblogs.com/veinyin/p/12640058.html\">https://www.cnblogs.com/veinyin/p/12640058.html</a></p>\n<h2 id=\"vue生命周期🌟🌟🌟🌟🌟\"><a href=\"#vue生命周期🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"vue生命周期🌟🌟🌟🌟🌟\"></a>vue生命周期🌟🌟🌟🌟🌟</h2><p> <img src=\"https://s2.loli.net/2022/02/23/1XtwjIMDAJxUvPY.png\" alt=\"vue生命周期\"></p>\n<ul>\n<li>beforeCreate<br>创建之前还没有data和model</li>\n<li>created<br>创建完成，此时data和method可以使用了<br>在created之后beforeMount之前如果没有el选项的话那么此时生命周期结束,停止编译，如果有则继续</li>\n<li>beforeMount<br>在渲染之前</li>\n<li>mounted<br>页面已经渲染完成，并且vm实例已经添加完成$el,已经替换掉哪些dom元素（双括号中的变量），这个时候可以操作DOM了（但是是获取不了元素的高度等属性的，如果想要获取，需要使用nextTick()（仅在整个视图都被渲染之后才会运行的代码））</li>\n<li>beforeUpdate<br><code>data</code>改变后，对应的组件重新渲染之前</li>\n<li>updated<br><code>data</code>改变后，对应的组件渲染完成</li>\n<li>activated<br>被 keep-alive 缓存的组件激活时调用。<br>该钩子在服务器端渲染期间不被调用。</li>\n<li>beforeDestory<br>在实例销毁之前，此实例仍然可以使用</li>\n<li>destoryed<br>实例销毁后<h2 id=\"vue-router的模式🌟🌟🌟🌟🌟\"><a href=\"#vue-router的模式🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"vue-router的模式🌟🌟🌟🌟🌟\"></a>vue-router的模式🌟🌟🌟🌟🌟</h2>Vue-router 中hash模式和history模式的区别  <a href=\"https://zhuanlan.zhihu.com/p/337073166\">https://zhuanlan.zhihu.com/p/337073166</a></li>\n<li>hash模式<br>监听hashchange事件实现前端路由，利用url中的hash来模拟一个hash，以保证url改变时，页面不会重新加载。</li>\n<li>history模式<br>利用pushstate和replacestate来将url替换但不刷新，但是有一个致命点就是，一旦刷新的话，就会可能404，因为没有当前的真正路径，要想解决这一问题需要后端配合，将不存在的路径重定向到入口文件。<h2 id=\"什么是diff算法🌟🌟🌟🌟🌟\"><a href=\"#什么是diff算法🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"什么是diff算法🌟🌟🌟🌟🌟\"></a>什么是diff算法🌟🌟🌟🌟🌟</h2>diff算法是指新旧虚拟dom节点进行对比，并返回一个patch对象，用来存储两个节点不同的地方，最后利用patch记录的消息局部更新dom<br><img src=\"https://s2.loli.net/2022/02/22/qTF1cHUbtO7dp9M.png\" alt=\"diff\"><h2 id=\"虚拟dom的优缺点🌟🌟🌟🌟🌟\"><a href=\"#虚拟dom的优缺点🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"虚拟dom的优缺点🌟🌟🌟🌟🌟\"></a>虚拟dom的优缺点🌟🌟🌟🌟🌟</h2></li>\n<li>缺点<br>首次渲染大量dom时，由于多了一层虚拟dom的计算，会比innerHtml插入慢</li>\n<li>优点<br>减少dom操作，减少了回流与重绘<br>能跨平台渲染：因为虚拟DOM本质只是一个JS对象，所以虚拟DOM不仅可以改变DOM，还可以变成小程序，iOS应用，安卓应用等<br>保证了性能的下限，虽然性能不是最佳，但是它具备局部更新的能力，所以大部分的时候还是比正常的dom性能好很多<h2 id=\"Vue的Key的作用🌟🌟🌟🌟🌟\"><a href=\"#Vue的Key的作用🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"Vue的Key的作用🌟🌟🌟🌟🌟\"></a>Vue的Key的作用🌟🌟🌟🌟🌟</h2>key主要是用于虚拟dom算法中，每个虚拟节点有一个唯一标识key，通过对比新旧节点的key来判断节点是否改变，用key就可以大大提高渲染效率，这个key类似于缓存中的etag。<br><img src=\"https://s2.loli.net/2022/02/22/6Ww8G2aJAtLRED3.png\" alt=\"key\"><h2 id=\"Vue组件之间的通信方式🌟🌟🌟🌟🌟\"><a href=\"#Vue组件之间的通信方式🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"Vue组件之间的通信方式🌟🌟🌟🌟🌟\"></a>Vue组件之间的通信方式🌟🌟🌟🌟🌟</h2>组件通信大全 <a href=\"https://www.cnblogs.com/fundebug/p/10884896.html\">https://www.cnblogs.com/fundebug/p/10884896.html</a></li>\n<li>父传子<br>子组件通过props接受父组件传递的值</li>\n<li>子传父<br>子组件$emit(‘事件名’,值)，父组件v-on/@接收</li>\n<li>任意组件通信，新建一个空的全局Vue对象，利用emit发送，emit发送，on接收<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.prototype.Event=<span class=\"keyword\">new</span> Vue();</span><br><span class=\"line\">Event.$emit(事件名,数据);</span><br><span class=\"line\">Event.$on(事件名,<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>\nvuex也可以传值<h2 id=\"Vue-router有哪几种钩子函数\"><a href=\"#Vue-router有哪几种钩子函数\" class=\"headerlink\" title=\"Vue-router有哪几种钩子函数\"></a>Vue-router有哪几种钩子函数</h2>参考 <a href=\"https://www.jianshu.com/p/ddcb7ba28c5e\">https://www.jianshu.com/p/ddcb7ba28c5e</a><br><a href=\"https://www.zhihu.com/search?type=content&amp;q=%E8%B7%AF%E7%94%B1%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0\">https://www.zhihu.com/search?type=content&amp;q=%E8%B7%AF%E7%94%B1%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0</a></li>\n<li>全局钩子<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96;afterEach进&#96;&#96;&#96;入之后触发</span><br><span class=\"line\">beforeResolve</span><br><span class=\"line\">每个守卫方法接收三个参数：</span><br><span class=\"line\">①to: Route: 即将要进入的目标路由对象（to是一个对象，是将要进入的路由对象，可以用to.path调用路由对象中的属性）</span><br><span class=\"line\">②from: Route: 当前导航正要离开的路由</span><br><span class=\"line\">③next: Function: 这是一个必须需要调用的方法，执行效果依赖 next 方法的调用参数</span><br><span class=\"line\">- 单个路由里面的钩子 </span><br><span class=\"line\">&#96;&#96;&#96;beforeEnter&#96;&#96;&#96;写在路由配置中，只有访问到这个路径，才能触发钩子函数</span><br><span class=\"line\">- 组件路由</span><br><span class=\"line\">1.&#96;beforeRouteEnter&#96;</span><br><span class=\"line\">在渲染该组件的对应路由被 confirm 前调用</span><br><span class=\"line\">不！能！获取组件实例 &#96;this&#96;</span><br><span class=\"line\">因为当钩子执行前，组件实例还没被创建</span><br><span class=\"line\">2.&#96;beforeRouteUpdate&#96;</span><br><span class=\"line\">在当前路由改变，但是该组件被复用时调用</span><br><span class=\"line\">举例来说，对于一个带有动态参数的路径 &#x2F;foo&#x2F;:id，在 &#x2F;foo&#x2F;1 和 &#x2F;foo&#x2F;2 之间跳转的时候，</span><br><span class=\"line\">由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span><br><span class=\"line\">可以访问组件实例 &#96;this&#96;</span><br><span class=\"line\">3.&#96;beforeRouteLeave&#96;</span><br><span class=\"line\">导航离开该组件的对应路由时调用</span><br><span class=\"line\">可以访问组件实例 &#96;this&#96;</span><br><span class=\"line\">## webpack常用的几个对象及解释🌟🌟🌟🌟</span><br><span class=\"line\">- entry(嗯锤) 入口文件</span><br><span class=\"line\">- output(奥t铺t)输出文件</span><br><span class=\"line\">一般配合node的path模块使用</span><br><span class=\"line\">&#96;&#96;&#96;javaScript</span><br><span class=\"line\"> &#x2F;&#x2F; 入口文件</span><br><span class=\"line\">    entry:&quot;.&#x2F;src&#x2F;index.js&quot;,</span><br><span class=\"line\">    output:&#123;</span><br><span class=\"line\">        &#x2F;&#x2F; 输出文件名称</span><br><span class=\"line\">        filename:&quot;bundle.js&quot;,</span><br><span class=\"line\">        &#x2F;&#x2F; 输出的路径（绝对路径）</span><br><span class=\"line\">        path:path.resolve(__dirname,&quot;dist&quot;) &#x2F;&#x2F;利用node模块的path 绝对路径</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#x2F;&#x2F; 设置模式</span><br><span class=\"line\">    mode:&quot;development&quot;</span><br></pre></td></tr></table></figure></li>\n<li>mode设计模式</li>\n<li>module（loader）<br>里面有一个rules数组对某种格式的文件进行转换处理（转换规则）<br>use数组解析顺序是从下到上逆序执行的<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">       <span class=\"comment\">// 对某种格式的文件进行转换处理（转换规则）</span></span><br><span class=\"line\">       rules:[</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               <span class=\"comment\">// 用到正则表达式</span></span><br><span class=\"line\">               test:<span class=\"regexp\">/\\.css$/</span>,      <span class=\"comment\">//后缀名为css格式的文件</span></span><br><span class=\"line\">               use:[</span><br><span class=\"line\">                   <span class=\"comment\">// use数组解析顺序是从下到上逆序执行的</span></span><br><span class=\"line\">                   <span class=\"comment\">// 先用css-loader 再用style-loader</span></span><br><span class=\"line\">                   <span class=\"comment\">// 将js的样式内容插入到style标签里</span></span><br><span class=\"line\">                   <span class=\"string\">&quot;style-loader&quot;</span>,</span><br><span class=\"line\">                   <span class=\"comment\">// 将css文件转换为js</span></span><br><span class=\"line\">                   <span class=\"string\">&quot;css-loader&quot;</span></span><br><span class=\"line\">               ]</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       ]</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// -----------------------------------------------------vue的</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=&#123;</span><br><span class=\"line\">    <span class=\"built_in\">module</span>:&#123;</span><br><span class=\"line\">        rules:[</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">                use:[<span class=\"string\">&quot;vue-loader&quot;</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>plugin(铺类根)插件配置<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> uglifyJsPlugin = reqiure(<span class=\"string\">&#x27;uglifyjs-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=&#123;</span><br><span class=\"line\">\tplugin:[</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> uglifyJsPlugin()\t<span class=\"comment\">//丑化</span></span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>devServer(热更新)<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">devServer:&#123;</span><br><span class=\"line\">       <span class=\"comment\">// 项目构建路径</span></span><br><span class=\"line\">       contentBase:path.resolve(__dirname,<span class=\"string\">&quot;dist&quot;</span>),</span><br><span class=\"line\">       <span class=\"comment\">// 启动gzip亚索</span></span><br><span class=\"line\">       compress:<span class=\"literal\">true</span>,</span><br><span class=\"line\">       <span class=\"comment\">// 设置端口号</span></span><br><span class=\"line\">       port:<span class=\"number\">2020</span>,</span><br><span class=\"line\">       <span class=\"comment\">// 自动打开浏览器:否</span></span><br><span class=\"line\">       open:<span class=\"literal\">false</span>,</span><br><span class=\"line\">       <span class=\"comment\">//页面实时刷新(实时监听)</span></span><br><span class=\"line\">       inline:<span class=\"literal\">true</span></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></li>\n<li>resolve(配置路径规则)<br>alias 别名<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports= &#123;</span><br><span class=\"line\">\tresolve:&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果导入的时候不想写后缀名可以在resolve中定义extensions</span></span><br><span class=\"line\">\t\textensions:[<span class=\"string\">&#x27;.js&#x27;</span>,<span class=\"string\">&#x27;.css&#x27;</span>,<span class=\"string\">&#x27;.vue&#x27;</span>]</span><br><span class=\"line\">\t\t<span class=\"comment\">//alias:别名</span></span><br><span class=\"line\">\t\talias:&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//导入以vue结尾的文件时，会去寻找vue.esm.js文件</span></span><br><span class=\"line\">\t\t\t<span class=\"string\">&#x27;vue$&#x27;</span>:<span class=\"string\">&quot;vue/dist/vue.esm.js&quot;</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>babel（ES6转ES5）<br>下载插件babel-loader,在module（loader）中配置<h2 id=\"loader和plugin的区别是什么？🌟🌟🌟\"><a href=\"#loader和plugin的区别是什么？🌟🌟🌟\" class=\"headerlink\" title=\"loader和plugin的区别是什么？🌟🌟🌟\"></a>loader和plugin的区别是什么？🌟🌟🌟</h2></li>\n<li>loader<br>loader是用来解析非js文件的，因为Webpack原生只能解析js文件，如果想把那些文件一并打包的话，就需要用到loader，loader使webpack具有了解析非js文件的能力</li>\n<li>plugin<br>用来给webpack扩展功能的，可以加载许多插件<h2 id=\"flext布局🌟🌟🌟🌟🌟\"><a href=\"#flext布局🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"flext布局🌟🌟🌟🌟🌟\"></a>flext布局🌟🌟🌟🌟🌟</h2>阮一峰 <a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a><h2 id=\"grid布局🌟🌟🌟🌟\"><a href=\"#grid布局🌟🌟🌟🌟\" class=\"headerlink\" title=\"grid布局🌟🌟🌟🌟\"></a>grid布局🌟🌟🌟🌟</h2><a href=\"https://www.cnblogs.com/cythia/p/10894598.html\">https://www.cnblogs.com/cythia/p/10894598.html</a><h2 id=\"first-of-type和first-child有什么区别🌟🌟🌟🌟\"><a href=\"#first-of-type和first-child有什么区别🌟🌟🌟🌟\" class=\"headerlink\" title=\"first-of-type和first-child有什么区别🌟🌟🌟🌟\"></a>first-of-type和first-child有什么区别🌟🌟🌟🌟</h2><a href=\"https://www.cnblogs.com/2050/p/3569509.html\">https://www.cnblogs.com/2050/p/3569509.html</a></li>\n<li>first-of-type<br>匹配的是从第一个子元素开始数，匹配到的那个的第一个元素</li>\n<li>first-child<br>必须是第一个元素<h2 id=\"doctype标签和meta标签🌟🌟🌟🌟🌟\"><a href=\"#doctype标签和meta标签🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"doctype标签和meta标签🌟🌟🌟🌟🌟\"></a>doctype标签和meta标签🌟🌟🌟🌟🌟</h2></li>\n<li>doctype<br>告诉浏览器以什么样的文档规范解析文档 &lt;!DOCTYPE html&gt;</li>\n<li>meta<br>最简单的理解就是设置这个页面的编码格式，不然会出现中英文乱码<h2 id=\"script标签中defer和async都表示了什么🌟🌟🌟🌟🌟\"><a href=\"#script标签中defer和async都表示了什么🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"script标签中defer和async都表示了什么🌟🌟🌟🌟🌟\"></a>script标签中defer和async都表示了什么🌟🌟🌟🌟🌟</h2>帮助理解 <a href=\"https://www.cnblogs.com/jiasm/p/7683930.html\">https://www.cnblogs.com/jiasm/p/7683930.html</a><br>众所周知script会阻塞页面的加载，如果我们要是引用外部js，假如这个外部js请求很久的话就难免出现空白页问题，好在官方为我们提供了defer和async</li>\n<li>defer<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">&quot;d.js&quot;</span> defer&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">&quot;e.js&quot;</span> defer&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n不会阻止页面解析，并行下载对应的js文件<br>下载完之后不会执行<br>等所有其他脚本加载完之后，在DOMContentLoaded事件之前执行对应d.js、e.js</li>\n<li>async<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">&quot;b.js&quot;</span> <span class=\"keyword\">async</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">&quot;c.js&quot;</span> <span class=\"keyword\">async</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n不会阻止DOM解析，并下载对应的js文件<br>下载完之后立即执行</li>\n<li>补充，DOMContentLoaded事件<br>是等HTML文档完全加载完和解析完之后运行的事件<br>在load事件之前<br>不用等样式表、图像等完成加载<h2 id=\"什么是BFC🌟🌟🌟🌟🌟\"><a href=\"#什么是BFC🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"什么是BFC🌟🌟🌟🌟🌟\"></a>什么是BFC🌟🌟🌟🌟🌟</h2>帮助理解  <a href=\"https://zhuanlan.zhihu.com/p/184905483\">https://zhuanlan.zhihu.com/p/184905483</a></li>\n<li>BFC是一个独立渲染区域，它丝毫不会影响到外部元素</li>\n<li>BFC特性<br>同一个BFC下的margin会重叠<br>计算BFC高度时会算上浮动元素<br>BFC不会影响到外部元素<br>BFC内部元素是垂直排列的<br>BFC区域不会与float元素重叠</li>\n<li>如何创建BFC<br>position设为absolute或者fixed<br>float不为none<br>overflow设置为hidden<br>display设置为inline-block或者inline-table或flex<h2 id=\"如何清除浮动🌟🌟🌟🌟🌟\"><a href=\"#如何清除浮动🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"如何清除浮动🌟🌟🌟🌟🌟\"></a>如何清除浮动🌟🌟🌟🌟🌟</h2></li>\n<li>1.额外标签clear:both<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">&quot;en&quot;</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span><br><span class=\"line\">    &lt;meta name=<span class=\"string\">&quot;viewport&quot;</span> content=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> content=<span class=\"string\">&quot;ie=edge&quot;</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">    &lt;style&gt;</span><br><span class=\"line\">    .fahter&#123;</span><br><span class=\"line\">        width: 400px;</span><br><span class=\"line\">        border: 1px solid deeppink;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .big&#123;</span><br><span class=\"line\">        width: 200px;</span><br><span class=\"line\">        height: 200px;</span><br><span class=\"line\">        background: darkorange;</span><br><span class=\"line\">        float: left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .small&#123;</span><br><span class=\"line\">        width: 120px;</span><br><span class=\"line\">        height: 120px;</span><br><span class=\"line\">        background: darkmagenta;</span><br><span class=\"line\">        float: left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .clear&#123;</span><br><span class=\"line\">        clear:both;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;fahter&quot;</span>&gt;</span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;big&quot;</span>&gt;big&lt;/div&gt;</span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;small&quot;</span>&gt;small&lt;/div&gt;</span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;clear&quot;</span>&gt;额外标签法&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>2.利用BFC<br><code>overflow:hidden || auto</code><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.fahter</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid deeppink;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>3.给前面的父元素设置高度,不推荐使用</li>\n<li>4.使用after(推荐)<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\">  &lt;style&gt;</span><br><span class=\"line\">    <span class=\"selector-class\">.clearfix</span>:after&#123;/*伪元素是行内元素 正常浏览器清除浮动方法*/</span><br><span class=\"line\">        content: <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"attribute\">clear</span>:both;</span><br><span class=\"line\">        <span class=\"attribute\">visibility</span>: hidden;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-class\">.clearfix</span>&#123;</span><br><span class=\"line\">        *zoom: <span class=\"number\">1</span>;<span class=\"comment\">/*ie6清除浮动的方式 *号只有IE6-IE7执行，其他浏览器不执行*/</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*ie6-7不支持伪元素：after，使用zoom:1触发hasLayout.*/</span></span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">body</span>&gt;</span><br><span class=\"line\">    &lt;div class=&quot;fahter clearfix&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;big&quot;&gt;big&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;small&quot;&gt;small&lt;/div&gt;</span><br><span class=\"line\">        &lt;!--&lt;div class=&quot;clear&quot;&gt;额外标签法&lt;/div&gt;--&gt;</span><br><span class=\"line\">    &lt;/<span class=\"selector-tag\">div</span>&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>5.使用before和after双伪元素清除浮动<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">    .clearfix:after,.clearfix:before&#123;</span><br><span class=\"line\">       content: <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">       display: table;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   .clearfix:after&#123;</span><br><span class=\"line\">       clear: both;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   .clearfix&#123;</span><br><span class=\"line\">       *zoom: <span class=\"number\">1</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;fahter clearfix&quot;</span>&gt;</span><br><span class=\"line\">       &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;big&quot;</span>&gt;big&lt;/div&gt;</span><br><span class=\"line\">       &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;small&quot;</span>&gt;small&lt;/div&gt;</span><br><span class=\"line\">   &lt;/div&gt;</span><br><span class=\"line\">   &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;footer&quot;</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"垂直水平居中的几种方法🌟🌟🌟🌟🌟\"><a href=\"#垂直水平居中的几种方法🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"垂直水平居中的几种方法🌟🌟🌟🌟🌟\"></a>垂直水平居中的几种方法🌟🌟🌟🌟🌟</h2><ul>\n<li>1.第一种方法<br>子元素绝对定位，上下左右为0，margin：auto；<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">&quot;en&quot;</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span><br><span class=\"line\">  &lt;meta http-equiv=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> content=<span class=\"string\">&quot;IE=edge&quot;</span>&gt;</span><br><span class=\"line\">  &lt;meta name=<span class=\"string\">&quot;viewport&quot;</span> content=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class=\"line\">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">  &lt;style&gt;</span><br><span class=\"line\">    *&#123;</span><br><span class=\"line\">      margin: <span class=\"number\">0</span>;</span><br><span class=\"line\">      padding: <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    body,</span><br><span class=\"line\">    html&#123;</span><br><span class=\"line\">      width: <span class=\"number\">100</span>%;</span><br><span class=\"line\">      height: <span class=\"number\">100</span>%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #demo&#123;</span><br><span class=\"line\">      width: 200px;</span><br><span class=\"line\">      height: 200px;</span><br><span class=\"line\">      border: 1px solid red;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">      left: <span class=\"number\">0</span>;</span><br><span class=\"line\">      right: <span class=\"number\">0</span>;</span><br><span class=\"line\">      top: <span class=\"number\">0</span>;</span><br><span class=\"line\">      bottom: <span class=\"number\">0</span>;</span><br><span class=\"line\">      margin: auto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">&quot;demo&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>\n<li>2.弹性布局<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">&quot;en&quot;</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span><br><span class=\"line\">  &lt;meta http-equiv=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> content=<span class=\"string\">&quot;IE=edge&quot;</span>&gt;</span><br><span class=\"line\">  &lt;meta name=<span class=\"string\">&quot;viewport&quot;</span> content=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class=\"line\">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">  &lt;style&gt;</span><br><span class=\"line\">    *&#123;</span><br><span class=\"line\">      margin: <span class=\"number\">0</span>;</span><br><span class=\"line\">      padding: <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    body,</span><br><span class=\"line\">    html&#123;</span><br><span class=\"line\">      width: <span class=\"number\">100</span>%;</span><br><span class=\"line\">      height: <span class=\"number\">100</span>%;</span><br><span class=\"line\">      display: flex;</span><br><span class=\"line\">      justify-content: center;</span><br><span class=\"line\">      align-items: center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #demo&#123;</span><br><span class=\"line\">      width: 200px;</span><br><span class=\"line\">      height: 200px;</span><br><span class=\"line\">      border: 1px solid red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">&quot;demo&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>\n<li>3.定位 + margin-top + margin-left<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">&quot;en&quot;</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span><br><span class=\"line\">  &lt;meta http-equiv=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> content=<span class=\"string\">&quot;IE=edge&quot;</span>&gt;</span><br><span class=\"line\">  &lt;meta name=<span class=\"string\">&quot;viewport&quot;</span> content=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class=\"line\">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">  &lt;style&gt;</span><br><span class=\"line\">    *&#123;</span><br><span class=\"line\">      margin: <span class=\"number\">0</span>;</span><br><span class=\"line\">      padding: <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    body,</span><br><span class=\"line\">    html&#123;</span><br><span class=\"line\">      width: <span class=\"number\">100</span>%;</span><br><span class=\"line\">      height: <span class=\"number\">100</span>%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #demo&#123;</span><br><span class=\"line\">      width: 200px;</span><br><span class=\"line\">      height: 200px;</span><br><span class=\"line\">      border: 1px solid red;</span><br><span class=\"line\">      position: relative;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #demoSon&#123;</span><br><span class=\"line\">      width: 20px;</span><br><span class=\"line\">      height: 20px;</span><br><span class=\"line\">      position: absolute;</span><br><span class=\"line\">      border: 1px solid blue;</span><br><span class=\"line\">      top: <span class=\"number\">50</span>%;</span><br><span class=\"line\">      left: <span class=\"number\">50</span>%;</span><br><span class=\"line\">      margin-top: -10px;</span><br><span class=\"line\">      margin-left: -10px;</span><br><span class=\"line\"></span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=<span class=\"string\">&quot;demo&quot;</span>&gt;</span><br><span class=\"line\">      &lt;div id=<span class=\"string\">&quot;demoSon&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n设置父元素的position为相对定位，子元素绝对定位，并在 top 和 left 方向上移动父元素50%的距离。<br>但这个时候，是子元素的上边框和左边框距离父元素150px，整体向右下角偏了一些，所以还需要再用 margin 调整至中心位置，数值分别是高度和宽度的一半。</li>\n<li>4.display: table-cell 无兼容性问题(文字居中)<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: table-cell;\t</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>: center;\t</span><br><span class=\"line\">\t<span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n只需要设置父元素即可，text-align: center; 并在竖直方向上令内容居中（middle），早期属性，不存在兼容问题。<h2 id=\"什么是DOM事件流？什么是事件委托🌟🌟🌟🌟🌟\"><a href=\"#什么是DOM事件流？什么是事件委托🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"什么是DOM事件流？什么是事件委托🌟🌟🌟🌟🌟\"></a>什么是DOM事件流？什么是事件委托🌟🌟🌟🌟🌟</h2></li>\n<li>DOM时间流分成三个阶段<br>捕获阶段<br>目标阶段<br>冒泡阶段<br>在addeventListener()的第三个参数(useCapture)设为true，就会在捕获阶段运行，默认是false冒泡</li>\n<li>事件委托<br>利用冒泡原理（子向父一层层穿透），把事件绑定到父元素中，以实现事件委托<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><blockquote>\n<p>排序算法动画网站  <a href=\"https://math.hws.edu/eck/js/sorting/xSortLab.html\">https://math.hws.edu/eck/js/sorting/xSortLab.html</a></p>\n</blockquote>\n</li>\n<li>1.冒泡排序🌟🌟🌟🌟🌟<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>;j&lt;arr.length;j++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(arr[j] &gt; arr[j+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp = arr[j];</span><br><span class=\"line\">        arr[j] = arr[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">        arr[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">        <span class=\"comment\">// [arr[j],arr[j+1]] = [arr[j+1],arr[j]] es6结构赋值</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> Arr = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">99</span>,<span class=\"number\">22</span>,<span class=\"number\">44</span>,<span class=\"number\">1</span>,<span class=\"number\">34</span>,<span class=\"number\">13</span>,<span class=\"number\">55</span>];</span><br><span class=\"line\">bubbleSort(Arr);</span><br></pre></td></tr></table></figure></li>\n<li><p>2.快速排序🌟🌟🌟🌟🌟<br>从数组中选择一个元素作为基准点<br>排序数组，所有比基准值小的元素摆放在左边，而大于基准值的摆放在右边。每次分割结束以后基准值会插入到中间去。<br>最后利用递归，将摆放在左边的数组和右边的数组在进行一次上述的1和2操作。</p>\n<blockquote>\n<p>帮助理解 <a href=\"https://segmentfault.com/a/1190000017814119\">https://segmentfault.com/a/1190000017814119</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(arr.lenght &lt;= <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> middle = <span class=\"built_in\">Math</span>.floor(arr.length/<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> middleData = arr.splice(middle,<span class=\"number\">1</span>)[<span class=\"number\">0</span>];<span class=\"comment\">//基准值</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> left = [];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> right = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr[i]&lt;middleData)&#123;</span><br><span class=\"line\">      left.push(arr[i])</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      right.push(arr[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> quickSort(left).concat([moddleData],quickSort(right))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Arr = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">0</span>,<span class=\"number\">13</span>,<span class=\"number\">11</span>,<span class=\"number\">44</span>,<span class=\"number\">33</span>,<span class=\"number\">22</span>,<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr = quickSort(Arr)</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>3.插入排序🌟🌟🌟🌟</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertSort</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 默认从索引1开始</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr[i] &lt; arr[i -<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> el = arr[i];</span><br><span class=\"line\">      arr[i] = arr[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">      <span class=\"keyword\">var</span> j = j -<span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span>(j &gt;=<span class=\"number\">0</span> &amp;&amp; arr[j] &gt; el)&#123;</span><br><span class=\"line\">        arr[j + <span class=\"number\">1</span>] = arr[j]</span><br><span class=\"line\">        j--</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      arr[j+<span class=\"number\">1</span>] = el</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Arr = [<span class=\"number\">9</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\">insertSort(Arr)</span><br></pre></td></tr></table></figure></li>\n<li>4.是否回文🌟🌟🌟🌟🌟<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isHuiWen</span>(<span class=\"params\">str</span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> str == str.split(<span class=\"string\">&#x27;&#x27;</span>).reverse().join(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;nun&#x27;</span>;</span><br><span class=\"line\">isHuiWen(str)</span><br></pre></td></tr></table></figure></li>\n<li>5.斐波那契数列🌟🌟🌟🌟🌟<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// num1前一项</span></span><br><span class=\"line\"><span class=\"comment\">// num2当前项</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fb</span>(<span class=\"params\">n, num1 = <span class=\"number\">1</span>, num2 = <span class=\"number\">1</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num2</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fb(n - <span class=\"number\">1</span>, num2, num1 + num2)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"git-🌟🌟🌟🌟🌟\"><a href=\"#git-🌟🌟🌟🌟🌟\" class=\"headerlink\" title=\"git 🌟🌟🌟🌟🌟\"></a>git 🌟🌟🌟🌟🌟</h2><a href=\"https://blog.csdn.net/qq_36095679/article/details/91804051\">https://blog.csdn.net/qq_36095679/article/details/91804051</a></li>\n</ul>\n","categories":["Js","Vue","HTML CSS","Git"],"tags":["Vue","Js","HTML CSS","Git"]},{"title":"vue.js与vue.runtime.xxx.js的区别","url":"/blog/2022/02/11/vue.js%E4%B8%8Evue.runtime.xxx.js%E7%9A%84%E5%8C%BA%E5%88%AB/","content":"<p>vue.js是完整版的vue，包含：核心功能+模版解析器<br>\nvue.runtime.xxx.js是运行版的vue只包含：核心功能，没有模版解析器<br>\nvue.runtime.xxx.js体积更小！<br>\n因为vue.runtime.xxx.js没有模版解析器,所以不能使用template配置项,需要使用render函数接收到的createElement函数去指定具体内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建Vue实例对象-vm</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el:<span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 将APP组件放入容器</span></span><br><span class=\"line\">    <span class=\"comment\">// render是个函数，vue帮调</span></span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App),</span><br><span class=\"line\">  <span class=\"comment\">// template:`&lt;p&gt;123&lt;/p&gt;`</span></span><br><span class=\"line\">  <span class=\"comment\">// components:&#123;App&#125;,//完整版可用</span></span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n","categories":["Vue"],"tags":["Vue"]},{"title":"vue中组件的data为什么是一个函数","url":"/blog/2022/02/11/vue%E4%B8%AD%E7%BB%84%E4%BB%B6%E7%9A%84data%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0/","content":"<p>组件是可复用的,一个组件被创建好之后,就可能被用在多个地方,组件不管复用多少次,组件中的data数据都应该是相互隔离的,互不影响，基于这一理念，组件每复用一次，data就复制一份,之后，当某一处复用的地方组件内data数据改变时，其他复用地方的组件data数据不受影响.</p>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/wangjiachen666/p/9876266.html\">https://www.cnblogs.com/wangjiachen666/p/9876266.html</a></p>\n</blockquote>\n","categories":["Vue"],"tags":["Vue"]},{"title":"vue中一个重要的内置关系","url":"/blog/2022/02/11/vue%E4%B8%AD%E4%B8%80%E4%B8%AA%E9%87%8D%E8%A6%81%E7%9A%84%E5%86%85%E7%BD%AE%E5%85%B3%E7%B3%BB/","content":"<p>一个重要的内置关系：<code>VueComponent.prototype.__proto__==Vue.prototype</code><br>让组件实例（vc)可以访问到vue原型对象上的属性,方法。</p>\n<p><img src=\"https://s2.loli.net/2022/02/22/SOoP6wIx8aN427i.png\" alt=\"vue\"></p>\n<blockquote>\n<p>Vue团队并没有让组件（VueComponent构造函数）的原型对象的隐式原型对象指向Object的原型对象，而是把它修改，指向了Vue的原型对象。这样就可以让组件实例对象（vc）可以访问到Vue原型对象上的属性，方法。</p>\n</blockquote>\n","categories":["Vue"],"tags":["Vue"]},{"title":"mixin混入","url":"/blog/2022/02/11/mixin%E6%B7%B7%E5%85%A5/","content":"<p>可以把多个组件都需要使用的东西配置成一个mixin对象</p>\n<ul>\n<li>1.第一步在src&gt;mixin.js(创建js)<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> mixin = &#123;</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">showName</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      alert(<span class=\"built_in\">this</span>.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;你好呀&#x27;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> mixin2 = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      x: <span class=\"number\">100</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>2.在组件中引入mixin<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;mixin,mixin2&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../mixin.js&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name:<span class=\"string\">&#x27;School&#x27;</span>,</span><br><span class=\"line\">  <span class=\"comment\">//data中的数据如果组件有就用组件的</span></span><br><span class=\"line\">  <span class=\"comment\">// 生命周期都会执行</span></span><br><span class=\"line\">  <span class=\"comment\">// 可以把多个组件需要的配置成一个mixin对象</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      name:<span class=\"string\">&#x27;刘刘刘&#x27;</span>,</span><br><span class=\"line\">      sex:<span class=\"string\">&#x27;男&#x27;</span>,</span><br><span class=\"line\">      x:<span class=\"number\">12</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mixins:[mixin,mixin2],</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>3.全局mixin引入在main.js里<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;mixin2&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./mixin.js&#x27;</span></span><br><span class=\"line\">Vue.use(mixin2)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","categories":["Vue"],"tags":["Vue"]},{"title":"plugins(自定义插件)","url":"/blog/2022/02/11/plugins(%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6)/","content":"<p><img src=\"https://s2.loli.net/2022/02/23/qWQhTLZVFYp3XzK.png\" alt=\"vue\"></p>\n<ul>\n<li>1.在src&gt;plugins.js(创建js)<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">install</span>(<span class=\"params\">Vue</span>)</span> &#123;</span><br><span class=\"line\">    Vue.filter(<span class=\"string\">&#x27;mySlice&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value.slice(<span class=\"number\">0</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    Vue.directive(<span class=\"string\">&#x27;fbind&#x27;</span>, &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 指令与元素成功绑定时(一上来)</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">bind</span>(<span class=\"params\">element, binding</span>)</span> &#123;</span><br><span class=\"line\">        element.value = binding.value;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;bind&#x27;</span>);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">//指令所在元素被插入页面时</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">inserted</span>(<span class=\"params\">element, binding</span>)</span> &#123;</span><br><span class=\"line\">        element.focus();</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;inserted&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// 指令所在的模版被重新解析时</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">update</span>(<span class=\"params\">element, binding</span>)</span> &#123;</span><br><span class=\"line\">        element.value = binding.value;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;update&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 定一个miixn</span></span><br><span class=\"line\">    Vue.mixin(&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">          we: <span class=\"string\">&#x27;123&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    Vue.prototype.hello = <span class=\"function\">() =&gt;</span> &#123; alert(<span class=\"string\">&#x27;hello&#x27;</span>) &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>2.在main.js中引入使用<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 引入插件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> plugins <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./plugins&#x27;</span>;</span><br><span class=\"line\">Vue.use(plugins);<span class=\"comment\">//应用(使用)插件</span></span><br></pre></td></tr></table></figure></li>\n<li>3.在组件中使用<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;school&quot;</span>&gt;</span><br><span class=\"line\">   &lt;h2 &gt;学生姓名&#123;&#123;name | mySlice&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">   &lt;h2&gt;学生性别&#123;&#123;sex&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">   &lt;input type=<span class=\"string\">&quot;text&quot;</span> v-fbind:value = <span class=\"string\">&#x27;name&#x27;</span> &gt;</span><br><span class=\"line\">   &lt;h3&gt;插件混入:&#123;&#123;we&#125;&#125;&lt;/h3&gt;</span><br><span class=\"line\">   &lt;h3 @click=<span class=\"string\">&quot;hello&quot;</span>&gt;测试插件事件&lt;/h3&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["Vue"],"tags":["Vue"]},{"title":"vue中关闭eslint语法","url":"/blog/2022/02/11/vue%E4%B8%AD%E5%85%B3%E9%97%ADeslint%E8%AF%AD%E6%B3%95/","content":"<p>在根目录创建vue.config.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  lintOnSave:<span class=\"literal\">false</span>,<span class=\"comment\">//关闭语法检查</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["Vue"],"tags":["Vue"]},{"title":"vue中一些npm命令","url":"/blog/2022/02/11/vue%E4%B8%AD%E4%B8%80%E4%BA%9Bnpm%E5%91%BD%E4%BB%A4/","content":"<ul>\n<li>1.nanoid插件(随机数)<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//npm i nanoid安装</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;nanoid&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;nanoid&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&quot;MyHeader&quot;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      id: nanoid(),<span class=\"comment\">//使用可以传参数,参数为随机id的长度</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>2.查看webpack的所有版本<blockquote>\n<p>npm view webpack versions<br>npm view less-loader versions查看less所有版本</p>\n</blockquote>\n</li>\n</ul>\n","categories":["Vue"],"tags":["Vue"]},{"title":"vue中props能不能修改","url":"/blog/2022/02/24/vue%E4%B8%ADprops%E8%83%BD%E4%B8%8D%E8%83%BD%E4%BF%AE%E6%94%B9/","content":"<p>vue是单向数据流,单向数据流就是从一个组件单方向将数据流向它的内部组件，也就是父组件的数据流向子组件中,但子组件不能将这个数据修改掉,如果返回到父组件中修改然后重新流向子组件，从而达到更新数据的原理<br><img src=\"https://s2.loli.net/2022/02/24/Q7YMOLvqgnS5ihb.png\" alt><br>图中可以看到，父组件向子组件传递数据的时候，子组件接收的这个数据是不能直接修改的，需要触发父组件的方法来修改这个数据，然后重新传递给子组件。</p>\n<p>props可以改,但是不推荐。如果props传递过来的是一个string修改的会报错,如果是对象的话，修改对象的属性是可以的,但是不推荐这样。<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    a = <span class=\"number\">2</span>;<span class=\"comment\">//修改了a改变了a的内存地址</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;小明&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">12</span>&#125;;</span><br><span class=\"line\">    obj.age = <span class=\"number\">13</span>;<span class=\"comment\">//修改了a但是没有改变obj的内存地址</span></span><br><span class=\"line\"><span class=\"comment\">// 对象修改属性的话vue监测不到,所以在props中传递对象的时候,修改没有报错</span></span><br></pre></td></tr></table></figure></p>\n","categories":["Vue"],"tags":["Vue"]},{"title":"任意组件间通信","url":"/blog/2022/02/24/%E4%BB%BB%E6%84%8F%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1/","content":"<p>1.全局安装事件总线main.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App),</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">beforeCreate</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    Vue.prototype.$bus = <span class=\"built_in\">this</span>;<span class=\"comment\">//安装全局事件总线,$bus就是当前应用的vm</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br>2.使用时间总线</p>\n<ul>\n<li>传递的组件<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;school&quot;</span>&gt;</span><br><span class=\"line\">   &lt;h2 &gt;学生姓名&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">   &lt;h2&gt;学生性别&#123;&#123;sex&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">   &lt;button @click=<span class=\"string\">&quot;dianji()&quot;</span>&gt;点击传递&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name:<span class=\"string\">&#x27;Student&#x27;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      name:<span class=\"string\">&#x27;小韩&#x27;</span>,</span><br><span class=\"line\">      sex:<span class=\"string\">&#x27;女&#x27;</span>,</span><br><span class=\"line\">      x:<span class=\"number\">12</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">dianji</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.$bus.$emit(<span class=\"string\">&#x27;hello&#x27;</span>,<span class=\"number\">66</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>接收的组件<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;school&quot;</span>&gt;</span><br><span class=\"line\">   &lt;h2 <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;title font&quot;</span>&gt;学生姓名&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">   &lt;h2&gt;学生性别&#123;&#123;sex&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"comment\">// 引入一个混合</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name:<span class=\"string\">&#x27;School&#x27;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      name:<span class=\"string\">&#x27;刘刘刘131414&#x27;</span>,</span><br><span class=\"line\">      sex:<span class=\"string\">&#x27;男&#x27;</span>,</span><br><span class=\"line\">      x:<span class=\"number\">12</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$bus.$on(<span class=\"string\">&#x27;hello&#x27;</span>,<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;收到了student传来的数据&#x27;</span>,value);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">beforeDestroy</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$bus.$off(<span class=\"string\">&#x27;hello&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\"><span class=\"comment\">/* scoped让样式局部生效,防止污染其他组件 */</span></span><br><span class=\"line\">  .school&#123;</span><br><span class=\"line\">    background-color: red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n3.最好在beforeDestroy中解绑当前用到的事件</li>\n</ul>\n","categories":["Vue"],"tags":["Vue"]},{"title":"vue通过子向父传值(组件自定义事件)","url":"/blog/2022/02/11/vue%E9%80%9A%E8%BF%87%E5%AD%90%E5%90%91%E7%88%B6%E4%BC%A0%E5%80%BC(%E7%BB%84%E4%BB%B6%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6)/","content":"<h2 id=\"第一种-父组件给子组件传递函数类型的props实现\"><a href=\"#第一种-父组件给子组件传递函数类型的props实现\" class=\"headerlink\" title=\"第一种:父组件给子组件传递函数类型的props实现\"></a>第一种:父组件给子组件传递函数类型的props实现</h2><p>父组件<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=<span class=\"string\">&quot;root&quot;</span>&gt;</span><br><span class=\"line\">    &lt;School :add = <span class=\"string\">&quot;add&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;Student /&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> School <span class=\"keyword\">from</span> <span class=\"string\">&quot;./components/School.vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Student <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/Student.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&quot;App&quot;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  components:&#123;</span><br><span class=\"line\">    School,</span><br><span class=\"line\">    Student</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"title\">add</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(x)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><br>子组件<br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=<span class=\"string\">&quot;root&quot;</span>&gt;</span><br><span class=\"line\">      &lt;button @click=<span class=\"string\">&quot;add(msg)&quot;</span>&gt;点击传递&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&quot;App&quot;</span>,</span><br><span class=\"line\">  props:[<span class=\"string\">&#x27;add&#x27;</span>],</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      msg:<span class=\"string\">&#x27;123&#x27;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  components:&#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure><br>父组件向子组件传递一个函数,然后子组件通过props接收函数，然后调用向父组件传值</p>\n<h2 id=\"第二种-通过父组件给子组件自定义事件-子组件-emit发射\"><a href=\"#第二种-通过父组件给子组件自定义事件-子组件-emit发射\" class=\"headerlink\" title=\"第二种:通过父组件给子组件自定义事件,子组件$emit发射\"></a>第二种:通过父组件给子组件自定义事件,子组件$emit发射</h2><ul>\n<li>父组件<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=<span class=\"string\">&quot;root&quot;</span>&gt;</span><br><span class=\"line\">    &lt;School @add = <span class=\"string\">&quot;add&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;Student /&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> School <span class=\"keyword\">from</span> <span class=\"string\">&quot;./components/School.vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Student <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/Student.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&quot;App&quot;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  components:&#123;</span><br><span class=\"line\">    School,</span><br><span class=\"line\">    Student</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"title\">add</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(x)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li>子组件<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=<span class=\"string\">&quot;root&quot;</span>&gt;</span><br><span class=\"line\">      &lt;button @click=<span class=\"string\">&quot;dianji&quot;</span>&gt;点击传递&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&quot;App&quot;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      msg:<span class=\"string\">&#x27;123&#x27;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  components:&#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">dianji</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.$emit(<span class=\"string\">&#x27;add&#x27;</span>,<span class=\"built_in\">this</span>.msg)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"第三种-给子组件绑定ref属性-父组件在mounted用-on给子组件绑定事件-子组件-emit发射\"><a href=\"#第三种-给子组件绑定ref属性-父组件在mounted用-on给子组件绑定事件-子组件-emit发射\" class=\"headerlink\" title=\"第三种:给子组件绑定ref属性,父组件在mounted用$on给子组件绑定事件,子组件$emit发射\"></a>第三种:给子组件绑定ref属性,父组件在mounted用$on给子组件绑定事件,子组件$emit发射</h2></li>\n<li>父组件<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=<span class=\"string\">&quot;root&quot;</span>&gt;</span><br><span class=\"line\">    &lt;School ref = <span class=\"string\">&quot;school&quot;</span> /&gt;</span><br><span class=\"line\">    &lt;Student /&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> School <span class=\"keyword\">from</span> <span class=\"string\">&quot;./components/School.vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Student <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/Student.vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&quot;App&quot;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  components:&#123;</span><br><span class=\"line\">    School,</span><br><span class=\"line\">    Student</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"title\">add</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(x)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.$refs.school.$on(<span class=\"string\">&#x27;add&#x27;</span>,<span class=\"built_in\">this</span>.add)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li>子组件<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=<span class=\"string\">&quot;root&quot;</span>&gt;</span><br><span class=\"line\">      &lt;button @click=<span class=\"string\">&quot;dianji&quot;</span>&gt;点击传递&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&quot;App&quot;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      msg:<span class=\"string\">&#x27;123&#x27;</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  components:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">dianji</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.$emit(<span class=\"string\">&#x27;add&#x27;</span>,<span class=\"built_in\">this</span>.msg)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义事件解绑\"><a href=\"#自定义事件解绑\" class=\"headerlink\" title=\"自定义事件解绑\"></a>自定义事件解绑</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.$off(<span class=\"string\">&#x27;add&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"直接点击组件响应\"><a href=\"#直接点击组件响应\" class=\"headerlink\" title=\"直接点击组件响应\"></a>直接点击组件响应</h2>直接点击组件需要使用@click.native修饰符</li>\n</ul>\n","categories":["Vue"],"tags":["Vue"]},{"title":"vue消息订阅与发布","url":"/blog/2022/03/03/vue%E6%B6%88%E6%81%AF%E8%AE%A2%E9%98%85%E4%B8%8E%E5%8F%91%E5%B8%83/","content":"<p>一种可以达成任意组件间通信,类似于总线传值</p>\n<h1 id=\"1-安装pubsub插件\"><a href=\"#1-安装pubsub插件\" class=\"headerlink\" title=\"1.安装pubsub插件\"></a>1.安装pubsub插件</h1><p><code>npm i pubsub-js</code></p>\n<h1 id=\"2-在需要使用pubsub插件的组件中引入\"><a href=\"#2-在需要使用pubsub插件的组件中引入\" class=\"headerlink\" title=\"2.在需要使用pubsub插件的组件中引入\"></a>2.在需要使用pubsub插件的组件中引入</h1><p><code>import pubsub from &#39;pubsub-js&#39;</code></p>\n<h1 id=\"3-进行使用\"><a href=\"#3-进行使用\" class=\"headerlink\" title=\"3.进行使用\"></a>3.进行使用</h1><ul>\n<li>传递数据的组件<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;school&quot;</span>&gt;</span><br><span class=\"line\">   &lt;button @click=<span class=\"string\">&quot;dianji()&quot;</span>&gt;点击传递&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pubsub <span class=\"keyword\">from</span> <span class=\"string\">&#x27;pubsub-js&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 引入一个混合</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name:<span class=\"string\">&#x27;Student&#x27;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      name:<span class=\"string\">&#x27;小韩&#x27;</span>,</span><br><span class=\"line\">      sex:<span class=\"string\">&#x27;女&#x27;</span>,</span><br><span class=\"line\">      x:<span class=\"number\">12</span>, </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods:&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">dianji</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">     pubsub.publish(<span class=\"string\">&#x27;hello&#x27;</span>,<span class=\"number\">666</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">  .school&#123;</span><br><span class=\"line\">    background-color: blue;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li>\n<li>接收数据的组件<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;school&quot;</span>&gt;</span><br><span class=\"line\">   &lt;h2 <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;title font&quot;</span>&gt;学生姓名&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">   &lt;h2&gt;学生性别&#123;&#123;sex&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> pubsub <span class=\"keyword\">from</span> <span class=\"string\">&#x27;pubsub-js&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name:<span class=\"string\">&#x27;School&#x27;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      name:<span class=\"string\">&#x27;刘刘刘131414&#x27;</span>,</span><br><span class=\"line\">      sex:<span class=\"string\">&#x27;男&#x27;</span>,</span><br><span class=\"line\">      x:<span class=\"number\">12</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 接收的数据第一个参数是传递的事件名，第二个参数才是传递的值</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.pubId = pubsub.subscribe(<span class=\"string\">&#x27;hello&#x27;</span>,<span class=\"function\">(<span class=\"params\">msgName,b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;有人发布了hello消息。&#x27;</span>,msgName,b);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">beforeDestroy</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//最后解绑,解绑的是订阅事件的一个id</span></span><br><span class=\"line\">    pubsub.unsubscribe(<span class=\"built_in\">this</span>.pubId)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\"><span class=\"comment\">/* scoped让样式局部生效,防止污染其他组件 */</span></span><br><span class=\"line\">  .school&#123;</span><br><span class=\"line\">    background-color: red;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["Vue"],"tags":["Vue"]},{"title":"vue2笔记大全","url":"/blog/2022/03/07/vue2%E7%AC%94%E8%AE%B0%E5%A4%A7%E5%85%A8/","content":"<!-- 有道云网址链接：https://note.youdao.com/web/#/file/recent/markdown/645A7C3D45AE4368A91F672C2FC69477/ -->\n<h2 id=\"关于不同版本的Vue\"><a href=\"#关于不同版本的Vue\" class=\"headerlink\" title=\"关于不同版本的Vue\"></a>关于不同版本的Vue</h2><ol>\n<li>vue.js与vue.runtime.xxx.js的区别：<ol>\n<li>vue.js是完整版的Vue，包含：核心功能 + 模板解析器。</li>\n<li>vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</li>\n</ol>\n</li>\n<li>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template这个配置项，需要使用render函数接收到的createElement函数去指定具体内容。</li>\n</ol>\n<h2 id=\"vue-config-js配置文件\"><a href=\"#vue-config-js配置文件\" class=\"headerlink\" title=\"vue.config.js配置文件\"></a>vue.config.js配置文件</h2><ol>\n<li>使用vue inspect &gt; output.js可以查看到Vue脚手架的默认配置。</li>\n<li>使用vue.config.js可以对脚手架进行个性化定制，详情见：<a href=\"https://cli.vuejs.org/zh\">https://cli.vuejs.org/zh</a></li>\n</ol>\n<h2 id=\"ref属性\"><a href=\"#ref属性\" class=\"headerlink\" title=\"ref属性\"></a>ref属性</h2><ol>\n<li>被用来给元素或子组件注册引用信息（id的替代者）</li>\n<li>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</li>\n<li>使用方式：<ol>\n<li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li>\n<li>获取：<code>this.$refs.xxx</code></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"props配置项\"><a href=\"#props配置项\" class=\"headerlink\" title=\"props配置项\"></a>props配置项</h2><ol>\n<li><p>功能：让组件接收外部传过来的数据</p>\n</li>\n<li><p>传递数据：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></p>\n</li>\n<li><p>接收数据：</p>\n<ol>\n<li><p>第一种方式（只接收）：<code>props:[&#39;name&#39;]</code></p>\n</li>\n<li><p>第二种方式（限制类型）：<code>props:&#123;name:String&#125;</code></p>\n</li>\n<li><p>第三种方式（限制类型、限制必要性、指定默认值）：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">props:&#123;</span><br><span class=\"line\">\tname:&#123;</span><br><span class=\"line\">\ttype:<span class=\"built_in\">String</span>, <span class=\"comment\">//类型</span></span><br><span class=\"line\">\trequired:<span class=\"literal\">true</span>, <span class=\"comment\">//必要性</span></span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:<span class=\"string\">&#x27;老王&#x27;</span> <span class=\"comment\">//默认值</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"mixin-混入\"><a href=\"#mixin-混入\" class=\"headerlink\" title=\"mixin(混入)\"></a>mixin(混入)</h2><ol>\n<li><p>功能：可以把多个组件共用的配置提取成一个混入对象</p>\n</li>\n<li><p>使用方式：</p>\n<p> 第一步定义混合：</p>\n <figure class=\"highlight nim\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    data()<span class=\"meta\">&#123;....&#125;</span>,</span><br><span class=\"line\">    methods:<span class=\"meta\">&#123;....&#125;</span></span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 第二步使用混入：</p>\n<p> ​    全局混入：<code>Vue.mixin(xxx)</code><br> ​    局部混入：<code>mixins:[&#39;xxx&#39;]</code></p>\n</li>\n</ol>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><ol>\n<li><p>功能：用于增强Vue</p>\n</li>\n<li><p>本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</p>\n</li>\n<li><p>定义插件：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">对象.install = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Vue, options</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 添加全局过滤器</span></span><br><span class=\"line\">    Vue.filter(....)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2. 添加全局指令</span></span><br><span class=\"line\">    Vue.directive(....)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 3. 配置全局混入(合)</span></span><br><span class=\"line\">    Vue.mixin(....)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 4. 添加实例方法</span></span><br><span class=\"line\">    Vue.prototype.$myMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;...&#125;</span><br><span class=\"line\">    Vue.prototype.$myProperty = xxxx</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用插件：<code>Vue.use()</code></p>\n</li>\n</ol>\n<h2 id=\"scoped样式\"><a href=\"#scoped样式\" class=\"headerlink\" title=\"scoped样式\"></a>scoped样式</h2><ol>\n<li>作用：让样式在局部生效，防止冲突。</li>\n<li>写法：<code>&lt;style scoped&gt;</code></li>\n</ol>\n<h2 id=\"总结TodoList案例\"><a href=\"#总结TodoList案例\" class=\"headerlink\" title=\"总结TodoList案例\"></a>总结TodoList案例</h2><ol>\n<li><p>组件化编码流程：</p>\n<p> ​    (1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。</p>\n<p> ​    (2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p>\n<p> ​            1).一个组件在用：放在组件自身即可。</p>\n<p> ​            2). 一些组件在用：放在他们共同的父组件上（<span style=\"color:red\">状态提升</span>）。</p>\n<p> ​    (3).实现交互：从绑定事件开始。</p>\n</li>\n<li><p>props适用于：</p>\n<p> ​    (1).父组件 ==&gt; 子组件 通信</p>\n<p> ​    (2).子组件 ==&gt; 父组件 通信（要求父先给子一个函数）</p>\n</li>\n<li><p>使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</p>\n</li>\n<li><p>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</p>\n</li>\n</ol>\n<h2 id=\"webStorage\"><a href=\"#webStorage\" class=\"headerlink\" title=\"webStorage\"></a>webStorage</h2><ol>\n<li><p>存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</p>\n</li>\n<li><p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p>\n</li>\n<li><p>相关API：</p>\n<ol>\n<li><p><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code></p>\n<pre><code>             该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。\n</code></pre></li>\n<li><p><code>xxxxxStorage.getItem(&#39;person&#39;);</code></p>\n<p> ​        该方法接受一个键名作为参数，返回键名对应的值。</p>\n</li>\n<li><p><code>xxxxxStorage.removeItem(&#39;key&#39;);</code></p>\n<p> ​        该方法接受一个键名作为参数，并把该键名从存储中删除。</p>\n</li>\n<li><p><code>xxxxxStorage.clear()</code></p>\n<p> ​        该方法会清空存储中的所有数据。</p>\n</li>\n</ol>\n</li>\n<li><p>备注：</p>\n<ol>\n<li>SessionStorage存储的内容会随着浏览器窗口关闭而消失。</li>\n<li>LocalStorage存储的内容，需要手动清除才会消失。</li>\n<li><code>xxxxxStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null。</li>\n<li><code>JSON.parse(null)</code>的结果依然是null。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"组件的自定义事件\"><a href=\"#组件的自定义事件\" class=\"headerlink\" title=\"组件的自定义事件\"></a>组件的自定义事件</h2><ol>\n<li><p>一种组件间通信的方式，适用于：<strong style=\"color:red\">子组件 ===&gt; 父组件</strong></p>\n</li>\n<li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<span style=\"color:red\">事件的回调在A中</span>）。</p>\n</li>\n<li><p>绑定自定义事件：</p>\n<ol>\n<li><p>第一种方式，在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code>  或 <code>&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</code></p>\n</li>\n<li><p>第二种方式，在父组件中：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;Demo ref=<span class=\"string\">&quot;demo&quot;</span>/&gt;</span><br><span class=\"line\">......</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"built_in\">this</span>.$refs.xxx.$on(<span class=\"string\">&#x27;atguigu&#x27;</span>,<span class=\"built_in\">this</span>.test)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</p>\n</li>\n</ol>\n</li>\n<li><p>触发自定义事件：<code>this.$emit(&#39;atguigu&#39;,数据)</code>        </p>\n</li>\n<li><p>解绑自定义事件<code>this.$off(&#39;atguigu&#39;)</code></p>\n</li>\n<li><p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符。</p>\n</li>\n<li><p>注意：通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调)</code>绑定自定义事件时，回调<span style=\"color:red\">要么配置在methods中</span>，<span style=\"color:red\">要么用箭头函数</span>，否则this指向会出问题！</p>\n</li>\n</ol>\n<h2 id=\"全局事件总线（GlobalEventBus）\"><a href=\"#全局事件总线（GlobalEventBus）\" class=\"headerlink\" title=\"全局事件总线（GlobalEventBus）\"></a>全局事件总线（GlobalEventBus）</h2><ol>\n<li><p>一种组件间通信的方式，适用于<span style=\"color:red\">任意组件间通信</span>。</p>\n</li>\n<li><p>安装全局事件总线：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">\t......</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"title\">beforeCreate</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">\t\tVue.prototype.$bus = <span class=\"built_in\">this</span> <span class=\"comment\">//安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;) </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用事件总线：</p>\n<ol>\n<li><p>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的<span style=\"color:red\">回调留在A组件自身。</span></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">methods</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">demo</span>(<span class=\"params\">data</span>)</span>&#123;......&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">......</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.$bus.$on(<span class=\"string\">&#x27;xxxx&#x27;</span>,<span class=\"built_in\">this</span>.demo)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>提供数据：<code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code></p>\n</li>\n</ol>\n</li>\n<li><p>最好在beforeDestroy钩子中，用$off去解绑<span style=\"color:red\">当前组件所用到的</span>事件。</p>\n</li>\n</ol>\n<h2 id=\"消息订阅与发布（pubsub）\"><a href=\"#消息订阅与发布（pubsub）\" class=\"headerlink\" title=\"消息订阅与发布（pubsub）\"></a>消息订阅与发布（pubsub）</h2><ol>\n<li><p>一种组件间通信的方式，适用于<span style=\"color:red\">任意组件间通信</span>。</p>\n</li>\n<li><p>使用步骤：</p>\n<ol>\n<li><p>安装pubsub：<code>npm i pubsub-js</code></p>\n</li>\n<li><p>引入: <code>import pubsub from &#39;pubsub-js&#39;</code></p>\n</li>\n<li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<span style=\"color:red\">回调留在A组件自身。</span></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">methods</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">demo</span>(<span class=\"params\">data</span>)</span>&#123;......&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">......</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.pid = pubsub.subscribe(<span class=\"string\">&#x27;xxx&#x27;</span>,<span class=\"built_in\">this</span>.demo) <span class=\"comment\">//订阅消息</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></p>\n</li>\n<li><p>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style=\"color:red\">取消订阅。</span></p>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"nextTick\"><a href=\"#nextTick\" class=\"headerlink\" title=\"nextTick\"></a>nextTick</h2><ol>\n<li>语法：<code>this.$nextTick(回调函数)</code></li>\n<li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li>\n<li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</li>\n</ol>\n<h2 id=\"Vue封装的过度与动画\"><a href=\"#Vue封装的过度与动画\" class=\"headerlink\" title=\"Vue封装的过度与动画\"></a>Vue封装的过度与动画</h2><ol>\n<li><p>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</p>\n</li>\n<li><p>图示：<img src=\"https://img04.sogoucdn.com/app/a/100520146/5990c1dff7dc7a8fb3b34b4462bd0105\" style=\"width:60%\"></p>\n</li>\n<li><p>写法：</p>\n<ol>\n<li><p>准备好样式：</p>\n<ul>\n<li>元素进入的样式：<ol>\n<li>v-enter：进入的起点</li>\n<li>v-enter-active：进入过程中</li>\n<li>v-enter-to：进入的终点</li>\n</ol>\n</li>\n<li>元素离开的样式：<ol>\n<li>v-leave：离开的起点</li>\n<li>v-leave-active：离开过程中</li>\n<li>v-leave-to：离开的终点</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;transition name&#x3D;&quot;hello&quot;&gt;</span><br><span class=\"line\">\t&lt;h1 v-show&#x3D;&quot;isShow&quot;&gt;你好啊！&lt;&#x2F;h1&gt;</span><br><span class=\"line\">&lt;&#x2F;transition&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"vue脚手架配置代理\"><a href=\"#vue脚手架配置代理\" class=\"headerlink\" title=\"vue脚手架配置代理\"></a>vue脚手架配置代理</h2><h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>​    在vue.config.js中添加如下配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">devServer:&#123;</span><br><span class=\"line\">  proxy:<span class=\"string\">&quot;http://localhost:5000&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ol>\n<li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li>\n<li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li>\n<li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li>\n</ol>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>​    编写vue.config.js配置具体代理规则：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">\tdevServer: &#123;</span><br><span class=\"line\">      proxy: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;/api1&#x27;</span>: &#123;<span class=\"comment\">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span></span><br><span class=\"line\">        target: <span class=\"string\">&#x27;http://localhost:5000&#x27;</span>,<span class=\"comment\">// 代理目标的基础路径</span></span><br><span class=\"line\">        changeOrigin: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        pathRewrite: &#123;<span class=\"string\">&#x27;^/api1&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>&#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"string\">&#x27;/api2&#x27;</span>: &#123;<span class=\"comment\">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span></span><br><span class=\"line\">        target: <span class=\"string\">&#x27;http://localhost:5001&#x27;</span>,<span class=\"comment\">// 代理目标的基础路径</span></span><br><span class=\"line\">        changeOrigin: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        pathRewrite: &#123;<span class=\"string\">&#x27;^/api2&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>&#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class=\"line\"><span class=\"comment\">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span></span><br><span class=\"line\"><span class=\"comment\">   changeOrigin默认值为true</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ol>\n<li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li>\n<li>缺点：配置略微繁琐，请求资源时必须加前缀。</li>\n</ol>\n<h2 id=\"插槽\"><a href=\"#插槽\" class=\"headerlink\" title=\"插槽\"></a>插槽</h2><ol>\n<li><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong style=\"color:red\">父组件 ===&gt; 子组件</strong> 。</p>\n</li>\n<li><p>分类：默认插槽、具名插槽、作用域插槽</p>\n</li>\n<li><p>使用方式：</p>\n<ol>\n<li><p>默认插槽：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">父组件中：</span><br><span class=\"line\">        &lt;Category&gt;</span><br><span class=\"line\">           &lt;div&gt;html结构1&lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;&#x2F;Category&gt;</span><br><span class=\"line\">子组件中：</span><br><span class=\"line\">        &lt;template&gt;</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">               &lt;!-- 定义插槽 --&gt;</span><br><span class=\"line\">               &lt;slot&gt;插槽默认内容...&lt;&#x2F;slot&gt;</span><br><span class=\"line\">            &lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>具名插槽：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">父组件中：</span><br><span class=\"line\">        &lt;Category&gt;</span><br><span class=\"line\">            &lt;template slot&#x3D;&quot;center&quot;&gt;</span><br><span class=\"line\">              &lt;div&gt;html结构1&lt;&#x2F;div&gt;</span><br><span class=\"line\">            &lt;&#x2F;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">            &lt;template v-slot:footer&gt;</span><br><span class=\"line\">               &lt;div&gt;html结构2&lt;&#x2F;div&gt;</span><br><span class=\"line\">            &lt;&#x2F;template&gt;</span><br><span class=\"line\">        &lt;&#x2F;Category&gt;</span><br><span class=\"line\">子组件中：</span><br><span class=\"line\">        &lt;template&gt;</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">               &lt;!-- 定义插槽 --&gt;</span><br><span class=\"line\">               &lt;slot name&#x3D;&quot;center&quot;&gt;插槽默认内容...&lt;&#x2F;slot&gt;</span><br><span class=\"line\">               &lt;slot name&#x3D;&quot;footer&quot;&gt;插槽默认内容...&lt;&#x2F;slot&gt;</span><br><span class=\"line\">            &lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>作用域插槽：</p>\n<ol>\n<li><p>理解：<span style=\"color:red\">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p>\n</li>\n<li><p>具体编码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">父组件中：</span><br><span class=\"line\">\t\t&lt;Category&gt;</span><br><span class=\"line\">\t\t\t&lt;template scope&#x3D;&quot;scopeData&quot;&gt;</span><br><span class=\"line\">\t\t\t\t&lt;!-- 生成的是ul列表 --&gt;</span><br><span class=\"line\">\t\t\t\t&lt;ul&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;li v-for&#x3D;&quot;g in scopeData.games&quot; :key&#x3D;&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class=\"line\">\t\t\t\t&lt;&#x2F;ul&gt;</span><br><span class=\"line\">\t\t\t&lt;&#x2F;template&gt;</span><br><span class=\"line\">\t\t&lt;&#x2F;Category&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&lt;Category&gt;</span><br><span class=\"line\">\t\t\t&lt;template slot-scope&#x3D;&quot;scopeData&quot;&gt;</span><br><span class=\"line\">\t\t\t\t&lt;!-- 生成的是h4标题 --&gt;</span><br><span class=\"line\">\t\t\t\t&lt;h4 v-for&#x3D;&quot;g in scopeData.games&quot; :key&#x3D;&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;&#x2F;h4&gt;</span><br><span class=\"line\">\t\t\t&lt;&#x2F;template&gt;</span><br><span class=\"line\">\t\t&lt;&#x2F;Category&gt;</span><br><span class=\"line\">子组件中：</span><br><span class=\"line\">        &lt;template&gt;</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;slot :games&#x3D;&quot;games&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class=\"line\">            &lt;&#x2F;div&gt;</span><br><span class=\"line\">        &lt;&#x2F;template&gt;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        &lt;script&gt;</span><br><span class=\"line\">            export default &#123;</span><br><span class=\"line\">                name:&#39;Category&#39;,</span><br><span class=\"line\">                props:[&#39;title&#39;],</span><br><span class=\"line\">                &#x2F;&#x2F;数据在子组件自身</span><br><span class=\"line\">                data() &#123;</span><br><span class=\"line\">                    return &#123;</span><br><span class=\"line\">                        games:[&#39;红色警戒&#39;,&#39;穿越火线&#39;,&#39;劲舞团&#39;,&#39;超级玛丽&#39;]</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">   </span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h2><h3 id=\"1-概念\"><a href=\"#1-概念\" class=\"headerlink\" title=\"1.概念\"></a>1.概念</h3><p>​        在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。</p>\n<h3 id=\"2-何时使用？\"><a href=\"#2-何时使用？\" class=\"headerlink\" title=\"2.何时使用？\"></a>2.何时使用？</h3><p>​        多个组件需要共享数据时</p>\n<h3 id=\"3-搭建vuex环境\"><a href=\"#3-搭建vuex环境\" class=\"headerlink\" title=\"3.搭建vuex环境\"></a>3.搭建vuex环境</h3><ol>\n<li><p>创建文件：<code>src/store/index.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引入Vue核心库</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//引入Vuex</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//应用Vuex插件</span></span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//准备actions对象——响应组件中用户的动作</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//准备mutations对象——修改state中的数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//准备state对象——保存具体的数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建并暴露store</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">\tactions,</span><br><span class=\"line\">\tmutations,</span><br><span class=\"line\">\tstate</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">......</span><br><span class=\"line\"><span class=\"comment\">//引入store</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store&#x27;</span></span><br><span class=\"line\">......</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建vm</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">\tel:<span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">\trender: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App),</span><br><span class=\"line\">\tstore</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"4-基本使用\"><a href=\"#4-基本使用\" class=\"headerlink\" title=\"4.基本使用\"></a>4.基本使用</h3><ol>\n<li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引入Vue核心库</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//引入Vuex</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//引用Vuex</span></span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">    <span class=\"comment\">//响应组件中加的动作</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"title\">jia</span>(<span class=\"params\">context,value</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// console.log(&#x27;actions中的jia被调用了&#x27;,miniStore,value)</span></span><br><span class=\"line\">\t\tcontext.commit(<span class=\"string\">&#x27;JIA&#x27;</span>,value)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">    <span class=\"comment\">//执行加</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"title\">JIA</span>(<span class=\"params\">state,value</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)</span></span><br><span class=\"line\">\t\tstate.sum += value</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">   sum:<span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建并暴露store</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">\tactions,</span><br><span class=\"line\">\tmutations,</span><br><span class=\"line\">\tstate,</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p>\n</li>\n<li><p>组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p>\n<blockquote>\n<p> 备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"5-getters的使用\"><a href=\"#5-getters的使用\" class=\"headerlink\" title=\"5.getters的使用\"></a>5.getters的使用</h3><ol>\n<li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。</p>\n</li>\n<li><p>在<code>store.js</code>中追加<code>getters</code>配置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">......</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getters = &#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"title\">bigSum</span>(<span class=\"params\">state</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> state.sum * <span class=\"number\">10</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建并暴露store</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">\t......</span><br><span class=\"line\">\tgetters</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>组件中读取数据：<code>$store.getters.bigSum</code></p>\n</li>\n</ol>\n<h3 id=\"6-四个map方法的使用\"><a href=\"#6-四个map方法的使用\" class=\"headerlink\" title=\"6.四个map方法的使用\"></a>6.四个map方法的使用</h3><ol>\n<li><p><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span><br><span class=\"line\">     ...mapState(&#123;<span class=\"attr\">sum</span>:<span class=\"string\">&#x27;sum&#x27;</span>,<span class=\"attr\">school</span>:<span class=\"string\">&#x27;school&#x27;</span>,<span class=\"attr\">subject</span>:<span class=\"string\">&#x27;subject&#x27;</span>&#125;),</span><br><span class=\"line\">         </span><br><span class=\"line\">    <span class=\"comment\">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span><br><span class=\"line\">    ...mapState([<span class=\"string\">&#x27;sum&#x27;</span>,<span class=\"string\">&#x27;school&#x27;</span>,<span class=\"string\">&#x27;subject&#x27;</span>]),</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//借助mapGetters生成计算属性：bigSum（对象写法）</span></span><br><span class=\"line\">    ...mapGetters(&#123;<span class=\"attr\">bigSum</span>:<span class=\"string\">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//借助mapGetters生成计算属性：bigSum（数组写法）</span></span><br><span class=\"line\">    ...mapGetters([<span class=\"string\">&#x27;bigSum&#x27;</span>])</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    <span class=\"comment\">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span></span><br><span class=\"line\">    ...mapActions(&#123;<span class=\"attr\">incrementOdd</span>:<span class=\"string\">&#x27;jiaOdd&#x27;</span>,<span class=\"attr\">incrementWait</span>:<span class=\"string\">&#x27;jiaWait&#x27;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span></span><br><span class=\"line\">    ...mapActions([<span class=\"string\">&#x27;jiaOdd&#x27;</span>,<span class=\"string\">&#x27;jiaWait&#x27;</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    <span class=\"comment\">//靠mapActions生成：increment、decrement（对象形式）</span></span><br><span class=\"line\">    ...mapMutations(&#123;<span class=\"attr\">increment</span>:<span class=\"string\">&#x27;JIA&#x27;</span>,<span class=\"attr\">decrement</span>:<span class=\"string\">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//靠mapMutations生成：JIA、JIAN（对象形式）</span></span><br><span class=\"line\">    ...mapMutations([<span class=\"string\">&#x27;JIA&#x27;</span>,<span class=\"string\">&#x27;JIAN&#x27;</span>]),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p>\n</blockquote>\n<h3 id=\"7-模块化-命名空间\"><a href=\"#7-模块化-命名空间\" class=\"headerlink\" title=\"7.模块化+命名空间\"></a>7.模块化+命名空间</h3><ol>\n<li><p>目的：让代码更好维护，让多种数据分类更加明确。</p>\n</li>\n<li><p>修改<code>store.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> countAbout = &#123;</span><br><span class=\"line\">  namespaced:<span class=\"literal\">true</span>,<span class=\"comment\">//开启命名空间</span></span><br><span class=\"line\">  state:&#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">  mutations: &#123; ... &#125;,</span><br><span class=\"line\">  actions: &#123; ... &#125;,</span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">bigSum</span>(<span class=\"params\">state</span>)</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> state.sum * <span class=\"number\">10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> personAbout = &#123;</span><br><span class=\"line\">  namespaced:<span class=\"literal\">true</span>,<span class=\"comment\">//开启命名空间</span></span><br><span class=\"line\">  state:&#123; ... &#125;,</span><br><span class=\"line\">  mutations: &#123; ... &#125;,</span><br><span class=\"line\">  actions: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">    countAbout,</span><br><span class=\"line\">    personAbout</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开启命名空间后，组件中读取state数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方式一：自己直接读取</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$store.state.personAbout.list</span><br><span class=\"line\"><span class=\"comment\">//方式二：借助mapState读取：</span></span><br><span class=\"line\">...mapState(<span class=\"string\">&#x27;countAbout&#x27;</span>,[<span class=\"string\">&#x27;sum&#x27;</span>,<span class=\"string\">&#x27;school&#x27;</span>,<span class=\"string\">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开启命名空间后，组件中读取getters数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方式一：自己直接读取</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$store.getters[<span class=\"string\">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">//方式二：借助mapGetters读取：</span></span><br><span class=\"line\">...mapGetters(<span class=\"string\">&#x27;countAbout&#x27;</span>,[<span class=\"string\">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开启命名空间后，组件中调用dispatch</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方式一：自己直接dispatch</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$store.dispatch(<span class=\"string\">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class=\"line\"><span class=\"comment\">//方式二：借助mapActions：</span></span><br><span class=\"line\">...mapActions(<span class=\"string\">&#x27;countAbout&#x27;</span>,&#123;<span class=\"attr\">incrementOdd</span>:<span class=\"string\">&#x27;jiaOdd&#x27;</span>,<span class=\"attr\">incrementWait</span>:<span class=\"string\">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开启命名空间后，组件中调用commit</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方式一：自己直接commit</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$store.commit(<span class=\"string\">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class=\"line\"><span class=\"comment\">//方式二：借助mapMutations：</span></span><br><span class=\"line\">...mapMutations(<span class=\"string\">&#x27;countAbout&#x27;</span>,&#123;<span class=\"attr\">increment</span>:<span class=\"string\">&#x27;JIA&#x27;</span>,<span class=\"attr\">decrement</span>:<span class=\"string\">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure>\n<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2></li>\n<li><p>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</p>\n</li>\n<li>前端路由：key是路径，value是组件。</li>\n</ol>\n<h3 id=\"1-基本使用\"><a href=\"#1-基本使用\" class=\"headerlink\" title=\"1.基本使用\"></a>1.基本使用</h3><ol>\n<li><p>安装vue-router，命令：<code>npm i vue-router</code></p>\n</li>\n<li><p>应用插件：<code>Vue.use(VueRouter)</code></p>\n</li>\n<li><p>编写router配置项:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引入VueRouter</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-router&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//引入Luyou 组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> About <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../components/About&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Home <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../components/Home&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建router实例对象，去管理一组一组的路由规则</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">\troutes:[</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tpath:<span class=\"string\">&#x27;/about&#x27;</span>,</span><br><span class=\"line\">\t\t\tcomponent:About</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tpath:<span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">\t\t\tcomponent:Home</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//暴露router</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>实现切换（active-class可配置高亮样式）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;router-link active-class&#x3D;&quot;active&quot; to&#x3D;&quot;&#x2F;about&quot;&gt;About&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>指定展示位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"2-几个注意点\"><a href=\"#2-几个注意点\" class=\"headerlink\" title=\"2.几个注意点\"></a>2.几个注意点</h3><ol>\n<li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</li>\n<li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li>\n<li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li>\n<li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到。</li>\n</ol>\n<h3 id=\"3-多级路由（多级路由）\"><a href=\"#3-多级路由（多级路由）\" class=\"headerlink\" title=\"3.多级路由（多级路由）\"></a>3.多级路由（多级路由）</h3><ol>\n<li><p>配置路由规则，使用children配置项：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">routes:[</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpath:<span class=\"string\">&#x27;/about&#x27;</span>,</span><br><span class=\"line\">\t\tcomponent:About,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tpath:<span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">\t\tcomponent:Home,</span><br><span class=\"line\">\t\tchildren:[ <span class=\"comment\">//通过children配置子级路由</span></span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tpath:<span class=\"string\">&#x27;news&#x27;</span>, <span class=\"comment\">//此处一定不要写：/news</span></span><br><span class=\"line\">\t\t\t\tcomponent:News</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tpath:<span class=\"string\">&#x27;message&#x27;</span>,<span class=\"comment\">//此处一定不要写：/message</span></span><br><span class=\"line\">\t\t\t\tcomponent:Message</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>跳转（要写完整路径）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;router-link to&#x3D;&quot;&#x2F;home&#x2F;news&quot;&gt;News&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"4-路由的query参数\"><a href=\"#4-路由的query参数\" class=\"headerlink\" title=\"4.路由的query参数\"></a>4.路由的query参数</h3><ol>\n<li><p>传递参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;</span><br><span class=\"line\">&lt;router-link :to&#x3D;&quot;&#x2F;home&#x2F;message&#x2F;detail?id&#x3D;666&amp;title&#x3D;你好&quot;&gt;跳转&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;</span><br><span class=\"line\">&lt;router-link </span><br><span class=\"line\">\t:to&#x3D;&quot;&#123;</span><br><span class=\"line\">\t\tpath:&#39;&#x2F;home&#x2F;message&#x2F;detail&#39;,</span><br><span class=\"line\">\t\tquery:&#123;</span><br><span class=\"line\">\t\t   id:666,</span><br><span class=\"line\">            title:&#39;你好&#39;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;&quot;</span><br><span class=\"line\">&gt;跳转&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接收参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$route.query.id</span><br><span class=\"line\">$route.query.title</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"5-命名路由\"><a href=\"#5-命名路由\" class=\"headerlink\" title=\"5.命名路由\"></a>5.命名路由</h3><ol>\n<li><p>作用：可以简化路由的跳转。</p>\n</li>\n<li><p>如何使用</p>\n<ol>\n<li><p>给路由命名：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tpath:<span class=\"string\">&#x27;/demo&#x27;</span>,</span><br><span class=\"line\">\tcomponent:Demo,</span><br><span class=\"line\">\tchildren:[</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tpath:<span class=\"string\">&#x27;test&#x27;</span>,</span><br><span class=\"line\">\t\t\tcomponent:Test,</span><br><span class=\"line\">\t\t\tchildren:[</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">                      name:<span class=\"string\">&#x27;hello&#x27;</span> <span class=\"comment\">//给路由命名</span></span><br><span class=\"line\">\t\t\t\t\tpath:<span class=\"string\">&#x27;welcome&#x27;</span>,</span><br><span class=\"line\">\t\t\t\t\tcomponent:Hello,</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>简化跳转：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!--简化前，需要写完整的路径 --&gt;</span><br><span class=\"line\">&lt;router-link to&#x3D;&quot;&#x2F;demo&#x2F;test&#x2F;welcome&quot;&gt;跳转&lt;&#x2F;router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--简化后，直接通过名字跳转 --&gt;</span><br><span class=\"line\">&lt;router-link :to&#x3D;&quot;&#123;name:&#39;hello&#39;&#125;&quot;&gt;跳转&lt;&#x2F;router-link&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--简化写法配合传递参数 --&gt;</span><br><span class=\"line\">&lt;router-link </span><br><span class=\"line\">\t:to&#x3D;&quot;&#123;</span><br><span class=\"line\">\t\tname:&#39;hello&#39;,</span><br><span class=\"line\">\t\tquery:&#123;</span><br><span class=\"line\">\t\t   id:666,</span><br><span class=\"line\">            title:&#39;你好&#39;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;&quot;</span><br><span class=\"line\">&gt;跳转&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"6-路由的params参数\"><a href=\"#6-路由的params参数\" class=\"headerlink\" title=\"6.路由的params参数\"></a>6.路由的params参数</h3><ol>\n<li><p>配置路由，声明接收params参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tpath:<span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">\tcomponent:Home,</span><br><span class=\"line\">\tchildren:[</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tpath:<span class=\"string\">&#x27;news&#x27;</span>,</span><br><span class=\"line\">\t\t\tcomponent:News</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcomponent:Message,</span><br><span class=\"line\">\t\t\tchildren:[</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tname:<span class=\"string\">&#x27;xiangqing&#x27;</span>,</span><br><span class=\"line\">\t\t\t\t\tpath:<span class=\"string\">&#x27;detail/:id/:title&#x27;</span>, <span class=\"comment\">//使用占位符声明接收params参数</span></span><br><span class=\"line\">\t\t\t\t\tcomponent:Detail</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>传递参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;</span><br><span class=\"line\">&lt;router-link :to&#x3D;&quot;&#x2F;home&#x2F;message&#x2F;detail&#x2F;666&#x2F;你好&quot;&gt;跳转&lt;&#x2F;router-link&gt;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;</span><br><span class=\"line\">&lt;router-link </span><br><span class=\"line\">\t:to&#x3D;&quot;&#123;</span><br><span class=\"line\">\t\tname:&#39;xiangqing&#39;,</span><br><span class=\"line\">\t\tparams:&#123;</span><br><span class=\"line\">\t\t   id:666,</span><br><span class=\"line\">            title:&#39;你好&#39;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;&quot;</span><br><span class=\"line\">&gt;跳转&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p>\n</blockquote>\n</li>\n<li><p>接收参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">$route.params.id</span><br><span class=\"line\">$route.params.title</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"7-路由的props配置\"><a href=\"#7-路由的props配置\" class=\"headerlink\" title=\"7.路由的props配置\"></a>7.路由的props配置</h3><p>​    作用：让路由组件更方便的收到参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\tname:<span class=\"string\">&#x27;xiangqing&#x27;</span>,</span><br><span class=\"line\">\tpath:<span class=\"string\">&#x27;detail/:id&#x27;</span>,</span><br><span class=\"line\">\tcomponent:Detail,</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span></span><br><span class=\"line\">\t<span class=\"comment\">// props:&#123;a:900&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span></span><br><span class=\"line\">\t<span class=\"comment\">// props:true</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"title\">props</span>(<span class=\"params\">route</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\tid:route.query.id,</span><br><span class=\"line\">\t\t\ttitle:route.query.title</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-lt-router-link-gt-的replace属性\"><a href=\"#8-lt-router-link-gt-的replace属性\" class=\"headerlink\" title=\"8.&lt;router-link&gt;的replace属性\"></a>8.<code>&lt;router-link&gt;</code>的replace属性</h3><ol>\n<li>作用：控制路由跳转时操作浏览器历史记录的模式</li>\n<li>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code></li>\n<li>如何开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li>\n</ol>\n<h3 id=\"9-编程式路由导航\"><a href=\"#9-编程式路由导航\" class=\"headerlink\" title=\"9.编程式路由导航\"></a>9.编程式路由导航</h3><ol>\n<li><p>作用：不借助<code>&lt;router-link&gt;</code>实现路由跳转，让路由跳转更加灵活</p>\n</li>\n<li><p>具体编码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//$router的两个API</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$router.push(&#123;</span><br><span class=\"line\">\tname:<span class=\"string\">&#x27;xiangqing&#x27;</span>,</span><br><span class=\"line\">\t\tparams:&#123;</span><br><span class=\"line\">\t\t\tid:xxx,</span><br><span class=\"line\">\t\t\ttitle:xxx</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$router.replace(&#123;</span><br><span class=\"line\">\tname:<span class=\"string\">&#x27;xiangqing&#x27;</span>,</span><br><span class=\"line\">\t\tparams:&#123;</span><br><span class=\"line\">\t\t\tid:xxx,</span><br><span class=\"line\">\t\t\ttitle:xxx</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">this</span>.$router.forward() <span class=\"comment\">//前进</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$router.back() <span class=\"comment\">//后退</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$router.go() <span class=\"comment\">//可前进也可后退</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"10-缓存路由组件\"><a href=\"#10-缓存路由组件\" class=\"headerlink\" title=\"10.缓存路由组件\"></a>10.缓存路由组件</h3><ol>\n<li><p>作用：让不展示的路由组件保持挂载，不被销毁。</p>\n</li>\n<li><p>具体编码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;keep-alive include&#x3D;&quot;News&quot;&gt; </span><br><span class=\"line\">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class=\"line\">&lt;&#x2F;keep-alive&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"11-两个新的生命周期钩子\"><a href=\"#11-两个新的生命周期钩子\" class=\"headerlink\" title=\"11.两个新的生命周期钩子\"></a>11.两个新的生命周期钩子</h3><ol>\n<li>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</li>\n<li>具体名字：<ol>\n<li><code>activated</code>路由组件被激活时触发。</li>\n<li><code>deactivated</code>路由组件失活时触发。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"12-路由守卫\"><a href=\"#12-路由守卫\" class=\"headerlink\" title=\"12.路由守卫\"></a>12.路由守卫</h3><ol>\n<li><p>作用：对路由进行权限控制</p>\n</li>\n<li><p>分类：全局守卫、独享守卫、组件内守卫</p>\n</li>\n<li><p>全局守卫:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//全局前置守卫：初始化时执行、每次路由切换前执行</span></span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;beforeEach&#x27;</span>,to,<span class=\"keyword\">from</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(to.meta.isAuth)&#123; <span class=\"comment\">//判断当前路由是否需要进行权限控制</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&#x27;school&#x27;</span>) === <span class=\"string\">&#x27;atguigu&#x27;</span>)&#123; <span class=\"comment\">//权限控制的具体规则</span></span><br><span class=\"line\">\t\t\tnext() <span class=\"comment\">//放行</span></span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\talert(<span class=\"string\">&#x27;暂无权限查看&#x27;</span>)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tnext() <span class=\"comment\">//放行</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//全局后置守卫：初始化时执行、每次路由切换后执行</span></span><br><span class=\"line\">router.afterEach(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span></span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;afterEach&#x27;</span>,to,<span class=\"keyword\">from</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(to.meta.title)&#123; </span><br><span class=\"line\">\t\t<span class=\"built_in\">document</span>.title = to.meta.title <span class=\"comment\">//修改网页的title</span></span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">document</span>.title = <span class=\"string\">&#x27;vue_test&#x27;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>独享守卫:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">beforeEnter</span>(<span class=\"params\">to,<span class=\"keyword\">from</span>,next</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;beforeEnter&#x27;</span>,to,<span class=\"keyword\">from</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(to.meta.isAuth)&#123; <span class=\"comment\">//判断当前路由是否需要进行权限控制</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&#x27;school&#x27;</span>) === <span class=\"string\">&#x27;atguigu&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\tnext()</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\talert(<span class=\"string\">&#x27;暂无权限查看&#x27;</span>)</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tnext()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>组件内守卫：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//进入守卫：通过路由规则，进入该组件时被调用</span></span><br><span class=\"line\">beforeRouteEnter (to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">//离开守卫：通过路由规则，离开该组件时被调用</span></span><br><span class=\"line\">beforeRouteLeave (to, <span class=\"keyword\">from</span>, next) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"13-路由器的两种工作模式\"><a href=\"#13-路由器的两种工作模式\" class=\"headerlink\" title=\"13.路由器的两种工作模式\"></a>13.路由器的两种工作模式</h3><ol>\n<li>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。</li>\n<li>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。</li>\n<li>hash模式：<ol>\n<li>地址中永远带着#号，不美观 。</li>\n<li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li>\n<li>兼容性较好。</li>\n</ol>\n</li>\n<li>history模式：<ol>\n<li>地址干净，美观 。</li>\n<li>兼容性和hash模式相比略差。</li>\n<li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li>\n</ol>\n</li>\n</ol>\n<p><code>node.js部署的话需要下载connect-history 解决路由history模式刷新404问题</code><br><code>路由history模式刷新页面会进行http请求,hash模式#后面的不会进行http请求</code><br><!-- nodejs简单部署代码 --><br><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> history = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;connect-history-api-fallback&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\">app.use(history())<span class=\"comment\">//在静态资源之前</span></span><br><span class=\"line\">app.use(express.static(__dirname+<span class=\"string\">&#x27;/static&#x27;</span>)) <span class=\"comment\">//在文件夹根目录创建static的文件夹</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/person&#x27;</span>,<span class=\"function\">(<span class=\"params\">req,res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  res.send(&#123;</span><br><span class=\"line\">    name:<span class=\"string\">&#x27;liu&#x27;</span>,</span><br><span class=\"line\">    age:<span class=\"number\">23</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// connect-history 解决路由history模式刷新404问题</span></span><br><span class=\"line\"><span class=\"comment\">// 路由history模式刷新页面会进行http请求,hash模式#后面的不会进行http请求</span></span><br><span class=\"line\">app.listen(<span class=\"number\">5005</span>,<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!err) <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;服务器启动成功啦！&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n","categories":["Vue"],"tags":["Vue"]},{"title":"keep-alive的作用及用法","url":"/blog/2022/03/09/keep-alive%E7%9A%84%E4%BD%9C%E7%94%A8%E5%8F%8A%E7%94%A8%E6%B3%95/","content":"<h1 id=\"keep-alive-的作用\"><a href=\"#keep-alive-的作用\" class=\"headerlink\" title=\"keep-alive 的作用\"></a>keep-alive 的作用</h1><p>keep-alive是vue的内置组件，当它包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。<br>keep-alive 是一个抽象组件：<code>它自身不会渲染成一个 DOM 元素</code>，也不会出现在父组件链中。</p>\n<p>在组件切换过程中 把切换出去的组件保留在<code>内存</code>中，防止重复渲染DOM，减少加载时间及性能消耗，提高用户体验性。</p>\n<p>被包含在 keep-alive 中创建的组件，会多出两个生命周期的钩子: <code>activated（组件激活时使用） 与 deactivated（组价离开时调用）</code></p>\n<h1 id=\"keep-ailve用法\"><a href=\"#keep-ailve用法\" class=\"headerlink\" title=\"keep-ailve用法:\"></a>keep-ailve用法:</h1><ol>\n<li>如果需要缓存整个项目，直接在<code>app.vue</code>中用keep-alive包裹<code>router-view</code>即可</li>\n<li>要缓存部分页面，需要在路由地址配置中，在meta属性中添加一个状态，在app.vue中判断一下包裹的router-view即可</li>\n<li><p>也可以使用exclude和include规定缓存哪个组件不缓存哪个组件</p>\n<ul>\n<li>include - 字符串或正则表达式。只有名称匹配的组件会被缓存。</li>\n<li>exclude - 字符串或正则表达式。任何名称匹配的组件都不会被缓存。</li>\n<li>max - 数字。最多可以缓存多少组件实例。</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"keep-ailve使用场景\"><a href=\"#keep-ailve使用场景\" class=\"headerlink\" title=\"keep-ailve使用场景\"></a>keep-ailve使用场景</h1><p>例如有一个商品页面和一个详情页面，这样在两个页面切换的时候就可以用到keep-alive,在切换到详情的时候，<br>把状态保留在内存中，而不是销毁,从而提高一个性能的优化</p>\n<h1 id=\"keep-ailve原理\"><a href=\"#keep-ailve原理\" class=\"headerlink\" title=\"keep-ailve原理\"></a>keep-ailve原理</h1><p>帮助理解 <a href=\"https://www.jianshu.com/p/9523bb439950\">https://www.jianshu.com/p/9523bb439950</a><br>在 created 函数调用时将需要缓存的 VNode 节点保存在 this.cache 中／在 render（页面渲染） 时，如果 VNode 的 name 符合缓存条件（可以用 include 以及 exclude 控制），则会从 this.cache 中取出之前缓存的 VNode 实例进行渲染。</p>\n<p>VNode：虚拟DOM，其实就是一个JS对象</p>\n<h1 id=\"keep-ailve生成的生命周期函数\"><a href=\"#keep-ailve生成的生命周期函数\" class=\"headerlink\" title=\"keep-ailve生成的生命周期函数\"></a>keep-ailve生成的生命周期函数</h1><ol>\n<li>activated<br>在 keep-alive 组件激活时调用,该钩子函数在服务器端渲染期间不被调用</li>\n<li>deactivated<br>在 keep-alive 组件停用时调用,该钩子在服务器端渲染期间不被调用<blockquote>\n<p>被包含在 keep-alive 中创建的组件，会多出两个生命周期的钩子: activated 与 deactivated</p>\n</blockquote>\n</li>\n</ol>\n<p><code>使用 keep-alive 会将数据保留在内存中，如果要在每次进入页面的时候获取最新的数据，需要在 activated 阶段获取数据，承担原来 created 钩子函数中获取数据的任务。</code></p>\n<blockquote>\n<p>注意： 只有组件被 keep-alive 包裹时，这两个生命周期函数才会被调用，如果作为正常组件使用，是不会被调用的，以及在<br>2.1.0 版本之后，使用 exclude 排除之后，就算被包裹在 keep-alive 中，这两个钩子函数依然不会被调用！另外，在服务端渲染时，此钩子函数也不会被调用。</p>\n</blockquote>\n<h1 id=\"部分实现代码\"><a href=\"#部分实现代码\" class=\"headerlink\" title=\"部分实现代码\"></a>部分实现代码</h1><ol>\n<li>缓存所有页面<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">在 App.vue 里面</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=<span class=\"string\">&quot;app&quot;</span>&gt;</span><br><span class=\"line\">  \t&lt;keep-alive&gt;</span><br><span class=\"line\">      &lt;router-view/&gt;</span><br><span class=\"line\">    &lt;/keep-alive&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;App&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>根据条件缓存页面<br>在 App.vue 里面<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=<span class=\"string\">&quot;app&quot;</span>&gt;</span><br><span class=\"line\">  \t<span class=\"comment\">// 1. 将缓存 name 为 test 的组件</span></span><br><span class=\"line\">  \t&lt;keep-alive include=<span class=\"string\">&#x27;test&#x27;</span>&gt;</span><br><span class=\"line\">      &lt;router-view/&gt;</span><br><span class=\"line\">    &lt;/keep-alive&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 2. 将缓存 name 为 a 或者 b 的组件，结合动态组件使用</span></span><br><span class=\"line\">\t&lt;keep-alive include=<span class=\"string\">&#x27;a,b&#x27;</span>&gt;</span><br><span class=\"line\">  \t  &lt;router-view/&gt;</span><br><span class=\"line\">\t&lt;/keep-alive&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 3. 使用正则表达式，需使用 v-bind</span></span><br><span class=\"line\">\t&lt;keep-alive :include=<span class=\"string\">&#x27;/a|b/&#x27;</span>&gt;</span><br><span class=\"line\">  \t  &lt;router-view/&gt;</span><br><span class=\"line\">\t&lt;/keep-alive&gt;\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 5.动态判断</span></span><br><span class=\"line\">\t&lt;keep-alive :include=<span class=\"string\">&#x27;includedComponents&#x27;</span>&gt;</span><br><span class=\"line\">  \t  &lt;router-view/&gt;</span><br><span class=\"line\">\t&lt;/keep-alive&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 5. 将不缓存 name 为 test 的组件</span></span><br><span class=\"line\">\t&lt;keep-alive exclude=<span class=\"string\">&#x27;test&#x27;</span>&gt;</span><br><span class=\"line\">  \t  &lt;router-view/&gt;</span><br><span class=\"line\">\t&lt;/keep-alive&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;App&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>结合Router，缓存部分页面<br>在 router 目录下的 index.js 文件里<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-router&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Home = <span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">require</span>([<span class=\"string\">&#x27;@/components/home/home&#x27;</span>], resolve)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Goods = <span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">require</span>([<span class=\"string\">&#x27;@/components/home/goods&#x27;</span>], resolve)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Ratings = <span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">require</span>([<span class=\"string\">&#x27;@/components/home/ratings&#x27;</span>], resolve)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Seller = <span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">require</span>([<span class=\"string\">&#x27;@/components/home/seller&#x27;</span>], resolve)</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Router)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">  mode: <span class=\"string\">&#x27;history&#x27;</span>,</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: <span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\">      name: <span class=\"string\">&#x27;home&#x27;</span>,</span><br><span class=\"line\">      component: Home,</span><br><span class=\"line\">      redirect: <span class=\"string\">&#x27;goods&#x27;</span>,</span><br><span class=\"line\">      children: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">&#x27;goods&#x27;</span>,</span><br><span class=\"line\">          name: <span class=\"string\">&#x27;goods&#x27;</span>,</span><br><span class=\"line\">          component: Goods,</span><br><span class=\"line\">          meta: &#123;</span><br><span class=\"line\">        \tkeepAlive: <span class=\"literal\">false</span> <span class=\"comment\">// 不需要缓存</span></span><br><span class=\"line\">      \t  &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">&#x27;ratings&#x27;</span>,</span><br><span class=\"line\">          name: <span class=\"string\">&#x27;ratings&#x27;</span>,</span><br><span class=\"line\">          component: Ratings,</span><br><span class=\"line\">          meta: &#123;</span><br><span class=\"line\">        \tkeepAlive: <span class=\"literal\">true</span>  <span class=\"comment\">// 需要缓存</span></span><br><span class=\"line\">      \t  &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          path: <span class=\"string\">&#x27;seller&#x27;</span>,</span><br><span class=\"line\">          name: <span class=\"string\">&#x27;seller&#x27;</span>,</span><br><span class=\"line\">          component: Seller,</span><br><span class=\"line\">          meta: &#123;</span><br><span class=\"line\">        \tkeepAlive: <span class=\"literal\">true</span>  <span class=\"comment\">// 需要缓存</span></span><br><span class=\"line\">      \t  &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>在 App.vue 里面<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=<span class=\"string\">&quot;app&quot;</span>&gt;</span><br><span class=\"line\">  \t&lt;keep-alive&gt;</span><br><span class=\"line\">      &lt;router-view v-<span class=\"keyword\">if</span>=<span class=\"string\">&quot;$route.meta.keepAlive&quot;</span>&gt;&lt;/router-view&gt;</span><br><span class=\"line\">    &lt;/keep-alive&gt;</span><br><span class=\"line\">    &lt;router-view v-<span class=\"keyword\">if</span>=<span class=\"string\">&quot;!$route.meta.keepAlive&quot;</span>&gt;&lt;/router-view&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&#x27;App&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","categories":["Vue"],"tags":["Vue"]},{"title":"vue3入门笔记","url":"/blog/2022/03/09/vue3%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/","content":"<h1 id=\"Vue3快速上手\"><a href=\"#Vue3快速上手\" class=\"headerlink\" title=\"Vue3快速上手\"></a>Vue3快速上手</h1><p><img src=\"https://user-images.githubusercontent.com/499550/93624428-53932780-f9ae-11ea-8d16-af949e16a09f.png\" style=\"width:200px\"></p>\n<h2 id=\"1-Vue3简介\"><a href=\"#1-Vue3简介\" class=\"headerlink\" title=\"1.Vue3简介\"></a>1.Vue3简介</h2><ul>\n<li>2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）</li>\n<li>耗时2年多、<a href=\"https://github.com/vuejs/vue-next/graphs/commit-activity\">2600+次提交</a>、<a href=\"https://github.com/vuejs/rfcs/tree/master/active-rfcs\">30+个RFC</a>、<a href=\"https://github.com/vuejs/vue-next/pulls?q=is%3Apr+is%3Amerged+-author%3Aapp%2Fdependabot-preview+\">600+次PR</a>、<a href=\"https://github.com/vuejs/vue-next/graphs/contributors\">99位贡献者</a> </li>\n<li>github上的tags地址：<a href=\"https://github.com/vuejs/vue-next/releases/tag/v3.0.0\">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></li>\n</ul>\n<h2 id=\"2-Vue3带来了什么\"><a href=\"#2-Vue3带来了什么\" class=\"headerlink\" title=\"2.Vue3带来了什么\"></a>2.Vue3带来了什么</h2><h3 id=\"1-性能的提升\"><a href=\"#1-性能的提升\" class=\"headerlink\" title=\"1.性能的提升\"></a>1.性能的提升</h3><ul>\n<li><p>打包大小减少41%</p>\n</li>\n<li><p>初次渲染快55%, 更新渲染快133%</p>\n</li>\n<li><p>内存减少54%</p>\n<p>……</p>\n</li>\n</ul>\n<h3 id=\"2-源码的升级\"><a href=\"#2-源码的升级\" class=\"headerlink\" title=\"2.源码的升级\"></a>2.源码的升级</h3><ul>\n<li><p>使用Proxy代替defineProperty实现响应式</p>\n</li>\n<li><p>重写虚拟DOM的实现和Tree-Shaking</p>\n<p>……</p>\n</li>\n</ul>\n<h3 id=\"3-拥抱TypeScript\"><a href=\"#3-拥抱TypeScript\" class=\"headerlink\" title=\"3.拥抱TypeScript\"></a>3.拥抱TypeScript</h3><ul>\n<li>Vue3可以更好的支持TypeScript</li>\n</ul>\n<h3 id=\"4-新的特性\"><a href=\"#4-新的特性\" class=\"headerlink\" title=\"4.新的特性\"></a>4.新的特性</h3><ol>\n<li><p>Composition API（组合API）</p>\n<ul>\n<li>setup配置</li>\n<li>ref与reactive</li>\n<li>watch与watchEffect</li>\n<li>provide与inject</li>\n<li>……</li>\n</ul>\n</li>\n<li>新的内置组件<ul>\n<li>Fragment </li>\n<li>Teleport</li>\n<li>Suspense</li>\n</ul>\n</li>\n<li><p>其他改变</p>\n<ul>\n<li>新的生命周期钩子</li>\n<li>data 选项应始终被声明为一个函数</li>\n<li>移除keyCode支持作为 v-on 的修饰符</li>\n<li>……</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"一、创建Vue3-0工程\"><a href=\"#一、创建Vue3-0工程\" class=\"headerlink\" title=\"一、创建Vue3.0工程\"></a>一、创建Vue3.0工程</h1><h2 id=\"1-使用-vue-cli-创建\"><a href=\"#1-使用-vue-cli-创建\" class=\"headerlink\" title=\"1.使用 vue-cli 创建\"></a>1.使用 vue-cli 创建</h2><p>官方文档：<a href=\"https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create\">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span></span><br><span class=\"line\">vue --version</span><br><span class=\"line\"><span class=\"comment\">## 安装或者升级你的@vue/cli</span></span><br><span class=\"line\">npm install -g @vue/cli</span><br><span class=\"line\"><span class=\"comment\">## 创建</span></span><br><span class=\"line\">vue create vue_test</span><br><span class=\"line\"><span class=\"comment\">## 启动</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> vue_test</span><br><span class=\"line\">npm run serve</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-使用-vite-创建\"><a href=\"#2-使用-vite-创建\" class=\"headerlink\" title=\"2.使用 vite 创建\"></a>2.使用 vite 创建</h2><p>官方文档：<a href=\"https://v3.cn.vuejs.org/guide/installation.html#vite\">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p>\n<p>vite官网：<a href=\"https://vitejs.cn\">https://vitejs.cn</a></p>\n<ul>\n<li>什么是vite？—— 新一代前端构建工具。</li>\n<li>优势如下：<ul>\n<li>开发环境中，无需打包操作，可快速的冷启动。</li>\n<li>轻量快速的热重载（HMR）。</li>\n<li>真正的按需编译，不再等待整个应用编译完成。</li>\n</ul>\n</li>\n<li>传统构建 与 vite构建对比图</li>\n</ul>\n<p><img src=\"https://cn.vitejs.dev/assets/bundler.37740380.png\" style=\"width:500px;height:280px;float:left\"><img src=\"https://cn.vitejs.dev/assets/esm.3070012d.png\" style=\"width:480px;height:280px\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 创建工程</span></span><br><span class=\"line\">npm init vite-app &lt;project-name&gt;</span><br><span class=\"line\"><span class=\"comment\">## 进入工程目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> &lt;project-name&gt;</span><br><span class=\"line\"><span class=\"comment\">## 安装依赖</span></span><br><span class=\"line\">npm install</span><br><span class=\"line\"><span class=\"comment\">## 运行</span></span><br><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<h1 id=\"二、常用-Composition-API\"><a href=\"#二、常用-Composition-API\" class=\"headerlink\" title=\"二、常用 Composition API\"></a>二、常用 Composition API</h1><p>官方文档: <a href=\"https://v3.cn.vuejs.org/guide/composition-api-introduction.html\">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p>\n<h2 id=\"1-拉开序幕的setup\"><a href=\"#1-拉开序幕的setup\" class=\"headerlink\" title=\"1.拉开序幕的setup\"></a>1.拉开序幕的setup</h2><ol>\n<li>理解：Vue3.0中一个新的配置项，值为一个函数。</li>\n<li>setup是所有<strong style=\"color:#DD5145\">Composition API（组合API）</strong><i style=\"color:gray;font-weight:bold\">“ 表演的舞台 ”</i>。</li>\n<li>组件中所用到的：数据、方法等等，均要配置在setup中。</li>\n<li>setup函数的两种返回值：<ol>\n<li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li>\n<li><span style=\"color:#aad\">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></li>\n</ol>\n</li>\n<li>注意点：<ol>\n<li>尽量不要与Vue2.x配置混用<ul>\n<li>Vue2.x配置（data、methos、computed…）中<strong style=\"color:#DD5145\">可以访问到</strong>setup中的属性、方法。</li>\n<li>但在setup中<strong style=\"color:#DD5145\">不能访问到</strong>Vue2.x配置（data、methos、computed…）。 <code>(因为setup函数比create函数还早触发一点)</code></li>\n<li>如果有重名, setup优先。</li>\n</ul>\n</li>\n<li>setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"2-ref函数\"><a href=\"#2-ref函数\" class=\"headerlink\" title=\"2.ref函数\"></a>2.ref函数</h2><ul>\n<li>作用: 定义一个响应式的数据</li>\n<li>语法: <code>const xxx = ref(initValue)</code> <ul>\n<li>创建一个包含响应式数据的<strong style=\"color:#DD5145\">引用对象（reference对象，简称ref对象）</strong>。</li>\n<li>JS中操作数据： <code>xxx.value</code></li>\n<li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li>\n</ul>\n</li>\n<li>备注：<ul>\n<li>接收的数据可以是：基本类型、也可以是对象类型。</li>\n<li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li>\n<li>对象类型的数据：内部 <i style=\"color:gray;font-weight:bold\">“ 求助 ”</i> 了Vue3.0中的一个新函数—— <code>reactive</code>函数。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-reactive函数\"><a href=\"#3-reactive函数\" class=\"headerlink\" title=\"3.reactive函数\"></a>3.reactive函数</h2><ul>\n<li>作用: 定义一个<strong style=\"color:#DD5145\">对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li>\n<li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style=\"color:#DD5145\">代理对象（Proxy的实例对象，简称proxy对象）</strong></li>\n<li>reactive定义的响应式数据是“深层次的”。</li>\n<li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li>\n</ul>\n<h2 id=\"4-Vue3-0中的响应式原理\"><a href=\"#4-Vue3-0中的响应式原理\" class=\"headerlink\" title=\"4.Vue3.0中的响应式原理\"></a>4.Vue3.0中的响应式原理</h2><h3 id=\"vue2-x的响应式\"><a href=\"#vue2-x的响应式\" class=\"headerlink\" title=\"vue2.x的响应式\"></a>vue2.x的响应式</h3><ul>\n<li><p>实现原理：</p>\n<ul>\n<li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p>\n</li>\n<li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(data, <span class=\"string\">&#x27;count&#x27;</span>, &#123;</span><br><span class=\"line\">    get () &#123;&#125;, </span><br><span class=\"line\">    set () &#123;&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>存在问题：</p>\n<ul>\n<li>新增属性、删除属性, 界面不会更新。</li>\n<li>直接通过下标修改数组, 界面不会自动更新。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Vue3-0的响应式\"><a href=\"#Vue3-0的响应式\" class=\"headerlink\" title=\"Vue3.0的响应式\"></a>Vue3.0的响应式</h3><ul>\n<li><p>实现原理: </p>\n<ul>\n<li>通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</li>\n<li>通过Reflect（反射）:  对源对象的属性进行操作。</li>\n<li><p>MDN文档中描述的Proxy与Reflect：</p>\n<ul>\n<li><p>Proxy：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p>\n</li>\n<li><p>Reflect：<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(data, &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 拦截读取属性值</span></span><br><span class=\"line\">    get (target, prop) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(target, prop)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 拦截设置属性值或添加新属性</span></span><br><span class=\"line\">    set (target, prop, value) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.set(target, prop, value)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 拦截删除属性</span></span><br><span class=\"line\">    deleteProperty (target, prop) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.deleteProperty(target, prop)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.name = <span class=\"string\">&#x27;tom&#x27;</span>   </span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5-reactive对比ref\"><a href=\"#5-reactive对比ref\" class=\"headerlink\" title=\"5.reactive对比ref\"></a>5.reactive对比ref</h2><ul>\n<li>从定义数据角度对比：<ul>\n<li>ref用来定义：<strong style=\"color:#DD5145\">基本类型数据</strong>。</li>\n<li>reactive用来定义：<strong style=\"color:#DD5145\">对象（或数组）类型数据</strong>。</li>\n<li>备注：ref也可以用来定义<strong style=\"color:#DD5145\">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style=\"color:#DD5145\">代理对象</strong>。</li>\n</ul>\n</li>\n<li>从原理角度对比：<ul>\n<li>ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li>\n<li>reactive通过使用<strong style=\"color:#DD5145\">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style=\"color:#DD5145\">Reflect</strong>操作<strong style=\"color:orange\">源对象</strong>内部的数据。</li>\n</ul>\n</li>\n<li>从使用角度对比：<ul>\n<li>ref定义的数据：操作数据<strong style=\"color:#DD5145\">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style=\"color:#DD5145\">不需要</strong><code>.value</code>。</li>\n<li>reactive定义的数据：操作数据与读取数据：<strong style=\"color:#DD5145\">均不需要</strong><code>.value</code>。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6-setup的两个注意点\"><a href=\"#6-setup的两个注意点\" class=\"headerlink\" title=\"6.setup的两个注意点\"></a>6.setup的两个注意点</h2><ul>\n<li><p>setup执行的时机</p>\n<ul>\n<li>在beforeCreate之前执行一次，this是undefined。</li>\n</ul>\n</li>\n<li><p>setup的参数</p>\n<ul>\n<li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li>\n<li>context：上下文对象<ul>\n<li>attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 <code>this.$attrs</code>。</li>\n<li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。</li>\n<li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"7-计算属性与监视\"><a href=\"#7-计算属性与监视\" class=\"headerlink\" title=\"7.计算属性与监视\"></a>7.计算属性与监视</h2><h3 id=\"1-computed函数\"><a href=\"#1-computed函数\" class=\"headerlink\" title=\"1.computed函数\"></a>1.computed函数</h3><ul>\n<li><p>与Vue2.x中computed配置功能一致</p>\n</li>\n<li><p>写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;computed&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">\t<span class=\"comment\">//计算属性——简写</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> fullName = computed(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> person.firstName + <span class=\"string\">&#x27;-&#x27;</span> + person.lastName</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">//计算属性——完整</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> fullName = computed(&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> person.firstName + <span class=\"string\">&#x27;-&#x27;</span> + person.lastName</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> nameArr = value.split(<span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">            person.firstName = nameArr[<span class=\"number\">0</span>]</span><br><span class=\"line\">            person.lastName = nameArr[<span class=\"number\">1</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2-watch函数\"><a href=\"#2-watch函数\" class=\"headerlink\" title=\"2.watch函数\"></a>2.watch函数</h3><ul>\n<li><p>与Vue2.x中watch配置功能一致</p>\n</li>\n<li><p>两个小“坑”：</p>\n<ul>\n<li>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</li>\n<li>监视reactive定义的响应式数据中某个属性时：deep配置有效。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//情况一：监视ref定义的响应式数据</span></span><br><span class=\"line\">watch(sum,<span class=\"function\">(<span class=\"params\">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;sum变化了&#x27;</span>,newValue,oldValue)</span><br><span class=\"line\">&#125;,&#123;<span class=\"attr\">immediate</span>:<span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//情况二：监视多个ref定义的响应式数据</span></span><br><span class=\"line\">watch([sum,msg],<span class=\"function\">(<span class=\"params\">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;sum或msg变化了&#x27;</span>,newValue,oldValue)</span><br><span class=\"line\">&#125;) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 情况三：监视reactive定义的响应式数据</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">watch(person,<span class=\"function\">(<span class=\"params\">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;person变化了&#x27;</span>,newValue,oldValue)</span><br><span class=\"line\">&#125;,&#123;<span class=\"attr\">immediate</span>:<span class=\"literal\">true</span>,<span class=\"attr\">deep</span>:<span class=\"literal\">false</span>&#125;) <span class=\"comment\">//此处的deep配置不再奏效</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//情况四：监视reactive定义的响应式数据中的某个属性</span></span><br><span class=\"line\">watch(<span class=\"function\">()=&gt;</span>person.job,<span class=\"function\">(<span class=\"params\">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class=\"line\">&#125;,&#123;<span class=\"attr\">immediate</span>:<span class=\"literal\">true</span>,<span class=\"attr\">deep</span>:<span class=\"literal\">true</span>&#125;) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//情况五：监视reactive定义的响应式数据中的某些属性</span></span><br><span class=\"line\">watch([<span class=\"function\">()=&gt;</span>person.job,<span class=\"function\">()=&gt;</span>person.name],<span class=\"function\">(<span class=\"params\">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class=\"line\">&#125;,&#123;<span class=\"attr\">immediate</span>:<span class=\"literal\">true</span>,<span class=\"attr\">deep</span>:<span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//特殊情况</span></span><br><span class=\"line\">watch(<span class=\"function\">()=&gt;</span>person.job,<span class=\"function\">(<span class=\"params\">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class=\"line\">&#125;,&#123;<span class=\"attr\">deep</span>:<span class=\"literal\">true</span>&#125;) <span class=\"comment\">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"3-watchEffect函数\"><a href=\"#3-watchEffect函数\" class=\"headerlink\" title=\"3.watchEffect函数\"></a>3.watchEffect函数</h3><ul>\n<li><p>watch的套路是：既要指明监视的属性，也要指明监视的回调。</p>\n</li>\n<li><p>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p>\n</li>\n<li><p>watchEffect有点像computed：</p>\n<ul>\n<li>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li>\n<li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span></span><br><span class=\"line\">watchEffect(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> x1 = sum.value</span><br><span class=\"line\">    <span class=\"keyword\">const</span> x2 = person.age</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;watchEffect配置的回调执行了&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"8-生命周期\"><a href=\"#8-生命周期\" class=\"headerlink\" title=\"8.生命周期\"></a>8.生命周期</h2><div style=\"border:1px solid black;width:380px;float:left;margin-right:20px;\"><strong>vue2.x的生命周期</strong><img src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"lifecycle_2\" style=\"zoom:33%;width:1200px\"></div><div style=\"border:1px solid black;width:510px;height:985px;float:left\"><strong>vue3.0的生命周期</strong><img src=\"https://v3.cn.vuejs.org/images/lifecycle.svg\" alt=\"lifecycle_2\" style=\"zoom:33%;width:2500px\"></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p>1</p>\n<ul>\n<li>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：<ul>\n<li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li>\n<li><code>destroyed</code>改名为 <code>unmounted</code></li>\n</ul>\n</li>\n<li>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：<ul>\n<li><code>beforeCreate</code>===&gt;<code>setup()</code></li>\n<li><code>created</code>=======&gt;<code>setup()</code></li>\n<li><code>beforeMount</code> ===&gt;<code>onBeforeMount</code></li>\n<li><code>mounted</code>=======&gt;<code>onMounted</code></li>\n<li><code>beforeUpdate</code>===&gt;<code>onBeforeUpdate</code></li>\n<li><code>updated</code> =======&gt;<code>onUpdated</code></li>\n<li><code>beforeUnmount</code> ==&gt;<code>onBeforeUnmount</code></li>\n<li><code>unmounted</code> =====&gt;<code>onUnmounted</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"9-自定义hook函数\"><a href=\"#9-自定义hook函数\" class=\"headerlink\" title=\"9.自定义hook函数\"></a>9.自定义hook函数</h2><ul>\n<li><p>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。</p>\n</li>\n<li><p>类似于vue2.x中的mixin。</p>\n</li>\n<li><p>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</p>\n</li>\n</ul>\n<h2 id=\"10-toRef\"><a href=\"#10-toRef\" class=\"headerlink\" title=\"10.toRef\"></a>10.toRef</h2><ul>\n<li>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。</li>\n<li>语法：<code>const name = toRef(person,&#39;name&#39;)</code></li>\n<li>应用:   要将响应式对象中的某个属性单独提供给外部使用时。</li>\n</ul>\n<ul>\n<li>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></li>\n</ul>\n<h1 id=\"三、其它-Composition-API\"><a href=\"#三、其它-Composition-API\" class=\"headerlink\" title=\"三、其它 Composition API\"></a>三、其它 Composition API</h1><h2 id=\"1-shallowReactive-与-shallowRef\"><a href=\"#1-shallowReactive-与-shallowRef\" class=\"headerlink\" title=\"1.shallowReactive 与 shallowRef\"></a>1.shallowReactive 与 shallowRef</h2><ul>\n<li>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</li>\n<li><p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p>\n</li>\n<li><p>什么时候使用?</p>\n<ul>\n<li>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive。</li>\n<li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; shallowRef。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-readonly-与-shallowReadonly\"><a href=\"#2-readonly-与-shallowReadonly\" class=\"headerlink\" title=\"2.readonly 与 shallowReadonly\"></a>2.readonly 与 shallowReadonly</h2><ul>\n<li>readonly: 让一个响应式数据变为只读的（深只读）。</li>\n<li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li>\n<li>应用场景: 不希望数据被修改时。</li>\n</ul>\n<h2 id=\"3-toRaw-与-markRaw\"><a href=\"#3-toRaw-与-markRaw\" class=\"headerlink\" title=\"3.toRaw 与 markRaw\"></a>3.toRaw 与 markRaw</h2><ul>\n<li>toRaw：<ul>\n<li>作用：将一个由<code>reactive</code>生成的<strong style=\"color:orange\">响应式对象</strong>转为<strong style=\"color:orange\">普通对象</strong>。</li>\n<li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li>\n</ul>\n</li>\n<li>markRaw：<ul>\n<li>作用：标记一个对象，使其永远不会再成为响应式对象。</li>\n<li>应用场景:<ol>\n<li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li>\n<li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-customRef\"><a href=\"#4-customRef\" class=\"headerlink\" title=\"4.customRef\"></a>4.customRef</h2><ul>\n<li><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p>\n</li>\n<li><p>实现防抖效果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;keyword&quot;&gt;</span><br><span class=\"line\">\t&lt;h3&gt;&#123;&#123;keyword&#125;&#125;&lt;&#x2F;h3&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\timport &#123;ref,customRef&#125; from &#39;vue&#39;</span><br><span class=\"line\">\texport default &#123;</span><br><span class=\"line\">\t\tname:&#39;Demo&#39;,</span><br><span class=\"line\">\t\tsetup()&#123;</span><br><span class=\"line\">\t\t\t&#x2F;&#x2F; let keyword &#x3D; ref(&#39;hello&#39;) &#x2F;&#x2F;使用Vue准备好的内置ref</span><br><span class=\"line\">\t\t\t&#x2F;&#x2F;自定义一个myRef</span><br><span class=\"line\">\t\t\tfunction myRef(value,delay)&#123;</span><br><span class=\"line\">\t\t\t\tlet timer</span><br><span class=\"line\">\t\t\t\t&#x2F;&#x2F;通过customRef去实现自定义</span><br><span class=\"line\">\t\t\t\treturn customRef((track,trigger)&#x3D;&gt;&#123;</span><br><span class=\"line\">\t\t\t\t\treturn&#123;</span><br><span class=\"line\">\t\t\t\t\t\tget()&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\ttrack() &#x2F;&#x2F;告诉Vue这个value值是需要被“追踪”的</span><br><span class=\"line\">\t\t\t\t\t\t\treturn value</span><br><span class=\"line\">\t\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\t\tset(newValue)&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tclearTimeout(timer)</span><br><span class=\"line\">\t\t\t\t\t\t\ttimer &#x3D; setTimeout(()&#x3D;&gt;&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\tvalue &#x3D; newValue</span><br><span class=\"line\">\t\t\t\t\t\t\t\ttrigger() &#x2F;&#x2F;告诉Vue去更新界面</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;,delay)</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tlet keyword &#x3D; myRef(&#39;hello&#39;,500) &#x2F;&#x2F;使用程序员自定义的ref</span><br><span class=\"line\">\t\t\treturn &#123;</span><br><span class=\"line\">\t\t\t\tkeyword</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"5-provide-与-inject\"><a href=\"#5-provide-与-inject\" class=\"headerlink\" title=\"5.provide 与 inject\"></a>5.provide 与 inject</h2><p><img src=\"https://v3.cn.vuejs.org/images/components_provide.png\" style=\"width:300px\"></p>\n<ul>\n<li><p>作用：实现<strong style=\"color:#DD5145\">祖与后代组件间</strong>通信</p>\n</li>\n<li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p>\n</li>\n<li><p>具体写法：</p>\n<ol>\n<li><p>祖组件中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t......</span><br><span class=\"line\">    <span class=\"keyword\">let</span> car = reactive(&#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;奔驰&#x27;</span>,<span class=\"attr\">price</span>:<span class=\"string\">&#x27;40万&#x27;</span>&#125;)</span><br><span class=\"line\">    provide(<span class=\"string\">&#x27;car&#x27;</span>,car)</span><br><span class=\"line\">    ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>后代组件中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">setup</span>(<span class=\"params\">props,context</span>)</span>&#123;</span><br><span class=\"line\">\t......</span><br><span class=\"line\">    <span class=\"keyword\">const</span> car = inject(<span class=\"string\">&#x27;car&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;car&#125;</span><br><span class=\"line\">\t......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"6-响应式数据的判断\"><a href=\"#6-响应式数据的判断\" class=\"headerlink\" title=\"6.响应式数据的判断\"></a>6.响应式数据的判断</h2><ul>\n<li>isRef: 检查一个值是否为一个 ref 对象</li>\n<li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li>\n<li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li>\n<li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li>\n</ul>\n<h1 id=\"四、Composition-API-的优势\"><a href=\"#四、Composition-API-的优势\" class=\"headerlink\" title=\"四、Composition API 的优势\"></a>四、Composition API 的优势</h1><h2 id=\"1-Options-API-存在的问题\"><a href=\"#1-Options-API-存在的问题\" class=\"headerlink\" title=\"1.Options API 存在的问题\"></a>1.Options API 存在的问题</h2><p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</p>\n<div style=\"width:600px;height:370px;overflow:hidden;float:left\">\n    <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.image\" style=\"width:600px;float:left\">\n</div>\n<div style=\"width:300px;height:370px;overflow:hidden;float:left\">\n    <img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5ac7e20d1784887a826f6360768a368~tplv-k3u1fbpfcp-watermark.image\" style=\"zoom:50%;width:560px;left\"> \n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h2 id=\"2-Composition-API-的优势\"><a href=\"#2-Composition-API-的优势\" class=\"headerlink\" title=\"2.Composition API 的优势\"></a>2.Composition API 的优势</h2><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p>\n<div style=\"width:500px;height:340px;overflow:hidden;float:left\">\n    <img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc0be8211fc54b6c941c036791ba4efe~tplv-k3u1fbpfcp-watermark.image\" style=\"height:360px\">\n</div>\n<div style=\"width:430px;height:340px;overflow:hidden;float:left\">\n    <img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cc55165c0e34069a75fe36f8712eb80~tplv-k3u1fbpfcp-watermark.image\" style=\"height:360px\">\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h1 id=\"五、新的组件\"><a href=\"#五、新的组件\" class=\"headerlink\" title=\"五、新的组件\"></a>五、新的组件</h1><h2 id=\"1-Fragment\"><a href=\"#1-Fragment\" class=\"headerlink\" title=\"1.Fragment\"></a>1.Fragment</h2><ul>\n<li>在Vue2中: 组件必须有一个根标签</li>\n<li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li>\n<li>好处: 减少标签层级, 减小内存占用</li>\n</ul>\n<h2 id=\"2-Teleport\"><a href=\"#2-Teleport\" class=\"headerlink\" title=\"2.Teleport\"></a>2.Teleport</h2><ul>\n<li><p>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style=\"color:#DD5145\">组件html结构</strong>移动到指定位置的技术。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;teleport to&#x3D;&quot;移动位置&quot;&gt;</span><br><span class=\"line\">\t&lt;div v-if&#x3D;&quot;isShow&quot; class&#x3D;&quot;mask&quot;&gt;</span><br><span class=\"line\">\t\t&lt;div class&#x3D;&quot;dialog&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;h3&gt;我是一个弹窗&lt;&#x2F;h3&gt;</span><br><span class=\"line\">\t\t\t&lt;button @click&#x3D;&quot;isShow &#x3D; false&quot;&gt;关闭弹窗&lt;&#x2F;button&gt;</span><br><span class=\"line\">\t\t&lt;&#x2F;div&gt;</span><br><span class=\"line\">\t&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;teleport&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"3-Suspense\"><a href=\"#3-Suspense\" class=\"headerlink\" title=\"3.Suspense\"></a>3.Suspense</h2><ul>\n<li><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p>\n</li>\n<li><p>使用步骤：</p>\n<ul>\n<li><p>异步引入组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;defineAsyncComponent&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Child = defineAsyncComponent(<span class=\"function\">()=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./components/Child.vue&#x27;</span>))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;div class&#x3D;&quot;app&quot;&gt;</span><br><span class=\"line\">\t\t&lt;h3&gt;我是App组件&lt;&#x2F;h3&gt;</span><br><span class=\"line\">\t\t&lt;Suspense&gt;</span><br><span class=\"line\">\t\t\t&lt;template v-slot:default&gt;</span><br><span class=\"line\">\t\t\t\t&lt;Child&#x2F;&gt;</span><br><span class=\"line\">\t\t\t&lt;&#x2F;template&gt;</span><br><span class=\"line\">\t\t\t&lt;template v-slot:fallback&gt;</span><br><span class=\"line\">\t\t\t\t&lt;h3&gt;加载中.....&lt;&#x2F;h3&gt;</span><br><span class=\"line\">\t\t\t&lt;&#x2F;template&gt;</span><br><span class=\"line\">\t\t&lt;&#x2F;Suspense&gt;</span><br><span class=\"line\">\t&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"六、其他\"><a href=\"#六、其他\" class=\"headerlink\" title=\"六、其他\"></a>六、其他</h1><h2 id=\"1-全局API的转移\"><a href=\"#1-全局API的转移\" class=\"headerlink\" title=\"1.全局API的转移\"></a>1.全局API的转移</h2><ul>\n<li><p>Vue 2.x 有许多全局 API 和配置。</p>\n<ul>\n<li><p>例如：注册全局组件、注册全局指令等。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注册全局组件</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">&#x27;MyButton&#x27;</span>, &#123;</span><br><span class=\"line\">  data: <span class=\"function\">() =&gt;</span> (&#123;</span><br><span class=\"line\">    count: <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  template: <span class=\"string\">&#x27;&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//注册全局指令</span></span><br><span class=\"line\">Vue.directive(<span class=\"string\">&#x27;focus&#x27;</span>, &#123;</span><br><span class=\"line\">  inserted: <span class=\"function\"><span class=\"params\">el</span> =&gt;</span> el.focus()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Vue3.0中对这些API做出了调整：</p>\n<ul>\n<li><p>将全局的API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p>\n<p>| 2.x 全局 API（<code>Vue</code>） | 3.x 实例 API (<code>app</code>)                        |<br>| ————————————- | —————————————————————- |<br>| Vue.config.xxxx           | app.config.xxxx                             |<br>| Vue.config.productionTip  | <strong style=\"color:#DD5145\">移除</strong> |<br>| Vue.component             | app.component                               |<br>| Vue.directive             | app.directive                               |<br>| Vue.mixin                 | app.mixin                                   |<br>| Vue.use                   | app.use                                     |<br>| Vue.prototype             | app.config.globalProperties                 |</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-其他改变\"><a href=\"#2-其他改变\" class=\"headerlink\" title=\"2.其他改变\"></a>2.其他改变</h2><ul>\n<li><p>data选项应始终被声明为一个函数。</p>\n</li>\n<li><p>过度类名的更改：</p>\n<ul>\n<li><p>Vue2.x写法</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.v-enter</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.v-leave-to</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.v-leave</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.v-enter-to</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Vue3.x写法</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.v-enter-from</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.v-leave-to</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.v-leave-from</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.v-enter-to</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><strong style=\"color:#DD5145\">移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p>\n</li>\n<li><p><strong style=\"color:#DD5145\">移除</strong><code>v-on.native</code>修饰符</p>\n<ul>\n<li><p>父组件中绑定事件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;my-component</span><br><span class=\"line\">  v-on:close&#x3D;&quot;handleComponentEvent&quot;</span><br><span class=\"line\">  v-on:click&#x3D;&quot;handleNativeClickEvent&quot;</span><br><span class=\"line\">&#x2F;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>子组件中声明自定义事件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  export default &#123;</span><br><span class=\"line\">    emits: [&#39;close&#39;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><strong style=\"color:#DD5145\">移除</strong>过滤器（filter）</p>\n<blockquote>\n<p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p>\n</blockquote>\n</li>\n<li><p>……</p>\n</li>\n</ul>\n","categories":["Vue3"],"tags":["Vue3"]},{"title":"主题优化","url":"/blog/2021/01/17/%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/","content":"<h1>鼠标样式</h1>\n<p>图片大小 32*32 否则无法显示<br>\n<code>themes&gt;livemylive&gt;source&gt;css&gt;top.css</code></p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: <span class=\"built_in\">url</span>(<span class=\"string\">https://cdn.jsdelivr.net/gh/tzy13755126023/BLOG_SOURCE/theme_f/curcor1.png</span>), auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.hide-block</span>&gt;<span class=\"selector-class\">.hide-button</span><span class=\"selector-class\">.open</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.hide-inline</span>&gt;<span class=\"selector-class\">.hide-button</span><span class=\"selector-class\">.open</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">button</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: <span class=\"built_in\">url</span>(<span class=\"string\">https://cdn.jsdelivr.net/gh/tzy13755126023/BLOG_SOURCE/theme_f/curcor2.png</span>), auto</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}]